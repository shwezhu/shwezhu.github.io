<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Networking on David&#39;s Blogs</title>
        <link>https://blog.yorforger.cc/tags/networking/</link>
        <description>Recent content in Networking on David&#39;s Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 07 Apr 2024 21:43:22 +0000</lastBuildDate><atom:link href="https://blog.yorforger.cc/tags/networking/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>CNAME 指向 GitHub Pages 问题</title>
        <link>https://blog.yorforger.cc/p/cname-%E6%8C%87%E5%90%91-github-pages-%E9%97%AE%E9%A2%98/</link>
        <pubDate>Sun, 07 Apr 2024 21:43:22 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/cname-%E6%8C%87%E5%90%91-github-pages-%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;p&gt;我正使用 github pages 自定义域名功能, 然后我为我的域名yorforger.cc 添加了一个 CNAME 记录即: blog.yorforger.cc -&amp;gt; shwezhu.github.io&lt;/p&gt;
&lt;p&gt;然后我在 GitHub pages 的自定义域名页面填入 blog.yorforger.cc, 然后一切工作正常, 我可以通过 blog.yorforger.cc 来访问我部署在 GitHub pages 上的博客.&lt;/p&gt;
&lt;p&gt;我还有个域名 yorblogger.top 托管在了 Cloudflare, 我就想 是不是 我可以给它添加一个 CNAME 记录, 比如: blog.yorblogger.top -&amp;gt; blog.yorforger.cc&lt;/p&gt;
&lt;p&gt;这样当我访问 blog.yorblogger.top, DNS 服务器会去查询  blog.yorforger.cc 的地址, 最后找到 shwezhu.github.io 然后访问我的博客, 但是当我尝试在浏览器访问blog.yorblogger.top  的时候, github 提示 404: There isn&amp;rsquo;t a GitHub Pages site here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/04/7f104bcc413e691178004d8951742056.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到我确实通过 blog.yorblogger.top 访问到了 shwezhu.github.io, 但是 GitHub Pages 服务器返回了 404 错误, 这是为什么呢?&lt;/p&gt;
&lt;p&gt;我看到了类似的问题 &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/16454088/can-github-pages-cname-file-contain-more-than-one-domain&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Can github pages CNAME file contain more than one domain? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No, this is not possible. See the GitHub Help &lt;a class=&#34;link&#34; href=&#34;https://arc.net/l/quote/gmhptdpc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docs&lt;/a&gt; that explain this:
Ensure you only have one domain listed in your CNAME file. If you wish to have multiple domains pointing to the same Pages, you will need to set up redirects for the other domains. Most domain registrars and DNS hosts offer this service to their customers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据文档, 我们需要设置重定向, 刚好 Cloudflare 也提供了这个服务, 具体可参考: &lt;a class=&#34;link&#34; href=&#34;https://developers.cloudflare.com/fundamentals/setup/manage-domains/redirect-domain/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redirect one domain to another&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据文档, 随便为我的域名添加了个 A 记录, 然后设置重定向规则, 具体如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/04/7d0a797bd3f1e98c7de8d7d7388fac0d.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/04/176b23e1da3ae0cd1a52f0b8c1796558.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;此时, 当我访问 yorblogger.top 时, 会自动重定向到 blog.yorforger.cc, 一切工作正常.&lt;/p&gt;
&lt;p&gt;后来我想让 blog.yorblogger.top 重定向到 blog.yorforger.cc, 然后简单设置了一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 DNS Record 把 www 记录改为 blog&lt;/li&gt;
&lt;li&gt;去 Rules -&amp;gt; Redirect Rules 添加一个规则, 与上图相同只是把 hostname=yorblogger.top 改为 hostname=blog.yorblogger.top&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>DNS 基础概念</title>
        <link>https://blog.yorforger.cc/p/dns-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
        <pubDate>Sun, 07 Apr 2024 00:15:30 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dns-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
        <description>&lt;h2 id=&#34;1-dns-hierarchy&#34;&gt;
    &lt;a href=&#34;#1-dns-hierarchy&#34;&gt;#&lt;/a&gt;
    1. DNS Hierarchy
&lt;/h2&gt;&lt;p&gt;DNS服务器怎么会知道每个域名的IP地址呢？答案是分级查询, 仔细看下面DNS解析过程，每个域名的尾部都多了一个点&lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/001-domain-name-dns-records/c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;多出的那个&lt;code&gt;.&lt;/code&gt;是Root Level Domain, 比如&lt;code&gt;www.example.com&lt;/code&gt;真正的名字是&lt;code&gt;www.example.com.root&lt;/code&gt;然后上图就简写为&lt;code&gt;www.example.com.&lt;/code&gt; 因为根域名&lt;code&gt;.root&lt;/code&gt;对于所有域名都是一样的，所以平时是省略的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;域名的层级结构: &lt;code&gt;hostname.SLD.TLD.root&lt;/code&gt;, &lt;strong&gt;hostname 也叫 subdomain&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-hostname-vs-sld&#34;&gt;
    &lt;a href=&#34;#2-hostname-vs-sld&#34;&gt;#&lt;/a&gt;
    2. HOSTNAME vs SLD
&lt;/h2&gt;&lt;p&gt;HOSTNAME 和二级域名(SLD)是不一样的, 二级域名是指&lt;code&gt;example.com&lt;/code&gt;里面的&lt;code&gt;example&lt;/code&gt;, 而HOSTNAME是指&lt;code&gt;www.example.com&lt;/code&gt;里面的&lt;code&gt;www&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;HOSTNAME 的作用是为了区分同一个域名下的不同服务, 比如&lt;code&gt;www.example.com&lt;/code&gt;和&lt;code&gt;blog.example.com&lt;/code&gt;是同一个域名下的不同服务, 现在都是采用微服务分布式架构, 即每个服务通常不在一个主机, 这样用户访问&lt;code&gt;www.example.com&lt;/code&gt;和&lt;code&gt;blog.example.com&lt;/code&gt;时就会访问到不同的服务器, 从而提供不同的服务. 如下图可以看出一个 HOSTNAME 可以对应一个 IP:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/001-domain-name-dns-records%2F01.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-dns-records&#34;&gt;
    &lt;a href=&#34;#3-dns-records&#34;&gt;#&lt;/a&gt;
    3. DNS Records
&lt;/h2&gt;&lt;h3 id=&#34;31-a-record&#34;&gt;
    &lt;a href=&#34;#31-a-record&#34;&gt;#&lt;/a&gt;
    3.1. A Record
&lt;/h3&gt;&lt;p&gt;常见的 DNS Records 有 &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;CNAME&lt;/code&gt;, &lt;code&gt;TXT&lt;/code&gt;, 其中 &lt;code&gt;A&lt;/code&gt; 记录是最常见的, 用于将域名指向一个 ipv4 IP地址, &lt;code&gt;CNAME&lt;/code&gt; 记录用于将域名指向另一个域名.&lt;/p&gt;
&lt;p&gt;当你想给域名添加一个 ip 地址时, 只能添加 &lt;code&gt;A&lt;/code&gt; 记录. 添加 A 记录时需要指定 HOSTNAME 和 IP, 其中 &lt;code&gt;HOSTNAME&lt;/code&gt; 可以填&lt;code&gt;@&lt;/code&gt;或者&lt;code&gt;www&lt;/code&gt;或&lt;code&gt;blog&lt;/code&gt;等, &lt;code&gt;@&lt;/code&gt;代表空即不填,&lt;/p&gt;
&lt;p&gt;一般域名自带默认的 DNS Records, 所以买了域名之后做的第一件事就应该删除这些默认记录, 不然等你又添加了一个A记录, 这时候你的域名就会被解析到多个IP(默认的和你刚添加的), 那浏览器访问你域名的时候, 选择哪个呢? 我查了一下论坛, 有人说是choose randomly, 所以如果你不删除域名所有的默认DNS Records, 那浏览器访问你域名的时候就有可能选择“错误”的ip,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes you can. It is called round-robin DNS, and &lt;strong&gt;the browser just chooses one of them randomly&lt;/strong&gt;. It is a well used method of getting cheap load balancing, but if one host goes down, users will still try to access it. &lt;a class=&#34;link&#34; href=&#34;https://serverfault.com/q/528742/761923&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://serverfault.com/q/528742/761923&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-cname-record&#34;&gt;
    &lt;a href=&#34;#32-cname-record&#34;&gt;#&lt;/a&gt;
    3.2. CNAME Record
&lt;/h3&gt;&lt;p&gt;Use a CNAME record instead of an A record when one domain or subdomain is just another name for a different domain. &lt;strong&gt;All CNAME records must point to a domain, never to an IP address&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;domain: example.com, subdomain: blog.example.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设你有个主网站 example.com，它有一个A记录指向IP地址 123.45.67.89。若你还想通过 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 访问这个网站，你可以为 www 设置一个CNAME记录，指向 example.com，而不是再次创建一个A记录指向 123.45.67.89。&lt;/p&gt;
&lt;p&gt;这样的设置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example.com A记录 -&amp;gt; 123.45.67.89&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; CNAME记录 -&amp;gt; example.com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户尝试访问 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 时，DNS解析流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS查找 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 的记录。&lt;/li&gt;
&lt;li&gt;找到CNAME记录，了解到 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 是 example.com 的别名。&lt;/li&gt;
&lt;li&gt;接着，DNS会解析 example.com 的A记录，获取其IP地址 123.45.67.89。&lt;/li&gt;
&lt;li&gt;用户的请求最终被定向到IP地址 123.45.67.89，也就是 example.com 所在的服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可能会好奇, 为什么不直接给 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 添加一个 A 记录, 指向 123.45.67.89 呢?&lt;/p&gt;
&lt;p&gt;再次创建一个A记录指向 123.45.67.89 以通过 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 访问网站是完全可行的。 然而，选择为 www 使用CNAME记录而不是另一个A记录主要是为了维护简便性：比如如果你的服务器IP地址发生变化，此时只需要更新 example.com 的A记录。所有指向 example.com 的CNAME记录（如 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt;）将自动指向新的IP地址。如果使用A记录，你需要手动更新 example.com 和 &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt; 的A记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Github Pages 的 custom domain 就可以使用 CNAME 记录, 即只需简单给你的域名添加一个 CNAME 记录, 指向 &lt;code&gt;username.github.io&lt;/code&gt; 即可. 注意添加 CNAME 记录时, 我的 HOSTNAME 填的是 &lt;code&gt;blog&lt;/code&gt;, 即 &lt;code&gt;blog.example.com&lt;/code&gt; 指向 &lt;code&gt;username.github.io&lt;/code&gt;, 你也可以把 HOSTNAME 设置为空, 若为空则代表你的主域名 &lt;code&gt;example.com&lt;/code&gt; 指向 &lt;code&gt;username.github.io&lt;/code&gt;, 根据个人喜好来设置.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/04/f356b3dd152035f92b0ae20335413ab0.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-ttl-field&#34;&gt;
    &lt;a href=&#34;#33-ttl-field&#34;&gt;#&lt;/a&gt;
    3.3. TTL Field
&lt;/h3&gt;&lt;p&gt;另外 DNS Records 有一个字段叫 TTL, 这里介绍一下: Time to Live (TTL) is a field on DNS records that controls how long each record is valid and — as a result — how long it takes for record updates to reach your end users. Longer TTLs speed up DNS lookups by increasing the chance of cached results, but a longer TTL also means that updates to your records take longer to go into effect.&lt;/p&gt;
&lt;h2 id=&#34;4-总结&#34;&gt;
    &lt;a href=&#34;#4-%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;
    4. 总结
&lt;/h2&gt;&lt;p&gt;买过来域名, 根据不同情况可能做的修改如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无托管域名, 则直接去你的域名注册商那里添加 DNS Records, 一般是添加 A 记录, 指向你的服务器 IP 地址 即可.&lt;/li&gt;
&lt;li&gt;若要将域名托管到其他地方 (如 Cloudflare), 则只需要修改域名的 Nameserver 为 Cloudflare 指定的的 Nameserver 即可. 之后在 Cloudflare 上即添加管理不同类似的 DNS Records.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developers.cloudflare.com/dns/manage-dns-records/reference/ttl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Time to Live (TTL) · Cloudflare DNS docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/zh-cn/learning/dns/dns-records/dns-cname-record/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是 DNS CNAME 记录？ | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.educative.io/answers/what-is-dns-hierarchy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is DNS Hierarchy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>排查实验室电脑无法访问一些网站</title>
        <link>https://blog.yorforger.cc/p/%E6%8E%92%E6%9F%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</link>
        <pubDate>Wed, 22 Nov 2023 21:43:22 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/%E6%8E%92%E6%9F%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</guid>
        <description>&lt;p&gt;首先可以联网, 谷歌和微软邮箱等其他的一些网站都可访问, 但是访问油管的时候总是会超时,&lt;/p&gt;
&lt;p&gt;首先想到了是 DNS 服务器的问题, 尝试把电脑的 DNS server 改为 8.8.8.8, 可惜需要管理员权限, 失败&lt;/p&gt;
&lt;p&gt;后来无聊想着看看解析出来youtube.com的实际ip是什么, 使用 nklookup 查了一下, (大概这样, 没在实验室)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ nslookup youtube.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:		192.168.2.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:	192.168.100.1#53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-authoritative answer:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name:	youtube.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address: 142.251.40.206
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;于是访问 &lt;code&gt;142.251.40.206&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ wget -O- 142.251.40.206
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--2023-11-22 22:23:53--  http://142.251.40.206/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to 142.251.40.206:80... connected.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP request sent, awaiting response... &lt;span class=&#34;m&#34;&gt;301&lt;/span&gt; Moved Permanently
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Location: http://www.google.com/ &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;following&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--2023-11-22 22:23:53--  http://www.google.com/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Resolving www.google.com &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;www.google.com&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;... 142.250.80.36
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到被重定向到了谷歌页面, 当时在实验室也是这种情况, 查了一下, 这确实是正确的地址, 只是&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/5142030/why-does-the-resolved-ip-of-youtube-com-direct-to-google-com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;谷歌给重定向&lt;/a&gt;了, 所以不是DNS的问题, 那应该就是防火墙的问题, 下次去实验室再看看,&lt;/p&gt;
&lt;p&gt;另外上面 nskookup 返回的是 &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/006-commands-in-network/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Non-authoritative answer&lt;/a&gt;, 意思是 ip 地址不是由该域名的 NS 服务器返回的, 而是从 DNS cache获取的, 所以 Non-authoritative answer 并不是代表不安全或者不可靠, 但可能不是最新的, 比如你的域名刚更新了 NS server, 加了层 Cloudflare 的 https 加密代理, 即 &lt;code&gt;your_domain-&amp;gt;proxy-ip-&amp;gt;your_ip&lt;/code&gt;, 而学校的 DNS cache 里缓存的却是你之前的 ip, 即 &lt;code&gt;your_domain -&amp;gt; your_ip&lt;/code&gt;, 那代理就不会生效,&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;去实验室查了一下我域名的NS, 竟然 time-out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;c: \Users\student&amp;gt;nslookup shaowenzhu.top
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: Unknown
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:192.168.102.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS request timed out.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;timeout was 2 seconds.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查了一下, 看到了一个与我&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1303128/why-does-nslookup-return-dns-request-timed-out&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;相似的问题&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;DNS request timed out&lt;/em&gt; means NSLookup submitted the query to the DNS server, but did not get a response.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible the DNS server you queried was having a problem and couldn&amp;rsquo;t reply. Network errors could be to blame as well.&lt;/p&gt;
&lt;p&gt;However, given that you did this from a &amp;ldquo;public computer,&amp;rdquo; the most likely explanation is that &lt;strong&gt;your DNS lookup was blocked by the network&amp;rsquo;s firewall&lt;/strong&gt;. It&amp;rsquo;s common for network administrators to require that DNS lookups originating from nodes on the internal network be done using approved DNS servers. These can either be DNS servers under the administrator&amp;rsquo;s control, or specific public DNS servers selected by the admin.&lt;/p&gt;
&lt;p&gt;突然想到 DNS 缓存在 Chrome 上也有备份, 于是去查了一下是不是可以修改 DNS server 在 Chrome 上, (在电脑上没有管理员权限),&lt;/p&gt;
&lt;p&gt;真的有, 具体参考(privacy-security -&amp;gt; Advanced -&amp;gt; Use Secure DNS): &lt;a class=&#34;link&#34; href=&#34;https://www.minitool.com/news/how-to-change-dns-server-in-google-chrome.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to Change DNS Server in Google Chrome on Computer and Mobile? - MiniTool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后可以在Chrome上通过域名访问我的网站了, 终于不用输入 IP 了每次, nnd&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MPLS</title>
        <link>https://blog.yorforger.cc/p/mpls/</link>
        <pubDate>Fri, 17 Nov 2023 08:27:59 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/mpls/</guid>
        <description>&lt;h2 id=&#34;1-ospf-bgp-and-mpls&#34;&gt;
    &lt;a href=&#34;#1-ospf-bgp-and-mpls&#34;&gt;#&lt;/a&gt;
    1. OSPF, BGP and MPLS
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OSPF: OSPF is an interior gateway protocol (IGP) used for routing within an autonomous system (AS). It determines the best paths for routing packets based on metrics such as bandwidth, delay, and cost.&lt;/li&gt;
&lt;li&gt;﻿﻿BGP: BGP is an exterior gateway protocol (EGP) used for routing between autonomous systems. It enables the exchange of routing information between different networks and determines the best paths between ASes.&lt;/li&gt;
&lt;li&gt;﻿﻿MPLS: MPLS is not a routing protocol but a forwarding mechanism that operates at the network layer. It uses labels to encapsulate packets, creating virtual paths called Label Switched Paths (LSPs). MPLS allows for efficient forwarding and traffic engineering by quickly switching packets based on labels instead of performing complex IP routing.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Routers&lt;/strong&gt; refer to internal &lt;strong&gt;routing tables&lt;/strong&gt; to make decisions about how to route packets along network paths. A routing table records the paths that packets should take to reach every destination that the router is responsible for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-mpls&#34;&gt;
    &lt;a href=&#34;#2-mpls&#34;&gt;#&lt;/a&gt;
    2. MPLS
&lt;/h2&gt;&lt;h3 id=&#34;21-basic-concepts&#34;&gt;
    &lt;a href=&#34;#21-basic-concepts&#34;&gt;#&lt;/a&gt;
    2.1. Basic concepts
&lt;/h3&gt;&lt;p&gt;In a network that uses MPLS, each packet is assigned to a class called a forwarding equivalence class (FEC). The network paths that packets can take are called label-switched paths (LSP). A packet&amp;rsquo;s class (FEC) determines which path (LSP) the packet will be assigned to. Packets with the same FEC follow the same LSP.&lt;/p&gt;
&lt;p&gt;Each packet has one or more &lt;strong&gt;labels&lt;/strong&gt; attached, and all labels are contained in an &lt;strong&gt;MPLS header&lt;/strong&gt;, which is added on top of all the other headers attached to a packet. &lt;strong&gt;FECs&lt;/strong&gt; are listed within each packet&amp;rsquo;s labels. Routers do not examine the packet&amp;rsquo;s other headers; they can essentially ignore the IP header. Instead, they examine the packet&amp;rsquo;s label and direct the packet to the right &lt;strong&gt;LSP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because MPLS-supporting routers only need to see the MPLS labels attached to a given packet, MPLS can work with almost any protocol (hence the name &amp;ldquo;multiprotocol&amp;rdquo;). It does not matter how the rest of the packet is formatted, as long as the router can read the MPLS labels at the front of the packet.&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/008-mpls/aa.png&#34; alt=&#34;aa&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;Label value: the name says it all, this is where you will find the value of the label.&lt;/li&gt;
&lt;li&gt;EXP: these are the three experimental bits. These are used for QoS, normally the IP precedence value of the IP packet will be copied here.&lt;/li&gt;
&lt;li&gt;S: this is the “bottom of stack” bit. With MPLS it’s possible to add more than one label, you’ll see why in some of the MPLS VPN lessons. When this bit is set to one, it’s the last MPLS header. When it’s set to zero then there is one or more MPLS headers left.&lt;/li&gt;
&lt;li&gt;TTL: just like in the IP header, this is the time to live field. You can use this for traces in the MPLS network. Each hop decrements the TTL by one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-fecs&#34;&gt;
    &lt;a href=&#34;#22-fecs&#34;&gt;#&lt;/a&gt;
    2.2. FECs
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;FEC is a term used in MPLS networks to describe a set of incoming packets with similar characteristics, allowing those packets to be allocated the same label and forwarded down the same LSP (Label Switched Path). &lt;a class=&#34;link&#34; href=&#34;https://www.mpirical.com/glossary/fec-forwarding-equivalence-class.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FEC - Forwarding Equivalence Class&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In previous part we said: &lt;strong&gt;FECs&lt;/strong&gt; are listed within each packet&amp;rsquo;s labels. But, wait, how?&lt;/p&gt;
&lt;p&gt;An FEC is a set of packets that a single router:&lt;/p&gt;
&lt;p&gt;(1) Forwards to the same next hop;&lt;/p&gt;
&lt;p&gt;(2) Out the same interface; and&lt;/p&gt;
&lt;p&gt;(3) With the same treatment (such as queuing).&lt;/p&gt;
&lt;h3 id=&#34;23-step-by-step-a-packet-in-mpls-network&#34;&gt;
    &lt;a href=&#34;#23-step-by-step-a-packet-in-mpls-network&#34;&gt;#&lt;/a&gt;
    2.3. Step-by-Step a packet in MPLS network
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Packet Enters the MPLS Network:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Imagine a data packet entering an MPLS network at an &amp;lsquo;ingress router&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;The ingress router examines the header of the packet (like destination IP address).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Label Assignment:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Based on this examination, the router assigns a &amp;rsquo;label&amp;rsquo; to the packet. This label is a short, fixed-length identifier.&lt;/li&gt;
&lt;li&gt;The process of assigning a label is known as &amp;rsquo;label imposition&#39;.&lt;/li&gt;
&lt;li&gt;Each label corresponds to a pre-determined path through the network, known as a Label Switched Path (LSP).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packet Travels through the MPLS Network:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Once the packet has been labeled, it is sent into the MPLS network.&lt;/li&gt;
&lt;li&gt;As it reaches each router (or label switch router, LSR) in the MPLS network, the router does not need to examine the IP header. Instead, it looks at the label.&lt;/li&gt;
&lt;li&gt;Based on the label, the LSR quickly determines where to send the packet next. This is a process called &amp;rsquo;label switching&#39;.&lt;/li&gt;
&lt;li&gt;The LSR may also swap the packet&amp;rsquo;s existing label with a new label before forwarding it (label swapping). This is done to maintain the correct routing path as defined by the LSP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Approaching the Exit of the MPLS Network:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;As the packet approaches the end of its path through the MPLS network, it reaches an &amp;rsquo;egress router&#39;.&lt;/li&gt;
&lt;li&gt;The egress router removes the MPLS label from the packet, a process known as &amp;rsquo;label popping&#39;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packet Leaves the MPLS Network:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;After the label is removed, the packet is forwarded based on its original IP header.&lt;/li&gt;
&lt;li&gt;It is now back in a standard IP-based network and can be routed to its final destination using traditional IP routing methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-ospf-bgp-and-mpls&#34;&gt;
    &lt;a href=&#34;#3-ospf-bgp-and-mpls&#34;&gt;#&lt;/a&gt;
    3. OSPF, BGP and MPLS
&lt;/h2&gt;&lt;p&gt;So each packet has a LSP theoretically? which means each packet belongs to a FEC, and each FEC has a LSP, the LSP built by using the routing table formed by OSPF and BGP&lt;/p&gt;
&lt;p&gt;Yes, your understanding is on the right track. In MPLS (Multiprotocol Label Switching) networks, the concept of Forwarding Equivalence Classes (FECs) and Label Switched Paths (LSPs) is fundamental. Let&amp;rsquo;s break down these concepts:&lt;/p&gt;
&lt;h3 id=&#34;31-forwarding-equivalence-class-fec&#34;&gt;
    &lt;a href=&#34;#31-forwarding-equivalence-class-fec&#34;&gt;#&lt;/a&gt;
    3.1. Forwarding Equivalence Class (FEC)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A FEC is essentially a group of IP packets that are forwarded in the same manner (same path, same treatment).&lt;/li&gt;
&lt;li&gt;Each packet that enters an MPLS network is assigned to a FEC.&lt;/li&gt;
&lt;li&gt;The assignment is based on criteria like destination IP address, IP protocol type, source IP address, and even Layer 4 ports.&lt;/li&gt;
&lt;li&gt;The idea is that all packets within a FEC will follow the same LSP and receive similar forwarding treatment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Label Switched Path (LSP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An LSP is a pre-established path that packets in a particular FEC will follow through the MPLS network.&lt;/li&gt;
&lt;li&gt;LSPs are set up by the MPLS control plane, which can use signaling protocols like RSVP-TE or LDP.&lt;/li&gt;
&lt;li&gt;Once an LSP is established, labels are assigned and used to forward the packets along this path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-interaction-with-ospf-and-bgp&#34;&gt;
    &lt;a href=&#34;#32-interaction-with-ospf-and-bgp&#34;&gt;#&lt;/a&gt;
    3.2. Interaction with OSPF and BGP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OSPF and BGP are used to form the routing table, which provides the necessary information about network topology and available paths.&lt;/li&gt;
&lt;li&gt;OSPF is typically used within an autonomous system (internal routing), while BGP is used between autonomous systems (external routing).&lt;/li&gt;
&lt;li&gt;The information from OSPF and BGP helps in determining the best paths for the LSPs.&lt;/li&gt;
&lt;li&gt;Once the best paths are identified, MPLS signaling protocols set up LSPs along these paths, and labels are distributed to the routers (LSRs) on these paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-practical-example&#34;&gt;
    &lt;a href=&#34;#33-practical-example&#34;&gt;#&lt;/a&gt;
    3.3. Practical Example
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Imagine a packet entering an MPLS network destined for a specific IP address.&lt;/li&gt;
&lt;li&gt;This packet is assigned to a FEC based on its destination IP.&lt;/li&gt;
&lt;li&gt;An LSP for this FEC has already been established using OSPF or BGP routing information.&lt;/li&gt;
&lt;li&gt;The ingress router assigns an MPLS label to the packet based on its FEC.&lt;/li&gt;
&lt;li&gt;The packet is then forwarded through the MPLS network, with each router making forwarding decisions based solely on the MPLS label.&lt;/li&gt;
&lt;li&gt;When the packet reaches the egress router of the MPLS network, the MPLS label is removed, and the packet is forwarded based on its original IP header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this way, each packet is associated with a FEC, and each FEC has its LSP. The LSPs are constructed using the routing tables formed by OSPF and BGP, ensuring that packets are forwarded efficiently and along optimal paths within the MPLS network.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-mpls/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is MPLS (multiprotocol label switching)? | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://networklessons.com/mpls/mpls-labels-and-devices&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MPLS Labels and Devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.networkworld.com/article/2350449/understanding-the-role-of-fecs-in-mpls.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Understanding the Role of FECs in MPLS | Network World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>DNS Spoofing - GFW</title>
        <link>https://blog.yorforger.cc/p/dns-spoofing-gfw/</link>
        <pubDate>Tue, 31 Oct 2023 15:29:25 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dns-spoofing-gfw/</guid>
        <description>&lt;p&gt;声明: 本文只用于学习目的, 请勿用于非法用途.&lt;/p&gt;
&lt;h2 id=&#34;1-dns-spoofing&#34;&gt;
    &lt;a href=&#34;#1-dns-spoofing&#34;&gt;#&lt;/a&gt;
    1. DNS spoofing
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/what-is-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS&lt;/a&gt; cache poisoning is the act of entering false information into a DNS cache, so that DNS queries return an incorrect response and users are directed to the wrong websites. DNS cache poisoning is also known as &amp;lsquo;DNS spoofing&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;11-dns-caching&#34;&gt;
    &lt;a href=&#34;#11-dns-caching&#34;&gt;#&lt;/a&gt;
    1.1. DNS Caching
&lt;/h3&gt;&lt;p&gt;Learn more about DNS caching: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/002-dns-basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Concepts (NameServer(NS), DNS Records and Caching) - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-how-do-attackers-poison-dns-caches&#34;&gt;
    &lt;a href=&#34;#12-how-do-attackers-poison-dns-caches&#34;&gt;#&lt;/a&gt;
    1.2. How do attackers poison DNS caches?
&lt;/h3&gt;&lt;p&gt;Attackers can poison DNS caches by impersonating &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-server-types/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS nameservers&lt;/a&gt;, making a request to a DNS resolver, and then forging the reply when the DNS resolver queries a nameserver. This is possible because DNS servers use &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UDP&lt;/a&gt; instead of &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/tcp-ip/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP&lt;/a&gt;, and because currently there is no verification for DNS information.&lt;/p&gt;
&lt;p&gt;DNS Cache Poisoning Process:&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/005-gfw-dns/c.png&#34; alt=&#34;c&#34; style=&#34;zoom: 33%;&#34; /&gt;
&lt;p&gt;Poisoned DNS Cache:&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/005-gfw-dns/d.png&#34; alt=&#34;d&#34; style=&#34;zoom: 33%;&#34; /&gt;
&lt;p&gt;If a DNS resolver receives a forged response, it accepts and caches the data uncritically because there is no way to verify if the information is accurate and comes from a legitimate source.&lt;/p&gt;
&lt;p&gt;Despite these major points of vulnerability in the DNS caching process, DNS poisoning attacks are not easy. Because the DNS resolver does actually query the authoritative nameserver, attackers have only a few milliseconds to send the fake reply before the real reply from the authoritative nameserver arrives.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way to prevent this is to set the /etc/host file directly, because checking host file happens before DNS resolution.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/002-host-file-dns-stub-resolver/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Stub and Recursive Resolver - Config Files - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-cache-poisoning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is DNS cache poisoning? | DNS spoofing | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-gfw&#34;&gt;
    &lt;a href=&#34;#2-gfw&#34;&gt;#&lt;/a&gt;
    2. GFW
&lt;/h2&gt;&lt;h3 id=&#34;21-http-劫持&#34;&gt;
    &lt;a href=&#34;#21-http-%e5%8a%ab%e6%8c%81&#34;&gt;#&lt;/a&gt;
    2.1. HTTP 劫持
&lt;/h3&gt;&lt;p&gt;原文: &lt;a class=&#34;link&#34; href=&#34;https://doubibackup.com/6t3mypbm-5.html#comments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;浅谈HTTP劫持、DNS污染的影响及解决办法（仅个人理解） | 逗比根据地&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP劫持很容易理解，因为HTTP传输协议是明文的，并且我的网站服务器是在海外，要访问我的网站就要通过中国的国际宽带出口，出去与我的网站建立连接。我的网站也是因为关键词的原因在经过出口的时候，被“&lt;strong&gt;检查站：墙&lt;/strong&gt;”扫描到了违规关键词，于是掐断了TCP链接。所以当时用户访问网站会遇到：&lt;strong&gt;链接已重置、该网站已永久移动到其他地址等等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP劫持很容易解决，那就是&lt;strong&gt;加上SSL证书，网站链接全部内容加密&lt;/strong&gt;，这样“检查站：墙”就无法解密数据分析关键词了。但是这不是绝对能解决这个问题的，如果你的网站只是误杀或者违规擦边球，那还好，如果是大型网站，就会特殊对待了。&lt;/p&gt;
&lt;p&gt;HTTPS在建立加密连接的时候，需要一次握手，也就是达成链接协议建立加密连接，但是这次握手是明文的（建立加密链接首先就是链接双方信任，比如网站的SSL证书是自己签的，或者SSL证书到期或伪造的，在访问这个网站的时候浏览器就会进行提示，表示此网站不安全啥的。）握手是明文的就意味着，如果你的域名被重点关注，即使你加上了SSL证书，也会在首次握手的时候，被关键词匹配然后掐断链接。 learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/http/006-https-ssl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS SSL TLS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-dns污染投毒&#34;&gt;
    &lt;a href=&#34;#22-dns%e6%b1%a1%e6%9f%93%e6%8a%95%e6%af%92&#34;&gt;#&lt;/a&gt;
    2.2. DNS污染投毒
&lt;/h3&gt;&lt;p&gt;我们假设A为用户端也就是你的电脑设备，B为DNS服务器，C为A到B链路中一个节点的网络设备（路由器、交换机、网关等）。&lt;/p&gt;
&lt;p&gt;然后我们模拟一次被污染的DNS请求过程。&lt;/p&gt;
&lt;p&gt;A访问一个网站，比如 &lt;code&gt;google.com&lt;/code&gt; ，然后，A向B通过UDP方式发送查询请求，比如查询内容 &lt;code&gt;A google.com&lt;/code&gt; ，这个数据库在前往B的时候要经过数个节点网络设备比如C，然后继续前往DNS服务器B。&lt;/p&gt;
&lt;p&gt;然而在这个传输过程中，C针对这个数据包进行特征分析，（DNS端口为53，进行特定端口监视扫描，对UDP明文传输的DNS查询请求进行特征和关键词匹配分析，比如“google.com”是关键词，也或者是“A记录”），从而立刻返回一个错误的解析结果（比如返回了 &lt;code&gt;A 233.233.233.233&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;众所周知，作为链路上的一个节点，网络设备 C 必定比真正的 DNS 服务器 B 更快的返回结果到 用户电脑A，而目前的DNS解析机制策略有一个重要的原则，就是只认第一。因此 节点网络设备C所返回的查询结果就被 用户电脑A当作了最终结果，于是用户电脑A因为获得了错误的IP，导致无法正常访问 &lt;code&gt;google.com &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;验证污染 我的 doub.ssrshare.usm 主域名虽然在大部分地区解除了DNS污染，但是我的两个SS站域名并没有，所以我尝试对我的SS 子域名进行nslookup测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:&lt;span class=&#34;se&#34;&gt;\U&lt;/span&gt;sers&lt;span class=&#34;se&#34;&gt;\A&lt;/span&gt;dministrator&amp;gt;nslookup ss.dou-bi.com 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;服务器: google-public-dns-a.google.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address: 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;非权威应答:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;名称: ss.dou-bi.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Addresses: 200:2:9f6a:794b::
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;8.7.198.45
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我使用的是谷歌的 8.8.8.8 DNS，但是我得到的A记录 IP却是8.7.198.45，这个明显不是我的IP，看一下其他被DNS污染的域名就会发现都会有这个IP。很明显，我的 ss.dou-bi.com 域名受到了DNS污染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用加密代理&lt;/strong&gt;，比如Shadowsocks，在加密代理里进行远程DNS解析，或者使用VPN上网。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改hosts文件&lt;/strong&gt;，操作系统中Hosts文件的权限优先级高于DNS服务器，操作系统在访问某个域名时，会先检测HOSTS文件，然后再查询DNS服务器。可以在hosts添加受到污染的DNS地址来解决DNS污染和DNS劫持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过一些软件编程处理&lt;/strong&gt;，可以直接忽略返回结果是虚假IP地址的数据包，直接解决DNS污染的问题。如果你是Firefox用户，并且只用Firefox，又懒得折腾，直接打开Firefox的远程DNS解析就行了。在地址栏中输入：&lt;code&gt;about:config&lt;/code&gt;找到 &lt;code&gt;network.proxy.socks_remote_dns&lt;/code&gt; 一项改成true。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用DNSCrypt软件&lt;/strong&gt;，此软件与使用的OpenDNS直接建立相对安全的TCP连接并加密请求数据，从而不会被污染。 对于被DNS污染的网站站长来说，最有效的方法就是 换域名或者IP 了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-ip黑名单&#34;&gt;
    &lt;a href=&#34;#23-ip%e9%bb%91%e5%90%8d%e5%8d%95&#34;&gt;#&lt;/a&gt;
    2.3. ip黑名单
&lt;/h3&gt;&lt;p&gt;即使没有DNS污染 或者 你获得了正确的IP，你就能正常访问这些被屏蔽的网站了吗？&lt;/p&gt;
&lt;p&gt;不，墙目前已经有了IP黑名单，针对谷歌这种网站已经不再是普通的DNS污染了，因为总会有办法访问被DNS污染的网站（比如指定Hosts）。&lt;/p&gt;
&lt;p&gt;那么就直接把所有的谷歌IP拉黑不就好了？就算你获得了正确的谷歌IP，但是当你去访问这个IP的时候，墙会发现这个IP存在于黑名单中，于是直接阻断，于是浏览器就会提示：www.google.com 的响应时间过长等等&lt;/p&gt;
&lt;h2 id=&#34;3-常见代理方式&#34;&gt;
    &lt;a href=&#34;#3-%e5%b8%b8%e8%a7%81%e4%bb%a3%e7%90%86%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;
    3. 常见代理方式
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;VPN
&lt;ul&gt;
&lt;li&gt;常见协议: IPSec, OpenVPN, L2TP, WireGuard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shadowsocks (代理服务器)
&lt;ul&gt;
&lt;li&gt;常见协议: SOCKS5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V2Ray (代理服务器)
&lt;ul&gt;
&lt;li&gt;常见协议: VMess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 代理 (代理服务器)
&lt;ul&gt;
&lt;li&gt;已被封锁, 原因是HTTP代理并不对数据进行加密, 即使流量能够绕过初步的审查，传输的内容仍然是透明的，容易被监控。&lt;/li&gt;
&lt;li&gt;即使使用 HTTPS 也不会实现全局加密, 在建立 TLS 握手验证时还是需要一个HTTP明文连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解更多: &lt;a class=&#34;link&#34; href=&#34;https://superxlcr.github.io/2018/07/01/%E4%B8%8A%E7%BD%91%E9%99%90%E5%88%B6%E5%92%8C%E7%BF%BB%E5%A2%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;上网限制和翻墙基本原理 | superxlcr&amp;rsquo;s notebook&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tools Commonly Used in Networking</title>
        <link>https://blog.yorforger.cc/p/tools-commonly-used-in-networking/</link>
        <pubDate>Tue, 31 Oct 2023 15:23:08 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/tools-commonly-used-in-networking/</guid>
        <description>&lt;h2 id=&#34;1-nslookup&#34;&gt;
    &lt;a href=&#34;#1-nslookup&#34;&gt;#&lt;/a&gt;
    1. &lt;code&gt;nslookup&lt;/code&gt;
&lt;/h2&gt;&lt;h3 id=&#34;11-query-a-record&#34;&gt;
    &lt;a href=&#34;#11-query-a-record&#34;&gt;#&lt;/a&gt;
    1.1. Query &lt;code&gt;A Record&lt;/code&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# basic DNS lookup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ nslookup google.com                             
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:		192.168.2.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:	192.168.2.1#53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-authoritative answer:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name:	google.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address: 142.250.81.238
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;12-reverse-dns-look-up&#34;&gt;
    &lt;a href=&#34;#12-reverse-dns-look-up&#34;&gt;#&lt;/a&gt;
    1.2. Reverse DNS look-up
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ nslookup 18.219.46.189                          
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:		192.168.2.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:	192.168.2.1#53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-authoritative answer:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;189.46.219.18.in-addr.arpa	&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ec2-18-219-46-189.us-east-2.compute.amazonaws.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Authoritative answers can be found from:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;46.219.18.in-addr.arpa	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns1-24-us-east-2.ec2-rdns.amazonaws.com.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;13-query-name-server&#34;&gt;
    &lt;a href=&#34;#13-query-name-server&#34;&gt;#&lt;/a&gt;
    1.3. Query name server
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ nslookup -type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ns google.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:		192.168.2.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:	192.168.2.1#53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-authoritative answer:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;google.com	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns1.google.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;google.com	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns3.google.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;When using the nslookup utility to query Domain Name System (DNS) servers, you could see the message “Non-authoritative answer.” This tells you that the DNS server you’re asking can’t ensure that it has the official, up-to-date information for the domain name or IP address you’re seeking up and is instead giving you a cached response that it got from another DNS server.&lt;/p&gt;
&lt;p&gt;Please note that getting non-authoritative answers doesn&amp;rsquo;t mean incorrect or unreliable. However, if you need the &lt;strong&gt;most accurate and up-to-date information&lt;/strong&gt;, it is recommended to use authoritative DNS servers for queries.&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nslookup Command in Linux with Examples - GeeksforGeeks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ioflood.com/blog/what-is-the-meaning-of-non-authoritative-answer-given-by-nslookup-dns-demystified/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why is “Non-authoritative answer” given by nslookup? DNS Explained&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;14-get-authoritative-answer&#34;&gt;
    &lt;a href=&#34;#14-get-authoritative-answer&#34;&gt;#&lt;/a&gt;
    1.4. Get authoritative answer
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Use the &lt;code&gt;nslookup&lt;/code&gt; command to query the SOA (Start of Authority) record of the domain name. The SOA record contains information about the authoritative name servers for the domain.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ nslookup -type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;soa davidzhu.xyz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-authoritative answer:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Authoritative answers can be found from:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;davidzhu.xyz	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns1.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;davidzhu.xyz	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns2.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;davidzhu.xyz	&lt;span class=&#34;nv&#34;&gt;nameserver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ns3.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Identify the primary name server from previous response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ nslookup davidzhu.xyz ns1.dnsowl.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:		ns1.dnsowl.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address:	162.159.27.173#53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name:	davidzhu.xyz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address: 185.199.108.153
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2-dig&#34;&gt;
    &lt;a href=&#34;#2-dig&#34;&gt;#&lt;/a&gt;
    2. &lt;code&gt;dig&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;dig&lt;/strong&gt; command stands for &lt;em&gt;&lt;strong&gt;Domain Information Groper&lt;/strong&gt;&lt;/em&gt;. It is used for retrieving information about DNS name servers. Dig command replaces older tools such as &lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nslooku&lt;/a&gt;p and the &lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/host-command-in-linux-with-examples/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;host&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;21-query-a-record&#34;&gt;
    &lt;a href=&#34;#21-query-a-record&#34;&gt;#&lt;/a&gt;
    2.1. Query &lt;code&gt;A Record&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;To query domain “A” record with &lt;code&gt;+short&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ dig geeksforgeeks.org +short
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;34.218.62.116
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Specify DNS server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ dig geeksforgeeks.org +short @8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;By default, dig command will query the name servers listed in “/etc/resolv.conf” to perform a DNS lookup. We can change it by using @ symbol followed by a hostname or IP address of the name server.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;code&gt;/etc/resolv.conf&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt;: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/002-host-file-dns-stub-resolver/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Stub and Recursive Resolver - Config Files - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;22-reverse-dns-lookup&#34;&gt;
    &lt;a href=&#34;#22-reverse-dns-lookup&#34;&gt;#&lt;/a&gt;
    2.2. Reverse DNS lookup
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ dig -x 18.219.46.189 +short
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ec2-18-219-46-189.us-east-2.compute.amazonaws.com.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;23-query-name-server&#34;&gt;
    &lt;a href=&#34;#23-query-name-server&#34;&gt;#&lt;/a&gt;
    2.3. Query name server
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ dig davidzhu.xyz NS +short
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ns1.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ns2.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ns3.dnsowl.com.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3-dig-vs-nslookup&#34;&gt;
    &lt;a href=&#34;#3-dig-vs-nslookup&#34;&gt;#&lt;/a&gt;
    3. dig vs nslookup
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dig&lt;/code&gt; Process:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig&lt;/code&gt; follows the standard DNS resolution process, starting with a query to the &lt;strong&gt;root name servers&lt;/strong&gt; to obtain the list of TLD name servers.&lt;/li&gt;
&lt;li&gt;It then queries a TLD name server to obtain the authoritative name servers for the domain.&lt;/li&gt;
&lt;li&gt;After obtaining the &lt;strong&gt;authoritative name servers&lt;/strong&gt;, &lt;code&gt;dig&lt;/code&gt; sends a direct query to one of these name servers to retrieve the A record for the domain.&lt;/li&gt;
&lt;li&gt;The response obtained from &lt;code&gt;dig&lt;/code&gt; is typically authoritative, as it comes directly from the authoritative name server responsible for the domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nslookup&lt;/code&gt; Process:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nslookup&lt;/code&gt; queries the DNS server configured on the local system by default. This DNS server may be provided by the ISP or manually configured.&lt;/li&gt;
&lt;li&gt;The response from &lt;code&gt;nslookup&lt;/code&gt; may be non-authoritative, indicating that the DNS server providing the response is not the authoritative server for the queried domain. It may have obtained the response from its cache or forwarded the query to another DNS server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, &lt;code&gt;dig&lt;/code&gt; directly queries authoritative name servers to obtain DNS information, resulting in authoritative responses. On the other hand, &lt;code&gt;nslookup&lt;/code&gt; queries the local DNS server, which may or may not provide authoritative responses, depending on its configuration and the nature of the query.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DNS Concepts (NameServer(NS), DNS Records and Caching)</title>
        <link>https://blog.yorforger.cc/p/dns-concepts-nameserverns-dns-records-and-caching/</link>
        <pubDate>Tue, 31 Oct 2023 09:50:20 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dns-concepts-nameserverns-dns-records-and-caching/</guid>
        <description>&lt;h2 id=&#34;1-dns&#34;&gt;
    &lt;a href=&#34;#1-dns&#34;&gt;#&lt;/a&gt;
    1. DNS
&lt;/h2&gt;&lt;p&gt;DNS stands for Domain Name System, and it is a distributed hierarchical system that translates human-readable domain names into IP addresses. The process of &lt;strong&gt;DNS resolution&lt;/strong&gt; involves converting a hostname (such as &lt;a class=&#34;link&#34; href=&#34;https://www.example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.example.com&lt;/a&gt;) into a computer-friendly IP address (such as 192.168.1.1).&lt;/p&gt;
&lt;p&gt;The main components of the DNS are DNS servers. All DNS servers fall into one of four categories: Recursive resolvers, root nameservers, TLD nameservers, and authoritative nameservers.&lt;/p&gt;
&lt;h3 id=&#34;11-dns-stub-resolver&#34;&gt;
    &lt;a href=&#34;#11-dns-stub-resolver&#34;&gt;#&lt;/a&gt;
    1.1. DNS stub resolver
&lt;/h3&gt;&lt;p&gt;Before introduce the DNS servers, there is a software runs on the client whcih called DNS stub resolver should be noted.&lt;/p&gt;
&lt;p&gt;DNS stub resolver runs on the client machine, which is used to initiate DNS queries, and it sends the DNS query to the recursive resolver, which then performs the actual DNS resolution process (usually provided by your internet service provider (ISP) or a public DNS resolver like Google&amp;rsquo;s 8.8.8.8 or Cloudflare&amp;rsquo;s 1.1.1.1).&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/network/002-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Stub and Recursive Resolver - Config Files - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-recursive-resolver&#34;&gt;
    &lt;a href=&#34;#12-recursive-resolver&#34;&gt;#&lt;/a&gt;
    1.2. Recursive resolver
&lt;/h3&gt;&lt;p&gt;As we mentioned above, recursive resolver performs the actual &lt;strong&gt;DNS resolution&lt;/strong&gt; process, and it&amp;rsquo;s a DNS server actually, usually provided by your internet service provider (ISP) or a public DNS resolver like Google&amp;rsquo;s &lt;code&gt;8.8.8.8&lt;/code&gt; or Cloudflare&amp;rsquo;s &lt;code&gt;1.1.1.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A recursive resolver (also known as a DNS recursor) is the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver. When a recursive resolver receives a query from a stub resolver, a recursive resolver will either respond with cached data, or send a request to a &lt;em&gt;root nameserver&lt;/em&gt;, followed by another request to a &lt;em&gt;TLD nameserver&lt;/em&gt;, and then one last request to an &lt;em&gt;authoritative nameserver&lt;/em&gt;. After receiving a response from the authoritative nameserver containing the requested IP address, the recursive resolver then sends a response to the client.&lt;/p&gt;
&lt;p&gt;During this process, &lt;strong&gt;the recursive resolver will cache information received from authoritative nameservers&lt;/strong&gt;. When a client requests the IP address of a domain name that was recently requested by another client, the resolver can circumvent the process of communicating with the nameservers, and just deliver the client the requested record from its cache.&lt;/p&gt;
&lt;h3 id=&#34;13-root-nameserver--tld-nameserver&#34;&gt;
    &lt;a href=&#34;#13-root-nameserver--tld-nameserver&#34;&gt;#&lt;/a&gt;
    1.3. Root nameserver &amp;amp; TLD nameserver
&lt;/h3&gt;&lt;p&gt;The 13 DNS root nameservers are known to every recursive resolver, and they are the first stop in a recursive resolver’s quest for DNS records. A root server accepts a recursive resolver’s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.).&lt;/p&gt;
&lt;p&gt;A TLD nameserver maintains information for all the domain names that share a common domain extension, such as .com, .net, or whatever comes after the last dot in a URL. For example, a .com TLD nameserver contains information for every website that ends in ‘.com’. If a user was searching for google.com, after receiving a response from a root nameserver, the recursive resolver would then send a query to a .com TLD nameserver, which would respond by pointing to the authoritative nameserver (see below) for that domain.&lt;/p&gt;
&lt;h3 id=&#34;14-authoritative-nameserver&#34;&gt;
    &lt;a href=&#34;#14-authoritative-nameserver&#34;&gt;#&lt;/a&gt;
    1.4. Authoritative nameserver
&lt;/h3&gt;&lt;p&gt;When a recursive resolver &lt;strong&gt;receives a response from&lt;/strong&gt; a TLD nameserver, that response will direct the resolver to an authoritative nameserver.&lt;/p&gt;
&lt;p&gt;The authoritative nameserver contains information specific to the domain name it serves (e.g. google.com) and it can provide a recursive resolver with the IP address of that server found in the &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-records/dns-a-record/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS A record&lt;/a&gt;, or if the domain has a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-records/dns-cname-record/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CNAME record&lt;/a&gt; (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS A record is actually a map between the domain name and its ipv4 address.&lt;/p&gt;
&lt;p&gt;DNS CNAME record is an alias for that domain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After buy a domain on a website, the most common operations we use are that &lt;strong&gt;change its nameservers&lt;/strong&gt; and &lt;strong&gt;update its DNS records&lt;/strong&gt;:&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/002-dns-basics/a.png&#34; alt=&#34;a&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;p&gt;Here, Change the NameServers option if to change the &lt;strong&gt;authoritative nameserver&lt;/strong&gt; of your domain, and update the DNS records is to set ip address (A record) or alias (CNAME record) for your domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/002-dns-basics/b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;b&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-dns-queries&#34;&gt;
    &lt;a href=&#34;#2-dns-queries&#34;&gt;#&lt;/a&gt;
    2. DNS queries
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Recursive query&lt;/strong&gt; - In a recursive query, a DNS client requires that a DNS server (typically a DNS recursive resolver) will respond to the client with either the requested resource record or an error message if the resolver can&amp;rsquo;t find the record.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterative query&lt;/strong&gt; - in this situation the DNS client will allow a DNS server to return the best answer it can.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-recursive query&lt;/strong&gt;: learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/what-is-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is DNS? | How DNS works | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-dns-caching&#34;&gt;
    &lt;a href=&#34;#3-dns-caching&#34;&gt;#&lt;/a&gt;
    3. DNS caching
&lt;/h2&gt;&lt;h3 id=&#34;31-browser-dns-caching&#34;&gt;
    &lt;a href=&#34;#31-browser-dns-caching&#34;&gt;#&lt;/a&gt;
    3.1. Browser DNS caching
&lt;/h3&gt;&lt;p&gt;Modern web browsers are designed by default to cache DNS records for a set amount of time. The purpose here is obvious; the closer the DNS caching occurs to the web browser, the fewer processing steps must be taken in order to check the cache and make the correct requests to an IP address. When a request is made for a DNS record, the browser cache is the first location checked for the requested record.&lt;/p&gt;
&lt;p&gt;In Chrome, you can see the status of your DNS cache by going to &lt;code&gt;chrome://net-internals/#dns&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/002-dns-basics/c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;c&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;32-operating-system-os-level-dns-caching&#34;&gt;
    &lt;a href=&#34;#32-operating-system-os-level-dns-caching&#34;&gt;#&lt;/a&gt;
    3.2. Operating system (OS) level DNS caching
&lt;/h4&gt;&lt;p&gt;The operating system level DNS resolver is the second and last local stop before a DNS query leaves your machine. The process inside your operating system that is designed to handle this query is commonly called a “&lt;strong&gt;stub resolver&lt;/strong&gt;” or &lt;strong&gt;DNS client&lt;/strong&gt;. When a stub resolver gets a request from an application, it first checks its own cache to see if it has the record. If it does not, it then sends a DNS query (with a recursive flag set), outside the local network to a DNS recursive resolver inside the Internet service provider (ISP).&lt;/p&gt;
&lt;p&gt;When the recursive resolver inside the ISP receives a DNS query, like all previous steps, it will also check to see if the requested host-to-IP-address translation is already stored inside its local persistence layer.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/what-is-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is DNS? | How DNS works | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that checking &lt;code&gt;/etc/hosts&lt;/code&gt; happens before DNS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;33-recursive-resolver-caching&#34;&gt;
    &lt;a href=&#34;#33-recursive-resolver-caching&#34;&gt;#&lt;/a&gt;
    3.3. Recursive resolver caching
&lt;/h3&gt;&lt;p&gt;We have mentioned above, during DNS resolution process, &lt;strong&gt;the recursive resolver will cache information received from authoritative nameservers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A DNS resolver will save responses to IP address queries for a certain amount of time. In this way, the resolver can respond to future queries much more quickly, without needing to communicate with the many servers involved in the typical DNS resolution process.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DHCP Basics</title>
        <link>https://blog.yorforger.cc/p/dhcp-basics/</link>
        <pubDate>Mon, 30 Oct 2023 23:43:06 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dhcp-basics/</guid>
        <description>&lt;h2 id=&#34;1-concepts&#34;&gt;
    &lt;a href=&#34;#1-concepts&#34;&gt;#&lt;/a&gt;
    1. Concepts
&lt;/h2&gt;&lt;p&gt;Every device on a TCP/IP-based network must have a unique unicast IP address to access the network and its resources. Without DHCP, IP addresses for new computers or computers that are moved from one subnet to another must be configured manually; IP addresses for computers that are removed from the network must be manually reclaimed.&lt;/p&gt;
&lt;p&gt;With DHCP, this entire process is automated and managed centrally. The DHCP server maintains a pool of IP addresses and leases an address to any DHCP-enabled client when it starts up on the network. Because the IP addresses are dynamic (leased) rather than static (permanently assigned), addresses no longer in use are automatically returned to the pool for reallocation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Dynamic Host Configuration Protocol (DHCP) is a network management protocol used on Internet Protocol (IP) networks for &lt;strong&gt;automatically assigning IP addresses and other communication parameters to devices&lt;/strong&gt; connected to the network using a client–server architecture.  &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dynamic Host Configuration Protocol&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-process-of-dhcp&#34;&gt;
    &lt;a href=&#34;#2-process-of-dhcp&#34;&gt;#&lt;/a&gt;
    2. Process of DHCP
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DHCP Discover: When a computer (client) joins a network, it sends out a DHCP Discover message as a broadcast to discover DHCP servers available on the network.&lt;/li&gt;
&lt;li&gt;DHCP Offer: DHCP servers that receive the Discover message respond with a DHCP Offer message. This message contains configuration parameters, including IP address, subnet mask, default gateway, and &lt;strong&gt;DNS server addresses&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;DHCP Request: The computer selects one of the DHCP Offers and sends a DHCP Request message to the chosen DHCP server, indicating its acceptance of the offered configuration.&lt;/li&gt;
&lt;li&gt;DHCP Acknowledge: Upon receiving the DHCP Request, the DHCP server sends a DHCP Acknowledge message to the computer, confirming the lease of the offered configuration parameters. The computer now configures its network interface with the provided settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-dhcp-discover-message--dhcp-offer-message&#34;&gt;
    &lt;a href=&#34;#3-dhcp-discover-message--dhcp-offer-message&#34;&gt;#&lt;/a&gt;
    3. DHCP discover message &amp;amp; DHCP offer message
&lt;/h2&gt;&lt;p&gt;Learn more about these two messages&amp;rsquo; format: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dynamic Host Configuration Protocol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References: &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows-server/networking/technologies/dhcp/dhcp-top&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dynamic Host Configuration Protocol (DHCP) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Common Network Attacks</title>
        <link>https://blog.yorforger.cc/p/common-network-attacks/</link>
        <pubDate>Mon, 30 Oct 2023 22:44:57 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/common-network-attacks/</guid>
        <description>&lt;h2 id=&#34;1-man-in-the-middle-attack&#34;&gt;
    &lt;a href=&#34;#1-man-in-the-middle-attack&#34;&gt;#&lt;/a&gt;
    1. Man-in-the-middle attack
&lt;/h2&gt;&lt;p&gt;Learn more:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/002-ssh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://davidzhu.xyz/post/cs-basics/002-ssh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/003-ssl-secure-communication/#4-details-in-tls-handshake---avoid-man-in-middle-attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS SSL TLS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-ddos-attack&#34;&gt;
    &lt;a href=&#34;#2-ddos-attack&#34;&gt;#&lt;/a&gt;
    2. DDoS attack
&lt;/h2&gt;&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/004-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDoS Attack - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-csrf-attack&#34;&gt;
    &lt;a href=&#34;#3-csrf-attack&#34;&gt;#&lt;/a&gt;
    3. CSRF attack
&lt;/h2&gt;&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/http/007-csrf-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CSRF Attack and CORS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-ssl-stripping&#34;&gt;
    &lt;a href=&#34;#4-ssl-stripping&#34;&gt;#&lt;/a&gt;
    4. SSL stripping
&lt;/h2&gt;&lt;p&gt;SSL stripping attacks, also known as SSL strip, SSL downgrade, or HTTP downgrade attacks, strip the encryption offered by HTTPS, reducing the connection to the less-secure HTTP.&lt;/p&gt;
&lt;p&gt;In order to &lt;a class=&#34;link&#34; href=&#34;https://avicoder.me/2016/02/22/SSLstrip-for-newbies/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“strip” the SSL&lt;/a&gt;, an attacker intervenes in the redirection of the HTTP to the secure HTTPS protocol and intercepts a request from the user to the server. The attacker will then continue to establish an HTTPS connection between himself and the server, and an unsecured HTTP connection with the user, acting as a “bridge” between them.&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/004-common-attacks/a.png&#34; alt=&#34;a&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;How can the SSL strip trick both the browser and the website’s server? The SSL strip takes advantage of the way most users come to SSL websites. The majority of visitors connect to a website’s page that redirects through a 302 redirect, or they arrive on an SSL page via a link from a non-SSL site. If the victim wants, for instance, to buy a product and types the URL &lt;a class=&#34;link&#34; href=&#34;https://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.buyme.com&lt;/a&gt; in the address bar, the browser connects to the attacker&amp;rsquo;s machine and waits for a response from the server. In an SSL strip, the attacker, in turn, forwards the victim’s request to the online shop’s server and receives the secure HTTPS payment page. For example &lt;a class=&#34;link&#34; href=&#34;https://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.buyme.com&lt;/a&gt;. At this point, the attacker has complete control over the secure payment page. He downgrades it from HTTPS to HTTP and sends it back to the victim’s browser. The browser is now redirected to &lt;a class=&#34;link&#34; href=&#34;http://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.buyme.com&lt;/a&gt;. From now onward, all the victim’s data will be transferred in plain text format, and the attacker will be able to intercept it. Meanwhile, the website’s server will think that it has successfully established the secure connection, which indeed it has—but with the attacker’s machine, not the victim’s.&lt;/p&gt;
&lt;h3 id=&#34;41-enable-ssl-sitewide-at-all-websites&#34;&gt;
    &lt;a href=&#34;#41-enable-ssl-sitewide-at-all-websites&#34;&gt;#&lt;/a&gt;
    4.1. Enable SSL sitewide at all websites
&lt;/h3&gt;&lt;p&gt;To mitigate this threat, financial institutions and technology firms have &lt;a class=&#34;link&#34; href=&#34;https://venafi.com/blog/https-should-be-implemented-everywhereincluding-static-websites/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;already enabled&lt;/a&gt; HTTPS on a site-wide basis. Enabling HTTPS encrypts the connection between a browser and the website, thereby securing sensitive data transmissions. Therefore it makes perfect sense for banks and high-profile technology firms to enable HTTPS on their dynamic websites because of the transaction of important and sensitive information.&lt;/p&gt;
&lt;h3 id=&#34;42-why-enable-hsts&#34;&gt;
    &lt;a href=&#34;#42-why-enable-hsts&#34;&gt;#&lt;/a&gt;
    4.2. Why enable HSTS?
&lt;/h3&gt;&lt;p&gt;In addition to enabling HTTPS on a site-wide basis, corporations should weigh the benefits of enabling &lt;a class=&#34;link&#34; href=&#34;https://www.globalsign.com/en/blog/what-is-hsts-and-how-do-i-use-it/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HSTS&lt;/a&gt; (HTTP Strict Transport Security), which is a web security policy mechanism that helps to protect websites against SSL stripping attacks and cookie hijacking. &lt;strong&gt;It allows&lt;/strong&gt; &lt;strong&gt;web servers to declare that&lt;/strong&gt; web browsers should interact with them using only secure HTTPS connections, and never via the insecure HTTP protocol.&lt;/p&gt;
&lt;p&gt;When a web application issues HSTS Policy to user browsers, conformant user browsers will &lt;a class=&#34;link&#34; href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;automatically redirect&lt;/a&gt; any insecure HTTP requests to HTTPS for the target website. In addition, when a man-in-the-middle attacker attempts to intercept traffic from a victim using an invalid certificate, HSTS does not allow the user to override the invalid certificate warning message. By having a HSTS policy installed, it will be nearly impossible for the attackers to intercept any information at all!&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://venafi.com/blog/what-are-ssl-stripping-attacks/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What Are SSL Stripping Attacks? | Venafi&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-dns&#34;&gt;
    &lt;a href=&#34;#5-dns&#34;&gt;#&lt;/a&gt;
    5. DNS
&lt;/h2&gt;&lt;h3 id=&#34;51-dns-hijacking&#34;&gt;
    &lt;a href=&#34;#51-dns-hijacking&#34;&gt;#&lt;/a&gt;
    5.1. DNS hijacking
&lt;/h3&gt;&lt;p&gt;To prevent DNS hijacking, first, you have to know the different kinds of attacks. DNS hijacking can take four different forms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Local DNS hijacking:&lt;/strong&gt; An attacker installs &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/trojan-horse-virus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Trojan software&lt;/a&gt; on a user&amp;rsquo;s computer, then modifies the local DNS settings (cahnge its DNS server to a Rogue DNS server).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS hijacking using a router:&lt;/strong&gt; Many routers have weak firmware or use the default passwords they were shipped with. Attackers can take advantage of this to hack a router and change its DNS settings, which will affect everyone that uses that router.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Man-in-the-middle (MITM) attacks:&lt;/strong&gt; Attackers use &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/man-in-the-middle-attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;man-in-the-middle attack techniques&lt;/a&gt; to intercept communications between users and a &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/dynamic-dns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS server&lt;/a&gt;. They then direct the target to malicious websites.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Learn more &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/dns-hijacking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What Is DNS Hijacking? How to Detect &amp;amp; Prevent It | Fortinet&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-dns-spoofing-vs-dns-cache-poisoning&#34;&gt;
    &lt;a href=&#34;#52-dns-spoofing-vs-dns-cache-poisoning&#34;&gt;#&lt;/a&gt;
    5.2. DNS spoofing vs DNS (cache) poisoning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Poisoning&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The attacker inserts false address records into the DNS server&amp;rsquo;s cache, causing the server to return incorrect IP addresses for domain names.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt;: The attack is on the DNS server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: If &lt;code&gt;www.example.com&lt;/code&gt; is supposed to resolve to IP &lt;code&gt;1.2.3.4&lt;/code&gt;, in a DNS poisoning attack, the DNS server might be tricked into resolving it to &lt;code&gt;5.6.7.8&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The attacker intercepts and responds to DNS requests with false information, usually &lt;strong&gt;before&lt;/strong&gt; the legitimate response is received.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: When a user tries to access &lt;code&gt;www.example.com&lt;/code&gt;, an attacker might intercept this request and send a fake response directing the user to IP &lt;code&gt;5.6.7.8&lt;/code&gt; instead of the real IP &lt;code&gt;1.2.3.4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/005-gfw-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GFW and DNS Poisoning - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-others&#34;&gt;
    &lt;a href=&#34;#53-others&#34;&gt;#&lt;/a&gt;
    5.3. Others
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Poisoning vs DNS Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS Poisoning: Inject false DNS info to the real server&amp;rsquo;s cache.&lt;/li&gt;
&lt;li&gt;DNS Spoofing: Send false response back with a malicious DNS server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose of MAC Address Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To make a switch forward packets to an attacker&amp;rsquo;s device by mimicking a legitimate MAC address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use of ICMP Redirects in Man-in-the-Middle Attacks&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An attacker sends forged &amp;ldquo;ICMP redirect messages&amp;rdquo; to mislead a host into changing its routing table, diverting traffic through the attacker&amp;rsquo;s machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>DNS Stub and Recursive Resolver - Config Files</title>
        <link>https://blog.yorforger.cc/p/dns-stub-and-recursive-resolver-config-files/</link>
        <pubDate>Fri, 13 Oct 2023 14:03:57 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dns-stub-and-recursive-resolver-config-files/</guid>
        <description>&lt;h2 id=&#34;1-etchosts-and-etcresolvconf&#34;&gt;
    &lt;a href=&#34;#1-etchosts-and-etcresolvconf&#34;&gt;#&lt;/a&gt;
    1. &lt;code&gt;/etc/hosts&lt;/code&gt; and &lt;code&gt;/etc/resolv.conf&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;On Linux or a Mac, if you add this to &lt;code&gt;/etc/hosts&lt;/code&gt;, facebook no longer exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1 facebook.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/hosts&lt;/code&gt; is used to resolve hostnames to IP addresses on a local machine. They&amp;rsquo;re &lt;strong&gt;looked at first&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now&amp;hellip; If you don&amp;rsquo;t have an entry for a host in your host file, you need to ask someone what the IP is. That comes from a &lt;strong&gt;resolver&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-local-resolver--recursive-resolver&#34;&gt;
    &lt;a href=&#34;#2-local-resolver--recursive-resolver&#34;&gt;#&lt;/a&gt;
    2. Local resolver &amp;amp; recursive resolver
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Recursive resolver usually located at remote acts as a DNS server, whereas, a DNS stub resolver running on client devices.&lt;/p&gt;
&lt;p&gt;Most Internet users use a recursive resolver provided by their ISP, but there are other options available; for example &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/what-is-1.1.1.1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cloudflare&amp;rsquo;s 1.1.1.1&lt;/a&gt; or 8.8.8.8 provided by Google.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat /etc/resolv.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Do not edit.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 127.0.0.53
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;127.0.0.53&lt;/code&gt; is the DNS server address, you can also manually change it to the IP of any DNS server (for example, change it to the famous Google DNS 8.8.8.8).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;127.x.x.x&lt;/code&gt; are loopback addresses that point to the local machine and are bound to the &lt;em&gt;&lt;strong&gt;&amp;ldquo;lo&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; (loopback) network device. So who is this DNS server &lt;code&gt;127.0.0.53&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo netstat -anp &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep 127.0.0.53
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 127.0.0.53:53           0.0.0.0:*               LISTEN      96729/systemd-resol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;udp        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 127.0.0.53:53           0.0.0.0:*                           96729/systemd-resol 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;From the output, we can see that the process uses  &lt;code&gt;127.0.0.53:53&lt;/code&gt;  called &lt;em&gt;&lt;strong&gt;systemd-resolve&lt;/strong&gt;&lt;/em&gt;. In &lt;code&gt;/etc/resolv.conf&lt;/code&gt; it says that it&amp;rsquo;s maintained by the &lt;em&gt;&lt;strong&gt;systemd-resolved&lt;/strong&gt;&lt;/em&gt; service. So we can try to check its status with systemctl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl status systemd-resolved
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;● systemd-resolved.service - Network Name Resolution
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Loaded: loaded &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/lib/systemd/system/systemd-resolved.service&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; enabled&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     Active: active &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;running&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; since Tue 2023-10-10 01:56:13 UTC&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; days ago
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     ....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We have know that the current DNS server on this machine is &lt;em&gt;&lt;strong&gt;systemd-resolve&lt;/strong&gt;&lt;/em&gt; which a DNS stub (client). So, what is the IP address of the actual DNS server? We can use the following command to check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# $ systemd-resolve --status | grep &amp;#34;DNS Servers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# In systemd 239 &amp;#39;systemd-resolve&amp;#39; has been renamed to &amp;#39;resolvectl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ resolvectl status &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;DNS Servers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       DNS Servers: 172.31.0.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ resolvectl status
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Global
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       Protocols: -LLMNR -mDNS -DNSOverTLS &lt;span class=&#34;nv&#34;&gt;DNSSEC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;no/unsupported
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;resolv.conf mode: stub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Link &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eth0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Current Scopes: DNS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS &lt;span class=&#34;nv&#34;&gt;DNSSEC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;no/unsupported
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Current DNS Server: 172.31.0.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       DNS Servers: 172.31.0.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        DNS Domain: us-east-2.compute.internal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;DNS stub resolver&lt;/strong&gt;&lt;/em&gt; used to initiate DNS queries, and it sends the DNS query to the &lt;strong&gt;recursive resolver&lt;/strong&gt;, which then performs the actual DNS resolution process (usually provided by an internet service provider or a public DNS resolver like Google&amp;rsquo;s 8.8.8.8).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References: &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/101275725&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/101275725&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Wireshark Basics</title>
        <link>https://blog.yorforger.cc/p/wireshark-basics/</link>
        <pubDate>Wed, 13 Sep 2023 16:52:30 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/wireshark-basics/</guid>
        <description>&lt;h2 id=&#34;1-structure&#34;&gt;
    &lt;a href=&#34;#1-structure&#34;&gt;#&lt;/a&gt;
    1. Structure
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/001-wireshark/aaa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;a&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-capture-filter&#34;&gt;
    &lt;a href=&#34;#2-capture-filter&#34;&gt;#&lt;/a&gt;
    2. Capture filter
&lt;/h2&gt;&lt;h3 id=&#34;21-selcet-netowk-interface&#34;&gt;
    &lt;a href=&#34;#21-selcet-netowk-interface&#34;&gt;#&lt;/a&gt;
    2.1. Selcet netowk interface
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;en0&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Physical network interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;utun0~4
&lt;ul&gt;
&lt;li&gt;VIrtual netwrok interface used for tunneling, learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/007-tun-device-macos/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Working with TUN Device on MacOS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;loopback interface: 127.0.0.1
&lt;ul&gt;
&lt;li&gt;When you run a echo server and client on your local machine, you should select the &lt;code&gt;loopback&lt;/code&gt; interface, not the &lt;code&gt;en0&lt;/code&gt; interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-specify-filter-rules&#34;&gt;
    &lt;a href=&#34;#22-specify-filter-rules&#34;&gt;#&lt;/a&gt;
    2.2. Specify filter rules
&lt;/h3&gt;&lt;p&gt;Filter by port and protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;port &lt;span class=&#34;m&#34;&gt;9000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Wireshark can only capture some specific ports that for HTTP package by default, so if you gonna capture HTTP package, make sure use the correct ports or goto settings to change the default ports. If you ignore this, like to capture HTTP on port 9000, you probably jut get TCP package.&lt;/p&gt;
&lt;p&gt;You can find the allowed HTTP port on &lt;code&gt;Preferences-&amp;gt;Protocols-&amp;gt;HTTP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://wiki.wireshark.org/CaptureFilters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CaptureFilters - Wireshark&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-display-filter&#34;&gt;
    &lt;a href=&#34;#3-display-filter&#34;&gt;#&lt;/a&gt;
    3. Display filter
&lt;/h2&gt;&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://wiki.wireshark.org/DisplayFilters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DisplayFilters&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-practical-examples&#34;&gt;
    &lt;a href=&#34;#4-practical-examples&#34;&gt;#&lt;/a&gt;
    4. Practical examples
&lt;/h2&gt;&lt;p&gt;Client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Three-way handshake included this step
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Note that we&amp;#39;re connecting to port 9000 on the server,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// not use port 9000 to connect the server.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Dial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:9000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;couldn&amp;#39;t connect to the server: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// send data to server, the data will be copied into kernel space
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// and encapsulated into tcp segment -&amp;gt; ip packet -&amp;gt; ethernet frame
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hi, I am Coco\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;couldn&amp;#39;t send request: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Read data from server, the data are copied from kernel space
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// what happens in kernel space (network stack):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// ethernet frame -&amp;gt; ip packet -&amp;gt; tcp segment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// the data will be forwarded to this program.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// If the connection is closed, return error: io.EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;couldn&amp;#39;t read server response: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Obtain the port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Create a tcp listener on the given port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to create listener, err:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;listening on %s\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// listen for new connections
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Three-way handshake included
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// this connection will be assigned a new port (different from the port this server is listening)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// for sending and receiving data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to accept connection, err:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Pass an accepted connection to a handler goroutine
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// read client request data, same as client side
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// if the connection is closed, return error: io.EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EOF&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to read data, err:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;connection closed by client:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RemoteAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;request: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Same as on client side
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Run server and client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go run main.go &lt;span class=&#34;m&#34;&gt;9000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Wireshark:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/001-wireshark/a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;a&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The first three is the three-way handshake packet,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[SYN] seq=0 len=0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[SYN] seq=0 ack=1 len=0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[SYN] seq=1 ack=1 len=0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that the length of the fifth packet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ACK sent with data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;PSH, ACK&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ... &lt;span class=&#34;nv&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/001-wireshark/b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;b&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len&lt;/code&gt; is the data&amp;rsquo;s length, the first there packets are just three-way handshake there is no data sent, so &lt;code&gt;len=0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last four packets are TCP termination four-way hand-shake:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ACK sent with FIN, this ACK is used to &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ack=16 confirms that client has received the 15 byte sent by server &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# and client expects seq=16 from server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;FIN, ACK&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ACK&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;The TCP &lt;code&gt;ACK&lt;/code&gt; flag is used to confirm the last received byte by receiver.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PSH&lt;/code&gt; flag, on the other hand, is used to tell the server to push data to the application layer immediately.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Working with TUN Device on MacOS</title>
        <link>https://blog.yorforger.cc/p/working-with-tun-device-on-macos/</link>
        <pubDate>Tue, 12 Sep 2023 08:31:59 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/working-with-tun-device-on-macos/</guid>
        <description>&lt;h2 id=&#34;1-tun-on-macos&#34;&gt;
    &lt;a href=&#34;#1-tun-on-macos&#34;&gt;#&lt;/a&gt;
    1. TUN on MacOS
&lt;/h2&gt;&lt;p&gt;On macOS, the &lt;code&gt;utun&lt;/code&gt; interface is a type of TUN device specifically designed for VPN connections to handle the network traffic &lt;strong&gt;within the VPN tunnel&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://apple.stackexchange.com/questions/310220/who-creates-utun0-adapter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;regardless of whether VPN is enabled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give you an example to demonstrate the realtionship between TUN device and utun interface, the code below written in Go is to create a TUN device:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// New() creates a new TUN/TAP interface using config.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ifce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeviceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TUN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Before run this code there are 4 utun interfaces on my mac:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun0: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::652e:88dd:ddb0:ad93%utun0 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0xf 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun4: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::e305:5ba8:574a:a5ac%utun4 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0x13 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;After I run the Go codes above with &lt;code&gt;sudo&lt;/code&gt;, there are 5 utun interfaces but with no ip information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun4: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::e305:5ba8:574a:a5ac%utun4 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0x13 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun5: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;utun*&lt;/code&gt; is a &lt;strong&gt;point-to-point&lt;/strong&gt; interface, also called a tunnel or a peer-to-peer interface, It doesn&amp;rsquo;t behave like &amp;ldquo;shared medium&amp;rdquo; interfaces such as Wi-Fi or Ethernet, which connect you to multiple devices. Instead, it behaves like a cable that just has hosts on both ends.&lt;/p&gt;
&lt;p&gt;There are no layer-2 headers, no MAC addresses, and no ARP on a point-to-point interface, because everything sent through it reaches the same destination (the &amp;ldquo;peer&amp;rdquo; host).&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://superuser.com/a/1446061/1689666&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://superuser.com/a/1446061/1689666&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-utun-is-an-instance-of-tun-device&#34;&gt;
    &lt;a href=&#34;#2-utun-is-an-instance-of-tun-device&#34;&gt;#&lt;/a&gt;
    2. &lt;code&gt;utun&lt;/code&gt; is an instance of TUN device
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;You can think &lt;code&gt;utun*&lt;/code&gt; is an instance of TUN device on Mac, a TUN device can have many instances.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OS treat virtual network interface (tun/tap devices) as same to the physical network interface, which means virtual network interface can have anything (including ip address) that physical network interface have.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utun*&lt;/code&gt; is just a network interface similar to &lt;code&gt;en0&lt;/code&gt;, &lt;code&gt;lo0&lt;/code&gt;, when you input &lt;code&gt;ifconfig&lt;/code&gt; command, they will listed together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ifconfig     
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lo0: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8049&amp;lt;UP,LOOPBACK,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;16384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1203&amp;lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet 127.0.0.1 netmask 0xff000000 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 ::1 prefixlen &lt;span class=&#34;m&#34;&gt;128&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::1%lo0 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0x1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;en0: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8863&amp;lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;6463&amp;lt;RXCSUM,TXCSUM,TSO4,TSO6,CHANNEL_IO,PARTIAL_CSUM,ZEROINVERT_CSUM&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	ether d4:57:63:da:b6:98 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::475:ca98:8ecc:d86%en0 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; secured scopeid 0xc 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet 192.168.2.15 netmask 0xffffff00 broadcast 192.168.2.255
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fdd0:ed77:f347:4d69:859:d993:f358:5af9 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; autoconf secured 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	media: autoselect
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	status: active
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;en1: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8963&amp;lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;460&amp;lt;TSO4,TSO6,CHANNEL_IO&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	ether 36:6b:75:95:04:c0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	media: autoselect &amp;lt;full-duplex&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	status: inactive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun0: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::652e:88dd:ddb0:ad93%utun0 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0xf 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun1: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	inet6 fe80::a13f:9a63:f8cb:4017%utun1 prefixlen &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; scopeid 0x10 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	nd6 &lt;span class=&#34;nv&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Find more about what these interface are: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/55232331/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/55232331/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;utun3: &lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        inet 10.8.0.18 --&amp;gt; 10.8.0.17 netmask 0xffffffff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;With &amp;ldquo;normal&amp;rdquo; interfaces, configuring an address with subnet mask like &lt;code&gt;192.168.1.3/24&lt;/code&gt; on eth0 is really just shorthand for saying &amp;ldquo;My address is &lt;code&gt;192.168.1.3&lt;/code&gt; and I also have an on-link route &lt;code&gt;192.168.1.0/24 dev eth0&lt;/code&gt;&amp;rdquo;. The on-link route is derived from combining the address &amp;amp; subnet mask.&lt;/p&gt;
&lt;p&gt;With point-to-point interfaces, it&amp;rsquo;s actually the same idea. This example means &amp;ldquo;My address is &lt;code&gt;10.8.0.18&lt;/code&gt; and I also have an on-link route &lt;code&gt;10.8.0.17/32 dev utun3&lt;/code&gt;.&amp;rdquo; In this case the autogenerated route is a /32, indicating only one host – the &amp;ldquo;peer&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: My examples use Linux iproute2-style syntax.)&lt;/em&gt; So in the end, the difference between &lt;code&gt;10.8.0.17 netmask 0xffffffff&lt;/code&gt; and &lt;code&gt;10.8.0.17/32&lt;/code&gt; styles is just that automatic route.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://superuser.com/a/1446061/1689666&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://superuser.com/a/1446061/1689666&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-ip-for-utun-interface&#34;&gt;
    &lt;a href=&#34;#3-set-up-ip-for-utun-interface&#34;&gt;#&lt;/a&gt;
    3. Set up ip for &lt;code&gt;utun&lt;/code&gt; interface
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tldr ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- View network settings of an Ethernet adapter:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ifconfig eth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Display details of all interfaces, including disabled interfaces:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ifconfig -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Disable eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ifconfig eth0 down
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Enable eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ifconfig eth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Assign IP address to eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ifconfig eth0 ip_address
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For example, if you have two machines, one we label &amp;ldquo;local&amp;rdquo; with a LAN IP address like 192.168.0.12 and another we label &amp;ldquo;remote&amp;rdquo; with a LAN IP address like 192.168.1.14, you can assign tunnel IP addresses thusly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ifconfig tun0 inet 10.0.0.1 10.0.0.2 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;on the local system, and:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ifconfig tun0 inet 10.0.0.2 10.0.0.1 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;on the remote system. Note the reversed perspective on the remote machine. Do not set your point to point addresses to anything on an existing subnet; it will not route properly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, if you set a wrong interface, you can cancle it with  &lt;code&gt;sudo ifconfig utun2 delete 10.1.0.10 10.1.0.20 &lt;/code&gt; or &lt;code&gt;ifconfig en1 delete 192.168.141.99&lt;/code&gt; for differnt types of network interfaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/17511998/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/17511998/16317008&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-use-tun-capture-ip-packets-with-go-on-macos&#34;&gt;
    &lt;a href=&#34;#4-use-tun-capture-ip-packets-with-go-on-macos&#34;&gt;#&lt;/a&gt;
    4. Use TUN capture ip packets with Go on MacOS
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go get -u github.com/songgao/water
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;ifce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeviceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TUN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Interface Name: %s\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ifce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;packet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ifce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;packet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Packet Received: % x\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;packet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# NOTE: replace utunx with the name printed on your go code above&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo ifconfig utun5 10.1.0.10 10.1.0.20 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ping -c &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 10.1.0.20
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If no data printed on your go codes, restart your go codes and change a pair of ip addresses for utun interface.&lt;/p&gt;
&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/songgao/water&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;songgao/water: A simple TUN/TAP library written in native Go.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/011-tun-device/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TUN Device &amp;amp; utun Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>虚拟网卡 tun/tap - 阅读转载</title>
        <link>https://blog.yorforger.cc/p/%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-tun/tap-%E9%98%85%E8%AF%BB%E8%BD%AC%E8%BD%BD/</link>
        <pubDate>Mon, 11 Sep 2023 21:57:37 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-tun/tap-%E9%98%85%E8%AF%BB%E8%BD%AC%E8%BD%BD/</guid>
        <description>&lt;p&gt;原文:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.luozhiyun.com/archives/684&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;云原生虚拟网络 tun/tap &amp;amp; veth-pair - luozhiyun`s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.junmajinlong.com/virtual/network/all_about_tun_tap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解 Linux 虚拟网卡设备 tun/tap 的一切 | 骏马金龙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前的相关文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/011-tun-device/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TUN Device &amp;amp; utun Interface - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/013-tunneling-protocols/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tunneling Protocols - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-物理网卡和虚拟网卡&#34;&gt;
    &lt;a href=&#34;#1-%e7%89%a9%e7%90%86%e7%bd%91%e5%8d%a1%e5%92%8c%e8%99%9a%e6%8b%9f%e7%bd%91%e5%8d%a1&#34;&gt;#&lt;/a&gt;
    1. 物理网卡和虚拟网卡
&lt;/h2&gt;&lt;h3 id=&#34;11-物理网卡收发数据的流程&#34;&gt;
    &lt;a href=&#34;#11-%e7%89%a9%e7%90%86%e7%bd%91%e5%8d%a1%e6%94%b6%e5%8f%91%e6%95%b0%e6%8d%ae%e7%9a%84%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;
    1.1. 物理网卡收发数据的流程
&lt;/h3&gt;&lt;p&gt;物理网卡可以接收和发送数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收：外界向该物理网卡发送数据时，外界发送到网卡的数据最终会传输到内核空间的网络协议栈中&lt;/li&gt;
&lt;li&gt;发：本机要从物理网卡发送数据时，数据将从内核的网络协议栈传输到网卡，网卡负责将数据发送出去&lt;/li&gt;
&lt;li&gt;现在的网卡具备 DMA 能力，所以网卡和网络协议栈之间的数据传输由网卡负责，而非由内核亲自占用 CPU 来执行读和写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，数据的起点和终点是用户程序，所以多数时候的数据需要在用户空间和内核空间 (网络协议栈) 再传输一次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用户进程的数据要发送出去时，数据从用户空间写入内核的网络协议栈，再从网络协议栈传输到网卡，最后发送出去&lt;/li&gt;
&lt;li&gt;当用户进程等待外界响应数据时，数据从网卡流入，传输至内核的网络协议栈，最后数据写入用户空间被用户进程读取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这些过程中，&lt;strong&gt;内核和用户空间的数据传输由内核占用 CPU 来完成，内核和网卡之间的数据传输由网卡的 DMA 来完成&lt;/strong&gt;，不需要占用过多的 CPU。&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/f.png&#34; alt=&#34;f&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;h3 id=&#34;12-虚拟网卡和物理网卡的对比&#34;&gt;
    &lt;a href=&#34;#12-%e8%99%9a%e6%8b%9f%e7%bd%91%e5%8d%a1%e5%92%8c%e7%89%a9%e7%90%86%e7%bd%91%e5%8d%a1%e7%9a%84%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;
    1.2. 虚拟网卡和物理网卡的对比
&lt;/h3&gt;&lt;p&gt;和物理网卡对比一下，物理网卡是硬件网卡，它位于硬件层，虚拟网卡则可以看作是用户空间的网卡，就像用户空间的文件系统 (fuse) 一样。&lt;/p&gt;
&lt;p&gt;物理网卡和虚拟网卡唯一的不同点在于物理网卡本身的硬件功能：物理网卡以比特流的方式传输数据。&lt;/p&gt;
&lt;p&gt;也就是说，内核会公平对待物理网卡和虚拟网卡，物理网卡能做的配置，虚拟网卡也能做。比如可以为虚拟网卡接口配置 IP 地址、设置子网掩码，可以将虚拟网卡接入网桥等等。&lt;/p&gt;
&lt;p&gt;只有在数据流经物理网卡和虚拟网卡的那一刻，才会体现出它们的不同，即传输数据的方式不同：物理网卡以比特流的方式传输数据，虚拟网卡则直接在内存中拷贝数据 (即，在内核之间和读写虚拟网卡的程序之间传输)。&lt;/p&gt;
&lt;p&gt;正因为虚拟网卡不具备物理网卡以比特流方式传输数据的硬件功能，所以，&lt;strong&gt;绝不可能通过虚拟网卡向外界发送数据，外界数据也不可能直接发送到虚拟网卡上&lt;/strong&gt;。能够直接收发外界数据的，只能是物理设备。&lt;/p&gt;
&lt;p&gt;虽然虚拟网卡无法将数据传输到外界网络，但却：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以将数据传输到本机的另一个网卡 (虚拟网卡或物理网卡) 或其它虚拟设备 (如虚拟交换机) 上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以在用户空间运行一个可读写虚拟网卡的程序，该程序可将流经虚拟网卡的数据包进行处理&lt;/strong&gt;，这个用户程序就像是物理网卡的硬件功能一样，可以收发数据 (可将物理网卡的硬件功能看作是嵌入在网卡上的程序)，比如 OpenVPN 就是这样的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多人会误解这样的用户空间程序，认为它们可以对数据进行封装。比如认为 OpenVPN 可以在数据包的基础上再封装一层隧道 IP 首部，但这种理解是错的。&lt;/p&gt;
&lt;p&gt;一定请注意，&lt;strong&gt;用户空间的程序是无法对数据包做任何封装和解封操作的，所有的封装和解封都只能由内核的网络协议栈来完成&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/f-4483381.png&#34; alt=&#34;f&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;使用 OpenVPN 之所以可以对数据再封装一层隧道 IP 层，是因为 OpenVPN 可以读取已经封装过一次 IP 首部的数据，并将包含 ip 首部的数据作为普通数据通过虚拟网卡再次传输给内核。因为内核接收到的是来自虚拟网卡的数据，所以内核会将其当作普通数据从头开始封装 (从四层封装到二层封装)。当数据从网络协议栈流出时，就有了两层 IP 首部的封装。&lt;/p&gt;
&lt;p&gt;换句话说，每一次看似由用户空间程序进行的额外封装，都意味着数据要从内核空间到用户空间，再到内核空间。以 OpenVPN 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp/ip stack --&amp;gt; tun --&amp;gt; OpenVPN --&amp;gt; tcp/ip stack --&amp;gt; Phyical NIC
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中 tun 是 OpenVPN 创建的一个三层虚拟网卡，tun 设备在用户空间和内核空间之间传递数据。&lt;/p&gt;
&lt;p&gt;具体的 openvpn 数据封装和数据流向的细节，参考更详细的&lt;a class=&#34;link&#34; href=&#34;https://www.junmajinlong.com/virtual/network/data_flow_about_openvpn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;通过 openvpn 分析 tun 实现隧道的数据流程&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;13-程序写入虚拟网卡时的注意事项&#34;&gt;
    &lt;a href=&#34;#13-%e7%a8%8b%e5%ba%8f%e5%86%99%e5%85%a5%e8%99%9a%e6%8b%9f%e7%bd%91%e5%8d%a1%e6%97%b6%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34;&gt;#&lt;/a&gt;
    1.3. 程序写入虚拟网卡时的注意事项
&lt;/h3&gt;&lt;p&gt;用户空间的程序不可随意向虚拟网卡写入数据，因为写入虚拟网卡的这些数据都会被内核网络协议栈进行解封处理，就像来自物理网卡的数据都会被解封一样。&lt;/p&gt;
&lt;p&gt;因此，如果&lt;strong&gt;用户空间程序要写 tun/tap 设备，所写入的数据需具有特殊结构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要么是已经封装了 PORT 的数据，即传输层的 tcp 数据段或 udp 数据报&lt;/li&gt;
&lt;li&gt;要么是已经封装了 IP+PORT 的数据，即 ip 层数据包&lt;/li&gt;
&lt;li&gt;要么是已经封装了 IP+PORT+MAC 的数据，即链路层数据帧&lt;/li&gt;
&lt;li&gt;要么是其它符合 tcp/ip 协议栈的数据，比如二层的 PPP 点对点数据，比如三层的 icmp 协议数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，程序只能向虚拟网卡写入已经封装过的数据。&lt;/p&gt;
&lt;p&gt;由于网络数据的封装都由内核的网络协议栈负责，所以程序写入虚拟网卡的数据实际上都原封不动地来自于上一轮的网络协议栈，用户空间程序无法对这部分数据做任何修改。&lt;/p&gt;
&lt;p&gt;也就是说，这时&lt;strong&gt;写虚拟网卡的用户空间程序仅充当了一个特殊的【转发】程序：要么转发四层 tcp/udp 数据，要么转发三层数据包，要么转发二层数据帧&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这一段话可能不好理解，下面给个简单的示例分析。&lt;/p&gt;
&lt;p&gt;假如物理网卡 eth0 从外界网络接收了这么一段特殊的 ping 请求数据：&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/g.png&#34; alt=&#34;g&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;这份数据会从物理网卡传输到内核网络协议栈，网络协议栈会对其解封，解封的内容只能是 tcp/ip 协议栈中的内容，即只能解封帧头部、IP 头部以及端口头部，网络协议栈解封后还剩下一段包含了内层 IP 头部 (tun 的 IP) 以及 icmp 请求的数据。&lt;/p&gt;
&lt;p&gt;内核会根据刚才解封的端口号找到对应的服务进程，并将解封剩下的数据传输给该进程，即传输给用户空间的程序。&lt;/p&gt;
&lt;p&gt;用户空间的程序不做任何修改地将读取到的包含了内层 IP 头部和 ICMP 请求的数据原封不动地写入虚拟网卡设备，内核从虚拟网卡接收到数据后，将数据进行解封，解封得到最终的 icmp 请求数据，于是内核开始构建用于响应 ping 请求的数据。&lt;/p&gt;
&lt;h2 id=&#34;2-概述&#34;&gt;
    &lt;a href=&#34;#2-%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;
    2. 概述
&lt;/h2&gt;&lt;p&gt;目前主流的虚拟网卡方案有&lt;a class=&#34;link&#34; href=&#34;https://www.kernel.org/doc/Documentation/networking/tuntap.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tun/tap&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;https://man7.org/linux/man-pages/man4/veth.4.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;veth&lt;/a&gt;两种。在时间上 tun/tap 出现得更早，在 Linux Kernel 2.4 版之后发布的内核都会默认编译 tun/tap 的驱动。并且 tun/tap 应用非常广泛，其中云原生虚拟网络中， flannel 的 UDP 模式中的 flannel0 就是一个 tun 设备，OpenVPN 也利用到了 tun/tap 进行数据的转发。&lt;/p&gt;
&lt;p&gt;veth 是另一种主流的虚拟网卡方案，在 Linux Kernel 2.6 版本，Linux 开始支持网络名空间隔离的同时，也提供了专门的虚拟以太网（Virtual Ethernet，习惯简写做 veth）让两个隔离的网络名称空间之间可以互相通信。veth 实际上不是一个设备，而是一对设备，因而也常被称作 Veth-Pair。&lt;/p&gt;
&lt;p&gt;Docker 中的 Bridge 模式就是依靠 veth-pair 连接到 docker0 网桥上与宿主机乃至外界的其他机器通信的。&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/a.png&#34; alt=&#34;a&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;3-tuntap&#34;&gt;
    &lt;a href=&#34;#3-tuntap&#34;&gt;#&lt;/a&gt;
    3. tun/tap
&lt;/h2&gt;&lt;p&gt;tun 和 tap 是两个相对独立的虚拟网络设备，它们作为虚拟网卡，除了不具备物理网卡的硬件功能外，它们和物理网卡的功能是一样的，此外tun/tap负责在内核网络协议栈和用户空间之间传输数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tun 设备是一个三层网络层设备，从 /dev/net/tun 字符设备上读取的是 IP 数据包，写入的也只能是 IP 数据包，因此常用于一些点对点IP隧道，例如OpenVPN，IPSec等；&lt;/li&gt;
&lt;li&gt;tap 设备是二层链路层设备，等同于一个以太网设备，从 /dev/tap0 字符设备上读取 MAC 层数据帧，写入的也只能是 MAC 层数据帧，因此常用来作为虚拟机模拟网卡使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/b.png&#34; alt=&#34;b&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;从上面图中，我们可以看出物理网卡和 tun/tap 设备模拟的虚拟网卡的区别，虽然它们的一端都是连着网络协议栈，但是物理网卡另一端连接的是物理网络，而 tun/tap 设备另一端连接的是一个文件作为传输通道。&lt;/p&gt;
&lt;p&gt;根据前面的介绍，我们大约知道虚拟网卡主要有两个功能，一个是连接其它设备（虚拟网卡或物理网卡）和 Bridge 这是 tap 设备的作用；另一个是提供用户空间程序去收发虚拟网卡上的数据，这是 tun 设备的作用。&lt;/p&gt;
&lt;p&gt;主要区别是因为它们作用在不同的网络协议层，换句话说 tap设备是一个二层设备所以通常接入到 Bridge上作为局域网的一个节点，tun设备是一个三层设备通常用来实现 vpn。&lt;/p&gt;
&lt;h2 id=&#34;4-openvpn-使用-tun-设备收发数据&#34;&gt;
    &lt;a href=&#34;#4-openvpn-%e4%bd%bf%e7%94%a8-tun-%e8%ae%be%e5%a4%87%e6%94%b6%e5%8f%91%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;
    4. OpenVPN 使用 tun 设备收发数据
&lt;/h2&gt;&lt;p&gt;OpenVPN 是使用 tun 设备的常见例子，它可以方便的在不同网络访问场所之间搭建类似于局域网的专用网络通道。其核心机制就是在 OpenVPN 服务器和客户端所在的计算机上都安装一个 tun 设备，通过其虚拟 IP 实现相互访问。&lt;/p&gt;
&lt;p&gt;例如公网上的两个主机节点A、B，物理网卡上配置的IP分别是 ipA_eth0 和 ipB_eth0。然后在A、B两个节点上分别运行 openvpn 的客户端和服务端，它们会在自己的节点上创建 tun 设备，且都会读取或写入这个 tun 设备。&lt;/p&gt;
&lt;p&gt;假设这两个设备对应的虚拟 IP 是 ipA_tun0 和 ipB_tun0，那么节点 B 上面的应用程序想要通过虚拟 IP 对节点 A 通信，那么数据包流向就是：&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/c.png&#34; alt=&#34;c&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;用户进程对 ipA_tun0 发起请求，经过路由决策后内核将数据从网络协议栈写入 tun0 设备；然后 OpenVPN 从字符设备文件中读取 tun0 设备数据，将数据请求发出去；内核网络协议栈根据路由决策将数据从本机的 eth0 接口流出发往 ipA_eth0 。&lt;/p&gt;
&lt;p&gt;同样我们来看看节点 A 是如何接受数据：&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/d.png&#34; alt=&#34;d&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;当节点A 通过物理网卡 eth0 接受到数据后会将写入内核网络协议栈，因为目标端口号是OpenVPN程序所监听的，所以网络协议栈会将数据交给 OpenVPN ；&lt;/p&gt;
&lt;p&gt;OpenVPN 程序得到数据之后，发现目标IP是tun0设备的，于是将数据从用户空间写入到字符设备文件中，然后 tun0 设备会将数据写入到协议栈中，网络协议栈最终将数据转发给应用进程。&lt;/p&gt;
&lt;p&gt;从上面我们知道使用 tun/tap 设备传输数据需要经过两次协议栈，不可避免地会有一定的性能损耗，如果条件允许，容器对容器的直接通信并不会把 tun/tap 作为首选方案，一般是基于稍后介绍的 veth 来实现的。但是 tun/tap 没有 veth 那样要求设备成对出现、数据要原样传输的限制，数据包到用户态程序后，程序员就有完全掌控的权力，要进行哪些修改，要发送到什么地方，都可以编写代码去实现，因此 tun/tap 方案比起 veth 方案有更广泛的适用范围。&lt;/p&gt;
&lt;h2 id=&#34;5-flannel-udp-模式使用-tun-设备收发数据&#34;&gt;
    &lt;a href=&#34;#5-flannel-udp-%e6%a8%a1%e5%bc%8f%e4%bd%bf%e7%94%a8-tun-%e8%ae%be%e5%a4%87%e6%94%b6%e5%8f%91%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;
    5. flannel UDP 模式使用 tun 设备收发数据
&lt;/h2&gt;&lt;p&gt;早期 flannel 利用 tun 设备实现了 UDP 模式下的跨主网络相互访问，实际上原理和上面的 OpenVPN 是差不多的。&lt;/p&gt;
&lt;p&gt;在 flannel 中 flannel0 是一个三层的 tun 设备，用作在操作系统内核和用户应用程序之间传递 IP 包。当操作系统将一个 IP 包发送给 flannel0 设备之后，flannel0 就会把这个 IP 包，交给创建这个设备的应用程序，也就是 flanneld 进程，flanneld 进程是一个 UDP 进程，负责处理 flannel0 发送过来的数据包：&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/e.png&#34; alt=&#34;e&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;flanneld 进程会根据目的 IP 的地址匹配到对应的子网，从 Etcd 中找到这个子网对应的宿主机 Node2 的 IP 地址，然后将这个数据包直接封装在 UDP 包里面，然后发送给 Node 2。由于每台宿主机上的 flanneld 都监听着一个 8285 端口，所以 Node2 机器上 flanneld 进程会从 8285 端口获取到传过来的数据，解析出封装在里面的发给 ContainerA 的 IP 地址。&lt;/p&gt;
&lt;p&gt;flanneld 会直接把这个 IP 包发送给它所管理的 TUN 设备，即 flannel0 设备。然后网络栈会将这个数据包根据路由发送到 docker0 网桥，docker0 网桥会扮演二层交换机的角色，将数据包发送给正确的端口，进而通过 veth pair 设备进入到 containerA 的 Network Namespace 里。&lt;/p&gt;
&lt;p&gt;上面所讲的 Flannel UDP 模式现在已经废弃，原因就是因为它经过三次用户态与内核态之间的数据拷贝。容器发送数据包经过 docker0 网桥进入内核态一次；数据包由 flannel0 设备进入到 flanneld 进程又一次；第三次是 flanneld 进行 UDP 封包之后重新进入内核态，将 UDP 包通过宿主机的 eth0 发出去。&lt;/p&gt;
&lt;h3 id=&#34;6-tap-设备作为虚拟机网卡&#34;&gt;
    &lt;a href=&#34;#6-tap-%e8%ae%be%e5%a4%87%e4%bd%9c%e4%b8%ba%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%bd%91%e5%8d%a1&#34;&gt;#&lt;/a&gt;
    6. tap 设备作为虚拟机网卡
&lt;/h3&gt;&lt;p&gt;上面我们也说了，tap 设备是一个二层链路层设备，通常用作实现虚拟网卡。以 qemu-kvm 为例，它利用 tap 设备和 Bridge 配合使用拥有极大的灵活性，可以实现各种各样的网络拓扑。&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/007-tun-tap-veth-reading/j.png&#34; alt=&#34;j&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;在 qume-kvm 开启 tap 模式之后，在启动的时候会向内核注册了一个tap类型虚拟网卡 tapx，x 代表依次递增的数字； 这个虚拟网卡 tapx 是绑定在 Bridge 上面的，是它上面的一个接口，最终数据会通过 Bridge 来进行转发。&lt;/p&gt;
&lt;p&gt;qume-kvm 会通过其网卡 eth0 向外发送数据，从 Host 角度看就是用户层程序 qume-kvm 进程将字符设备写入数据；然后 tapx 设备会收到数据后由 Bridge 决定数据包如何转发。如果 qume-kvm 要和外界通信，那么数据包会被发送到物理网卡，最终实现与外部通信。&lt;/p&gt;
&lt;p&gt;从上面的图也可以看出 qume-kvm 发出的数据包通过 tap 设备先到达 Bridge ，然后到物理网络中，数据包不需要经过主机的的协议栈，这样效率也比较高。&lt;/p&gt;
&lt;h2 id=&#34;7-总结&#34;&gt;
    &lt;a href=&#34;#7-%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;
    7. 总结
&lt;/h2&gt;&lt;p&gt;本篇文章只是讲了两种常见的虚拟网络设备。起因是在看 flannel 的时候，书里面都会讲到 flannel0 是一个 tun 设备，但是什么是 tun 设备却不明白，所以导致 flannel 也看的不明白。&lt;/p&gt;
&lt;p&gt;经过研究，发现 tun/tap 设备是一个虚拟网络设备，负责数据转发，但是它需要通过文件作为传输通道，这样不可避免的引申出 tun/tap 设备为什么要转发两次，这也是为什么 flannel 设备 UDP 模式下性能不好的原因，导致了后面这种模式被废弃掉。&lt;/p&gt;
&lt;p&gt;因为 tun/tap 设备作为虚拟网络设备性能不好，容器对容器的直接通信并不会把 tun/tap 作为首选方案，一般是基于后面介绍的 veth 来实现的。veth 作为一个二层设备，可以让两个隔离的网络名称空间之间可以互相通信，不需要反复多次经过网络协议栈， veth pair 是一端连着协议栈，另一端彼此相连的，数据之间的传输变得十分简单，这也让 veth 比起 tap/tun 具有更好的性能。&lt;/p&gt;
&lt;p&gt;了解更多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Introduction to Linux interfaces for virtual networking | Red Hat Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/mtds/4c4925c2aa022130e4b7c538fdd5a89f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux Virtual Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tunneling Protocols</title>
        <link>https://blog.yorforger.cc/p/tunneling-protocols/</link>
        <pubDate>Sun, 10 Sep 2023 08:27:59 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/tunneling-protocols/</guid>
        <description>&lt;h2 id=&#34;vpn&#34;&gt;
    &lt;a href=&#34;#vpn&#34;&gt;#&lt;/a&gt;
    VPN
&lt;/h2&gt;&lt;p&gt;VPN（Virtual Private Network）的核心特性之一就是使用隧道协议（Tunneling Protocol）。通过这些隧道协议，VPN 能够保证数据在不安全的网络中的安全传输，使得VPN在保护在线隐私和绕过网络限制方面非常有效。&lt;/p&gt;
&lt;p&gt;常见的隧道协议包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPsec (Internet Protocol Security)&lt;/strong&gt;：用于在IP通信过程中确保数据的完整性、认证和机密性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenVPN&lt;/strong&gt;：一个基于SSL/TLS的开源VPN协议，提供高度的安全性和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WireGuard&lt;/strong&gt;：一个较新的协议，旨在提供更高的速度和更先进的加密技术。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS (Secure Sockets Layer/Transport Layer Security)&lt;/strong&gt;：SSL VPN usually connects using a Web browser, whereas an IPSec VPN generally requires client software on the remote system.
&lt;ul&gt;
&lt;li&gt;SSL VPN is a component of virtually every Web browser. Any OS that runs a browser is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenVPN 是一个独立的 VPN 协议，它不使用像 PPTP、L2TP 或 IPsec 这样的标准隧道协议。相反，OpenVPN 使用自己的协议，基于 SSL/TLS 来提供加密和安全连接。它是一个开源的软件应用程序，允许创建安全的点对点或站点对站点连接 OpenVPN 的关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自定义加密协议&lt;/strong&gt;：虽然基于 SSL/TLS，但 OpenVPN 有其独特的实现方式，允许高度的定制和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份验证&lt;/strong&gt;：支持各种认证机制，包括证书、预共享密钥和用户认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台兼容性&lt;/strong&gt;：OpenVPN 可以在多种操作系统上运行，包括 Windows、macOS、Linux 和移动平台。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-tunneling&#34;&gt;
    &lt;a href=&#34;#1-tunneling&#34;&gt;#&lt;/a&gt;
    1. Tunneling
&lt;/h2&gt;&lt;p&gt;In &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/007-tun-tap-device/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;previous post&lt;/a&gt;, we know that &lt;em&gt;&lt;strong&gt;TUN&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;TAP&lt;/strong&gt;&lt;/em&gt; are two different kernel virtual network devices, which are used for &lt;strong&gt;tunneling&lt;/strong&gt; purposes. In this post, we&amp;rsquo;ll discuss what is tunneling and coomon tunneling protocols.&lt;/p&gt;
&lt;p&gt;In the physical world, tunneling is a way to cross terrain or boundaries that could not normally be crossed. Similarly, in networking, tunnels are a method for transporting data across a network using protocols that are not supported by that network. &lt;strong&gt;Tunneling works by encapsulating packets: wrapping packets inside of other packets.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encapsulating packets within other packets is called &amp;ldquo;tunneling.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because tunneling involves repackaging the traffic data into a different form, perhaps with encryption as standard, it can hide the nature of the traffic that is run through a tunnel.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encapsulation:&lt;/p&gt;
&lt;p&gt;Data traveling over a network is divided into packets. A typical packet has two parts: the &lt;strong&gt;header&lt;/strong&gt;, which indicates the packet&amp;rsquo;s destination and which protocol it uses, and the &lt;strong&gt;payload&lt;/strong&gt;, which is the packet&amp;rsquo;s actual contents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An encapsulated packet is essentially a packet inside another packet&lt;/strong&gt;. In an encapsulated packet, the header and payload of the first packet goes inside the payload section of the surrounding packet. &lt;strong&gt;The original packet itself becomes the payload.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A VPN just uses one of the tunneling protocols, therefore, when you know how each tunneling protocol works, you will know the essence of VPN of that type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-types-of-tunneling-protocol&#34;&gt;
    &lt;a href=&#34;#2-types-of-tunneling-protocol&#34;&gt;#&lt;/a&gt;
    2. Types of Tunneling protocol
&lt;/h2&gt;&lt;p&gt;In addition to &lt;strong&gt;GRE, IPsec, IP-in-IP, and SSH&lt;/strong&gt;, other tunneling protocols include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Point-to-Point Tunneling Protocol (PPTP)&lt;/li&gt;
&lt;li&gt;Secure Socket Tunneling Protocol (SSTP)&lt;/li&gt;
&lt;li&gt;Layer 2 Tunneling Protocol (L2TP)&lt;/li&gt;
&lt;li&gt;Virtual Extensible Local Area Network (VXLAN)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-ipsec---network-layer&#34;&gt;
    &lt;a href=&#34;#3-ipsec---network-layer&#34;&gt;#&lt;/a&gt;
    3. IPsec - Network layer
&lt;/h2&gt;&lt;p&gt;The IPsec protocol suite operates at the &lt;strong&gt;network layer&lt;/strong&gt; of the OSI model. Within the term &amp;ldquo;IPsec,&amp;rdquo; &amp;ldquo;IP&amp;rdquo; stands for &amp;ldquo;&lt;strong&gt;Internet Protocol&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;sec&amp;rdquo; for &amp;ldquo;secure.&amp;rdquo;  IPsec usually uses port 500.&lt;/p&gt;
&lt;p&gt;The Internet Protocol is the main routing protocol used on the Internet; it designates where data will go using &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/glossary/what-is-my-ip-address/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IP addresses&lt;/a&gt;. IPsec is secure because it &lt;strong&gt;adds encryption and authentication&lt;/strong&gt; to this process.&lt;/p&gt;
&lt;h3 id=&#34;31-why-ipsec-is-important&#34;&gt;
    &lt;a href=&#34;#31-why-ipsec-is-important&#34;&gt;#&lt;/a&gt;
    3.1. Why IPSec is important?
&lt;/h3&gt;&lt;p&gt;Networking protocol suites like &lt;strong&gt;TCP/IP are only concerned with connection and delivery&lt;/strong&gt;, and messages sent are not concealed. Anyone in the middle can read them. IPsec, and other protocols that encrypt data, essentially put an envelope around data as it traverses networks, keeping it secure.&lt;/p&gt;
&lt;h3 id=&#34;32-how-does-ipsec-work&#34;&gt;
    &lt;a href=&#34;#32-how-does-ipsec-work&#34;&gt;#&lt;/a&gt;
    3.2. How does IPsec work?
&lt;/h3&gt;&lt;p&gt;IPsec connections include the following steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key exchange:&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Keys&lt;/a&gt; are necessary for encryption;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packet headers and trailers:&lt;/strong&gt; IP packets contain both a payload and a header. IPsec adds several headers to data packets containing authentication and encryption information. IPsec also adds trailers, which go after each packet&amp;rsquo;s payload instead of before.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is IPsec? | How IPsec VPNs work | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-ipsec-tunnel-and-ipsec-transport-mode&#34;&gt;
    &lt;a href=&#34;#33-ipsec-tunnel-and-ipsec-transport-mode&#34;&gt;#&lt;/a&gt;
    3.3. IPsec tunnel and IPsec transport mode
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tunnel Mode&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在隧道模式下，IPsec对整个IP数据包（包括头部信息）进行加密。&lt;/li&gt;
&lt;li&gt;这意味着原始的IP数据包被封装在一个新的IP数据包中。新的数据包有一个新的IP头部。&lt;/li&gt;
&lt;li&gt;隧道模式常用于VPN（Virtual Private Network，虚拟私人网络），允许不同网络之间安全地传输数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transport Mode&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在传输模式下，IPsec只加密IP数据包的有效载荷（Payload），而不加密头部信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-what-protocols-are-used-in-ipsec&#34;&gt;
    &lt;a href=&#34;#34-what-protocols-are-used-in-ipsec&#34;&gt;#&lt;/a&gt;
    3.4. What protocols are used in IPsec?
&lt;/h3&gt;&lt;p&gt;In &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-the-network-layer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;networking&lt;/a&gt;, a protocol is a specified way of formatting data so that any networked computer can interpret the data. &lt;strong&gt;IPsec is not one protocol, but a suite of protocols&lt;/strong&gt;. The following protocols make up the IPsec suite:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication Header (AH):&lt;/strong&gt; The AH protocol ensures that data packets are from a trusted source and that the data has not been tampered with, like a tamper-proof seal on a consumer product. These headers do not provide any encryption; they do not help conceal the data from attackers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulating Security Protocol (ESP):&lt;/strong&gt; ESP encrypts the IP header and the payload for each packet — unless transport mode is used, in which case it only encrypts the payload. ESP adds its own header and a trailer to each data packet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security Association (SA):&lt;/strong&gt; SA refers to a number of protocols used for negotiating encryption keys and algorithms. One of the most common SA protocols is Internet Key Exchange (IKE).&lt;/p&gt;
&lt;p&gt;Finally, while the &lt;strong&gt;Internet Protocol (IP)&lt;/strong&gt; is not part of the IPsec suite, IPsec runs directly on top of IP.&lt;/p&gt;
&lt;h3 id=&#34;35-how-does-ipsec-impact-mss-and-mtu&#34;&gt;
    &lt;a href=&#34;#35-how-does-ipsec-impact-mss-and-mtu&#34;&gt;#&lt;/a&gt;
    3.5. How does IPsec impact MSS and MTU?
&lt;/h3&gt;&lt;p&gt;IPsec protocols add several headers and trailers to packets, all of which take up several bytes. For networks that use IPsec, either the MSS and MTU have to be adjusted accordingly, or packets will be fragmented and slightly delayed. Usually, the MTU for a network is 1,500 bytes. A normal IP header is 20 bytes long, and a TCP header is also 20 bytes long, meaning each packet can contain 1,460 bytes of payload. However, &lt;strong&gt;IPsec adds an Authentication Header, an ESP header, and associated trailers&lt;/strong&gt;. These add 50-60 bytes to a packet, or more.&lt;/p&gt;
&lt;h2 id=&#34;4-gre---network-layer&#34;&gt;
    &lt;a href=&#34;#4-gre---network-layer&#34;&gt;#&lt;/a&gt;
    4. GRE - Network Layer
&lt;/h2&gt;&lt;p&gt;Encapsulating packets within other packets is called &amp;ldquo;tunneling.&amp;rdquo; GRE tunnels are usually configured between two routers, with each router acting like one end of the tunnel. The routers are set up to send and receive GRE packets directly to each other. &lt;strong&gt;Any routers in between those two routers&lt;/strong&gt; will not open the encapsulated packets; they only reference the headers surrounding the encapsulated packets in order to forward them.&lt;/p&gt;
&lt;p&gt;GRE enables the usage of protocols that are not normally supported by a network, because the packets are wrapped within other packets that do use supported protocols. To understand how this works, think about the difference between a &lt;strong&gt;car&lt;/strong&gt; and a &lt;strong&gt;ferry&lt;/strong&gt;. A &lt;strong&gt;car&lt;/strong&gt; travels over roads on land, while a &lt;strong&gt;ferry&lt;/strong&gt; travels over &lt;strong&gt;water&lt;/strong&gt;. A &lt;strong&gt;car&lt;/strong&gt; cannot normally travel on &lt;strong&gt;water&lt;/strong&gt; — however, a &lt;strong&gt;car&lt;/strong&gt; can be loaded onto a &lt;strong&gt;ferry&lt;/strong&gt; in order to do so.&lt;/p&gt;
&lt;p&gt;For instance, suppose a company needs to set up a connection between the &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-a-lan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;local area networks (LANs)&lt;/a&gt; in their two different offices. Both LANs use the latest version of the &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/internet-protocol/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Internet Protocol&lt;/a&gt;, IPv6. But in order to get from one office network to another, traffic must pass through a network managed by a third party — which is somewhat outdated and only supports the older IPv4 protocol.&lt;/p&gt;
&lt;p&gt;With GRE, the company could send traffic through this network by encapsulating IPv6 packets within IPv4 packets. Referring back to the analogy, the &lt;strong&gt;IPv6 packets are the car&lt;/strong&gt;, the IPv4 packets are the ferry, and the &lt;strong&gt;third-party network is the water&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;41-what-goes-in-a-gre-header&#34;&gt;
    &lt;a href=&#34;#41-what-goes-in-a-gre-header&#34;&gt;#&lt;/a&gt;
    4.1. What goes in a GRE header?
&lt;/h3&gt;&lt;p&gt;GRE adds two headers to each packet: the GRE header, which is 4 bytes long, and an IP header, which is 20 bytes long. The GRE header indicates the protocol type used by the encapsulated packet. The IP header encapsulates the original packet&amp;rsquo;s header and payload. This means that a GRE packet usually has two IP headers: one for the original packet, and one added by the GRE protocol. Only the routers at each end of the GRE tunnel will reference the original, non-GRE IP header.&lt;/p&gt;
&lt;h3 id=&#34;42-how-does-the-use-of-gre-impact-mtu-and-mss-requirements&#34;&gt;
    &lt;a href=&#34;#42-how-does-the-use-of-gre-impact-mtu-and-mss-requirements&#34;&gt;#&lt;/a&gt;
    4.2. How does the use of GRE impact MTU and MSS requirements?
&lt;/h3&gt;&lt;p&gt;Like any protocol, using GRE adds a few bytes to the size of data packets. This must be factored into the MSS and MTU settings for packets. If the MTU is 1,500 bytes and the MSS is 1,460 bytes (to account for the size of the necessary IP and &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/tcp-ip/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP&lt;/a&gt; headers), the addition of GRE 24-byte headers will cause the packets to exceed the MTU:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1,460 bytes [payload] + 20 bytes [TCP header] + 20 bytes [IP header] + 24 bytes [GRE header + IP header] = 1,524 bytes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As a result, the packets will be fragmented. Fragmentation slows down packet delivery times and increases how much compute power is used, because packets that exceed the MTU must be broken down and then reassembled.&lt;/p&gt;
&lt;p&gt;This can be avoided by reducing the MSS to accommodate the GRE headers. If the MSS is set to 1,436 instead of 1,460, the GRE headers will be accounted for and the packets will not exceed the MTU of 1,500:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1,436 bytes [payload] + 20 bytes [TCP header] + 20 bytes [IP header] + 24 bytes [GRE header + IP header] = 1,500 bytes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While fragmentation is avoided, the result is that payloads are slightly smaller, meaning it will take extra packets to deliver data. For instance, if the goal is to deliver 150,000 bytes of content (or about 150 kB), and if the MTU is set to 1,500 and no other layer 3 protocols are used, compare how many packets are necessary when GRE is used versus when it is not used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Without GRE, MSS 1,460: &lt;strong&gt;103&lt;/strong&gt; packets&lt;/li&gt;
&lt;li&gt;With GRE, MSS 1,436: &lt;strong&gt;105&lt;/strong&gt; packets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The extra two packets add milliseconds of delay to the data transfer. However, the usage of GRE may allow these packets to take faster network paths than they could otherwise take, which can make up for the lost time.&lt;/p&gt;
&lt;h2 id=&#34;5-ssh-tunneling----application-layer&#34;&gt;
    &lt;a href=&#34;#5-ssh-tunneling----application-layer&#34;&gt;#&lt;/a&gt;
    5. SSH Tunneling  - Application layer
&lt;/h2&gt;&lt;p&gt;The Secure Shell (SSH) protocol sets up encrypted connections between client and server, and can also be used to set up a secure tunnel. SSH operates at layer 7 of the OSI model, the application layer. By contrast, IPsec, IP-in-IP, and GRE operate at the network layer.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Secure Shell&lt;/a&gt; (SSH) tunnel&lt;/em&gt; consists of an encrypted tunnel created through an &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SSH protocol&lt;/a&gt; connection. Users may set up SSH tunnels to transfer &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Unencrypted&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;unencrypted&lt;/a&gt; traffic over a network through an &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Encrypted&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;encrypted&lt;/a&gt; channel. It is a software-based approach to network security and the result is transparent encryption.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is IPsec? | How IPsec VPNs work | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-tunneling/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is tunneling? | Tunneling in networking | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Tunneling_protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tunneling protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-gre-tunneling/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is GRE tunneling? | How GRE protocol works | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>DDoS Attack</title>
        <link>https://blog.yorforger.cc/p/ddos-attack/</link>
        <pubDate>Sat, 09 Sep 2023 09:29:57 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/ddos-attack/</guid>
        <description>&lt;h2 id=&#34;1-ddos-attack&#34;&gt;
    &lt;a href=&#34;#1-ddos-attack&#34;&gt;#&lt;/a&gt;
    1. DDoS attack
&lt;/h2&gt;&lt;p&gt;A distributed denial-of-service (DDoS) attack is a malicious attempt to disrupt the normal traffic of a targeted server, service or network by overwhelming the target or its surrounding infrastructure with a flood of Internet traffic.&lt;/p&gt;
&lt;p&gt;When a DDoS attack happens, a large volume of traffic is sent to a website. The site under attack typically crashes because the increased traffic exhausts the bandwidth limit or overloads the website’s servers.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/7kB9-nQJR44&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/7kB9-nQJR44?si=R8qrLRhRwlqofAu5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://youtu.be/7kB9-nQJR44?si=R8qrLRhRwlqofAu5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-how-does-a-ddos-attack-work&#34;&gt;
    &lt;a href=&#34;#2-how-does-a-ddos-attack-work&#34;&gt;#&lt;/a&gt;
    2. How does a DDoS attack work?
&lt;/h2&gt;&lt;p&gt;DDoS attacks are carried out with networks of Internet-connected machines.&lt;/p&gt;
&lt;p&gt;These networks consist of computers and other devices (such as IoT devices)which have been infected with &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/malware/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;malware&lt;/a&gt;, allowing them to be controlled remotely by an attacker. These individual devices are referred to as &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/bots/what-is-a-bot/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bots&lt;/a&gt; (or zombies), and a group of bots is called a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-botnet/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;botnet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once a botnet has been established, the attacker is able to direct an attack by sending remote instructions to each bot.&lt;/p&gt;
&lt;p&gt;When a victim’s server or network is targeted by the botnet, each bot sends requests to the target’s &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/glossary/what-is-my-ip-address/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IP address&lt;/a&gt;, potentially causing the server or network to become overwhelmed, resulting in a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/denial-of-service/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;denial-of-service&lt;/a&gt; to normal traffic.&lt;/p&gt;
&lt;p&gt;Because each bot is a legitimate Internet device, separating the attack traffic from normal traffic can be difficult.&lt;/p&gt;
&lt;h2 id=&#34;3-how-to-identify-a-ddos-attack&#34;&gt;
    &lt;a href=&#34;#3-how-to-identify-a-ddos-attack&#34;&gt;#&lt;/a&gt;
    3. How to identify a DDoS attack
&lt;/h2&gt;&lt;p&gt;The most obvious symptom of a DDoS attack is a site or service suddenly becoming slow or unavailable. But since a number of causes — such a legitimate spike in traffic — can create similar performance issues, further investigation is usually required. Traffic analytics tools can help you spot some of these telltale signs of a DDoS attack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suspicious amounts of traffic originating from a single IP address or IP range&lt;/li&gt;
&lt;li&gt;A flood of traffic from users who share a single behavioral profile, such as device type, geolocation, or web browser version&lt;/li&gt;
&lt;li&gt;An unexplained surge in requests to a single page or endpoint&lt;/li&gt;
&lt;li&gt;Odd traffic patterns such as spikes at odd hours of the day or patterns that appear to be unnatural (e.g. a spike every 10 minutes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-challenge-collapsar-cc-attack---ddos&#34;&gt;
    &lt;a href=&#34;#4-challenge-collapsar-cc-attack---ddos&#34;&gt;#&lt;/a&gt;
    4. Challenge Collapsar (CC) attack - DDoS
&lt;/h2&gt;&lt;p&gt;A Challenge Collapsar (CC) attack is an attack where standard HTTP requests are sent to a targeted web server frequently.&lt;/p&gt;
&lt;p&gt;In 2004, a Chinese hacker nicknamed KiKi invented a hacking tool to send these kinds of requests to attack a NSFOCUS firewall named &lt;em&gt;Collapsar&lt;/em&gt;, and thus the hacking tool was known as &lt;em&gt;Challenge Collapsar&lt;/em&gt;, or &lt;em&gt;CC&lt;/em&gt; for short. Consequently, this type of attack got the name &lt;em&gt;CC attack&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDoS is not a specific attack, but a general term for a large types of attacks. There are dozens of types, and new attack methods are constantly being invented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;41-intercept-cc-attack---intercept-http-request&#34;&gt;
    &lt;a href=&#34;#41-intercept-cc-attack---intercept-http-request&#34;&gt;#&lt;/a&gt;
    4.1. Intercept cc attack - intercept http request
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;(1) Hardware firewall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set a physical firewall before your server machine which used to filter request, this is best way but most expensive too.&lt;/p&gt;
&lt;p&gt;**(2) Software firewall **&lt;/p&gt;
&lt;p&gt;Almost all OS has firewall installed，Linux server usually use &lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/index.php/Iptables_%28%e7%ae%80%e4%bd%93%e4%b8%ad%e6%96%87%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iptables&lt;/a&gt;, intercept request from IP address  &lt;code&gt;1.2.3.4&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ iptables -A INPUT -s 1.2.3.4 -j DROP
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;(3) Web server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web can also used to intercept IP address &lt;code&gt;1.2.3.4&lt;/code&gt;, on nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  deny 1.2.3.4;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;On Apache, modify the  &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;RequireAll&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Require all granted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Require not ip 1.2.3.4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/RequireAll&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Web server have a impact impact on the performance when used in firewall and cannot protect when there are huge DDoS attack.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.ruanyifeng.com/blog/2018/06/ddos.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ruanyifeng.com/blog/2018/06/ddos.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is a distributed denial-of-service (DDoS) attack? | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is a distributed denial-of-service (DDoS) attack? | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Denial-of-service_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Denial-of-service attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>TUN/TAP Devices</title>
        <link>https://blog.yorforger.cc/p/tun/tap-devices/</link>
        <pubDate>Fri, 08 Sep 2023 17:54:59 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/tun/tap-devices/</guid>
        <description>&lt;h2 id=&#34;1-tuntap-devices&#34;&gt;
    &lt;a href=&#34;#1-tuntap-devices&#34;&gt;#&lt;/a&gt;
    1. TUN/TAP Devices
&lt;/h2&gt;&lt;p&gt;In computer networking, &lt;strong&gt;TUN&lt;/strong&gt; and &lt;strong&gt;TAP&lt;/strong&gt; are two different kernel &lt;strong&gt;virtual network devices&lt;/strong&gt;. Though both are for tunneling purposes, TUN and TAP can&amp;rsquo;t be used together because they transmit and receive packets at different layers of the network stack. TUN (network TUNnel) devices are used for IP packet-level tunneling, while TAP (network TAP) devices are used for Ethernet frame-level tunneling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A network interface can be a physical device, called network interface controller (NIC), such as an ethernet card or wireless adapter, or a virtual device, such as a TUN or TAP interface.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://www.baeldung.com/linux/create-check-network-interfaces&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.baeldung.com/linux/create-check-network-interfaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TUN/TAP provides packet reception and transmission for user space programs. It can be seen as a simple Point-to-Point or Ethernet device, which, instead of receiving packets from physical media, receives them from user space program and instead of sending packets via physical media writes them to the user space program. It interacts with user space program not the kernel.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://docs.kernel.org/networking/tuntap.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.kernel.org/networking/tuntap.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-tuntap--network-stack&#34;&gt;
    &lt;a href=&#34;#2-tuntap--network-stack&#34;&gt;#&lt;/a&gt;
    2. TUN/TAP &amp;amp; Network Stack
&lt;/h2&gt;&lt;p&gt;TUN/TAP is an operating-system interface for creating network interfaces managed by userspace. This is usually used to implement userspace Virtual Private Networks[&lt;a class=&#34;link&#34; href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/#fn1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;1]&lt;/a&gt; (VPNs), for example with &lt;a class=&#34;link&#34; href=&#34;https://openvpn.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenVPN&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.gabriel.urdhr.fr/2017/08/02/foo-over-ssh/#tuntap-forwarding&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenSSH&lt;/a&gt; (&lt;code&gt;Tunnel&lt;/code&gt; configuration or &lt;code&gt;-w&lt;/code&gt; argument), &lt;a class=&#34;link&#34; href=&#34;https://code.ffdn.org/l2tpns/l2tpns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;l2tpns&lt;/a&gt;, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Processes                                  |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ↕ Socket interface
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Network Stack (kernel)                      |&amp;lt;--+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---------------------------------------------+   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ↕ Eth. frame     ↕ Eth. frame    ↕ IP packet    |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+ +-------------+ +------------+   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| enp2s0       | | tap0        | | tun0       |   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+ +-------------+ +------------+   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ↑ Eth. frame     ↕ Eth. frame¹   ↕ IP packet¹   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+ +-------------+ +------------+   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Driver       | | Process     | | Process    |   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+ +-------------+ +------------+   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ↕ Eth. frame²    ↑               ↑              |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+   +---------------+--------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Eth. Adapter  |  (encapsulated packets)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ↕ Eth. frame
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Eth. Network |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Physical netdev    Ethernet VPN      IP VPN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;¹: via /dev/net/tun
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;²: over PCI Express for example
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;There are many applications running on our OS (reside in user space), they send network packets with socket interface (on linux). All the packets through &lt;strong&gt;socket interface&lt;/strong&gt; will go to one place: the &lt;strong&gt;Network Stack&lt;/strong&gt; (resides in kernel). And the packets from the Network Stack only have two direction to go, one is the physical network interfce (&lt;strong&gt;NIC&lt;/strong&gt;), another direction is the virtual network devices &lt;strong&gt;tap/tun&lt;/strong&gt;, and we can get the packets from tap/tun which usually used in VPN application (resides in user space). Of course, VPN applicatipn (user space) can write packet into &lt;strong&gt;tap/tun&lt;/strong&gt; devices and after written into tap/tun the packet will goes to &lt;strong&gt;Network Stack&lt;/strong&gt;, and there are two direction again&amp;hellip;&lt;/p&gt;
&lt;p&gt;You probably notice that if we use TUN/TAP devices to handle the packets from other normal  applications, the packet seem to go through the Network Stack twice: the normal applications write data into socket interface and these packets will go through Netwok Stack and intercepted by TUN/TAP devices, then after vpn handles these packets, these packet will be sent to Network Stack again, which probably not efficient. (Notice that in qemu-kvm, tap device works with bridge, and the packets goes to bridge directly without going through Network Stack which is more efficient)&lt;/p&gt;
&lt;p&gt;Applications send or receive packet to/from socket interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_PACKET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_RAW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IPPROTO_IP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;VPN application send or receive packet to/from tun devices:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Request a TUN device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/dev/net/tun&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// receives a (single) packet or frame from the virtual network interface;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Read an IP packet (because TUN works on IP layer):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BUFFLEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sends a (single) packet or frame to the virtual network interface;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TUN/TAP interface (on Linux) - /dev/posts/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-tun-vs-tap&#34;&gt;
    &lt;a href=&#34;#3-tun-vs-tap&#34;&gt;#&lt;/a&gt;
    3. TUN vs. TAP
&lt;/h2&gt;&lt;p&gt;There are two types of virtual network interfaces managed by &lt;code&gt;/dev/net/tun&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TUN interfaces transport IP packets (layer 3);&lt;/li&gt;
&lt;li&gt;TAP interfaces transport Ethernet frames (layer 2).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-tun-interfaces-l3&#34;&gt;
    &lt;a href=&#34;#31-tun-interfaces-l3&#34;&gt;#&lt;/a&gt;
    3.1. TUN interfaces (L3)
&lt;/h3&gt;&lt;p&gt;TUN interfaces (&lt;code&gt;IFF_TUN&lt;/code&gt;) transport layer 3 (L3) Protocol Data Units (PDUs):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in practice, it transports IPv4 and/or IPv6 packets;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt; gets a L3 PDU (an IP packet);&lt;/li&gt;
&lt;li&gt;you must &lt;code&gt;write()&lt;/code&gt; L3 PDUs (an IP packet);&lt;/li&gt;
&lt;li&gt;there is no layer 2 (Ethernet, etc.) involved in the interface;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-tap-interfaces-l2&#34;&gt;
    &lt;a href=&#34;#32-tap-interfaces-l2&#34;&gt;#&lt;/a&gt;
    3.2. TAP interfaces (L2)
&lt;/h3&gt;&lt;p&gt;TAP interfaces (&lt;code&gt;IFF_TUN&lt;/code&gt;) transport layer 2 (L2) PDUs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in practice, it transports Ethernet frames (i.e. this is a virtual Ethernet adapter);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt; gets a L2 PDU;&lt;/li&gt;
&lt;li&gt;you must &lt;code&gt;write()&lt;/code&gt; L2 PDUs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TUN/TAP interface (on Linux) - /dev/posts/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-set-up-tuntap-devices&#34;&gt;
    &lt;a href=&#34;#4-set-up-tuntap-devices&#34;&gt;#&lt;/a&gt;
    4. Set up TUN/TAP devices
&lt;/h2&gt;&lt;p&gt;Because TUN is a layer 3 connection, it acts as a point-to-point link. We’ll assign these parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local address (for your machine): 192.0.2.1&lt;/li&gt;
&lt;li&gt;remote address (for Scapy): 192.0.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Linux, you would use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; tun0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0  up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;On BSD and macOS, use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ifconfig tun0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ifconfig tun0 192.0.2.1 192.0.2.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sudo ifconfig tun0 192.0.2.1 192.0.2.2 up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://scapy.readthedocs.io/en/latest/layers/tuntap.html#tuntapinterface-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://scapy.readthedocs.io/en/latest/layers/tuntap.html#tuntapinterface-reference&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>实现ssh免密登陆 ssh如何验证远程主机真实性</title>
        <link>https://blog.yorforger.cc/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</link>
        <pubDate>Sat, 03 Jun 2023 17:14:27 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</guid>
        <description>&lt;h3 id=&#34;1-ssh-应对中间人攻击的方法&#34;&gt;
    &lt;a href=&#34;#1-ssh-%e5%ba%94%e5%af%b9%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;
    1. SSH 应对中间人攻击的方法
&lt;/h3&gt;&lt;p&gt;SSH 采用了公钥加密, 过程如下：&lt;/p&gt;
&lt;p&gt;（1）Remote Host 收到用户的登录请求, 把自己的公钥发给用户&lt;/p&gt;
&lt;p&gt;（2）用户使用这个公钥, 将登录密码加密后, 发送过去&lt;/p&gt;
&lt;p&gt;（3）Remote Host 用自己的私钥, 解密信息, 验证密码是否正确&lt;/p&gt;
&lt;p&gt;这个过程存在一个漏洞：如果有人截获了用户的登录请求，然后冒充 Remote Host，将伪造的公钥发给用户，那么用户很难辨别真伪。这就是 Man-in-the-middle attack, 应对方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用公钥指纹人工进行对比验证,&lt;/li&gt;
&lt;li&gt;上传公钥实现免密登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们一一介绍这两种方法,&lt;/p&gt;
&lt;h2 id=&#34;2-利用公钥指纹人工进行对比验证&#34;&gt;
    &lt;a href=&#34;#2-%e5%88%a9%e7%94%a8%e5%85%ac%e9%92%a5%e6%8c%87%e7%ba%b9%e4%ba%ba%e5%b7%a5%e8%bf%9b%e8%a1%8c%e5%af%b9%e6%af%94%e9%aa%8c%e8%af%81&#34;&gt;#&lt;/a&gt;
    2. 利用公钥指纹人工进行对比验证
&lt;/h2&gt;&lt;p&gt;看来面的例子, 在Mac上通过ssh连接远程的服务器, 第一次连接的时候会问下面提示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Are you sure you want to &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; connecting &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yes/no/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;fingerprint&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;? yes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 ssh 在提醒它无法确认 remost host 是不是就是你要连接的那个主机, 因为可能会发生中间人攻击嘛, 但知道它的公钥指纹是&lt;code&gt;sa5vDYS0...&lt;/code&gt;, 问我们还要继续连接吗 (注意单词 establish 在这是 “认证确认” 的意思),&lt;/p&gt;
&lt;p&gt;那我们怎么知道远程主机的公钥指纹应该是多少？当然是去你的服务器上查看公钥指纹:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ root@vultr.guest &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意如果你的服务器使用的是其他hash function生成的公钥指纹, 那你就要查看其他文件了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -E md5 -lf /etc/ssh/ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以发现输出内容与上面 ssh 警告的指纹相同, 所以我们要来接的这个是我们的真正主机,&lt;/p&gt;
&lt;p&gt;可能有人会说, 那我们买的服务器物理主机在谷歌阿里, 怎么去直接验证?  你可以在你购买VPS的网站上连接自己服务器保证你连接的一定是你的主机, 但我们只是测试, 所以你直接忽略 ssh 的提示警告, 输入yes, 连上服务器后去验证一下就好了, 因为肯定不会有中间人闲的蛋疼来攻击我们的连接吧? 几块钱一个月的服务器, 谁来攻击你,&lt;/p&gt;
&lt;p&gt;有人可能又会疑问, 那我们也可以直接去远程主机查看他的公钥啊, 为啥还要用个hash函数来生成它的指纹, 再去比对, 不是多此一举吗? 首先你没发现公钥的指纹很短吗? 我们去远程主机验证一般是用肉眼来比对吧, 那公钥那么长, 几百个字符, 很容易比对错, 而公钥指纹的主要目的就在于它很短, 方便我们比对,&lt;/p&gt;
&lt;p&gt;最后关于 ssh 输出的信息, 还有其它想说的, 根据输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该 remote host 上的 ssh 使用的公私钥是由 ED25519 算法生成的, ED25519 是非对称加密算法, 常见的非对称加密算法还有 RSA, 所以 RSA 和 ED25519 是并列的: Today, the RSA is the most widely used public-key algorithm for SSH key. But compared to Ed25519, it&amp;rsquo;s slower and even considered not safe if it&amp;rsquo;s generated with the key smaller than 2048-bit length. EdDSA is a digital signature scheme, Ed25519 is the EdDSA signature scheme using SHA-512 (SHA-2) and Curve25519. &amp;ndash;Wiki&lt;/p&gt;
&lt;p&gt;另外, 该公钥指纹是由 SHA256 hash function 生成的, 另外常见的 hash function 还有md5,&lt;/p&gt;
&lt;h3 id=&#34;21-验证公私钥位置&#34;&gt;
    &lt;a href=&#34;#21-%e9%aa%8c%e8%af%81%e5%85%ac%e7%a7%81%e9%92%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    2.1. 验证公私钥位置
&lt;/h3&gt;&lt;p&gt;这个时候我们在电脑终端输入yes, 然后就会提示输入密码 (比如root用户对应的密码), 然后系统会提示如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Warning: Permanently added &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@144.202.16.29&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last login: Fri Apr  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 20:36:06 &lt;span class=&#34;m&#34;&gt;2023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当远程主机的公钥被接受以后, 它会被保存在文件&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;之中, 下次再连接这台主机, 系统就会认出它的公钥已经保存在本地了, 从而跳过警告部分, 直接提示输入密码, 我们来查看Mac上的输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls ~/.ssh 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;id_rsa          id_rsa.pub      known_hosts     known_hosts.old
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat ~/.ssh/known_hosts 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-ed25519 AAAAC3NzaC1lZDI1N...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ecdsa-sha2-nistp256 AAAAE2VjZH....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAADA....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再看看服务器上的输出,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls /etc/ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;moduli            ssh_host_dsa_key.pub    ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_config        ssh_host_ecdsa_key      ssh_host_rsa_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sshd_config       ssh_host_ecdsa_key.pub  ssh_host_rsa_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_host_dsa_key  ssh_host_ed25519_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ed25519_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ecdsa_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这两个一个是公钥, 一个是公钥的指纹, 可以看出和上面Mac的存储的内容是一样, 然后上面在服务器 &lt;code&gt;ls /etc/ssh&lt;/code&gt; 的输出, 有 &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;, &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt; 这就是使用不同的算法产生的不同的key,&lt;/p&gt;
&lt;p&gt;最后 Mac 上 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 的输出 github 那部分有 ssh-ed25519, ecdsa-sha2-nistp256, 这是什么呢?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For &lt;code&gt;ssh-ed25519&lt;/code&gt; and &lt;code&gt;ecdsa-sha2-nistp256&lt;/code&gt; which one is used for a given connection depends on the capabilities and preferences of the client, namely your ssh program. If you are using &lt;code&gt;OpenSSH&lt;/code&gt; versions 6.5 to 8.1, then it prefers &lt;code&gt;ecdsa&lt;/code&gt; then &lt;code&gt;ed25519&lt;/code&gt;, and only 8.2 up prefers &lt;code&gt;ed25519&lt;/code&gt; first. &lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1688106/why-does-github-recommend-ed25519-ssh-key-encryption-scheme-but-itself-uses-ecd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why does GitHub recommend ed25519 SSH key encryption scheme, but itself uses ECDSA? - Super User&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ecdsa-sha2-nistp256: Specifies the ECDSA algorithm with 256-bit key strength&lt;/li&gt;
&lt;li&gt;rsa: Specifies the public key algorithm rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-public-key-authentication-上传公钥实现免密登陆&#34;&gt;
    &lt;a href=&#34;#3-public-key-authentication-%e4%b8%8a%e4%bc%a0%e5%85%ac%e9%92%a5%e5%ae%9e%e7%8e%b0%e5%85%8d%e5%af%86%e7%99%bb%e9%99%86&#34;&gt;#&lt;/a&gt;
    3. Public Key Authentication (上传公钥实现免密登陆)
&lt;/h2&gt;&lt;h3 id=&#34;31-过程分析&#34;&gt;
    &lt;a href=&#34;#31-%e8%bf%87%e7%a8%8b%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;
    3.1. 过程分析
&lt;/h3&gt;&lt;p&gt;使用密码登录, 每次都必须输入密码, 非常麻烦, 好在SSH还提供了公钥登录, 可以省去输入密码的步骤, 具体验证过程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client generates a public/private key pair, typically with RSA or ECC. The client keeps the private key secret and registers the public key with the SSH server.&lt;/li&gt;
&lt;li&gt;When the client connects to the server, the server authenticates the client by checking if it has the corresponding public key registered for that client.&lt;/li&gt;
&lt;li&gt;The server will send a challenge message to the client, requesting authentication.&lt;/li&gt;
&lt;li&gt;The client will take the challenge message and use its private key to generate a digital signature. This proves that the client has the correct private key without revealing the key itself.&lt;/li&gt;
&lt;li&gt;The client sends the digital signature back to the server as a response to the challenge.&lt;/li&gt;
&lt;li&gt;The server verifies the signature using the client&amp;rsquo;s registered public key. If the signature is validated, the server knows the client has proven possession of the corresponding private key and grants it access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意关于验证过程, 不同 ssh 版本可能会有不同的实现, 你可能会看到有人说远程主机用 用户的公钥进行解密验证, 其实公钥并不可以用来解密, 别人指的应该是公钥可以用来验证数字签名, 即这种情况下私钥加密其实应该是私钥签名。 私钥 “加密” 以后，谁用公钥都可以打开，就已经失去了加密的意义，所以它只能起到一个“签名”的效果，来达到-大家知道这条信息是我，而且只有我发出的。&lt;/p&gt;
&lt;p&gt;记住公钥只能用来加密, 不可以用来解密, 不然就不叫公钥了, 所以是远程主机用 用户的公钥进行用户的验证数字签名, 总结公钥有俩功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;验证数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-具体操作&#34;&gt;
    &lt;a href=&#34;#32-%e5%85%b7%e4%bd%93%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;
    3.2. 具体操作
&lt;/h3&gt;&lt;p&gt;远程主机需要使用用户的公钥来验证用户的身份, 所以&lt;strong&gt;本地机器&lt;/strong&gt;要生成公私钥:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# generate ssh keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一路回车之后在&lt;code&gt;~/.ssh/&lt;/code&gt;会新生成两个文件：&lt;code&gt;id_rsa.pub&lt;/code&gt;和&lt;code&gt;id_rsa&lt;/code&gt;, 前者是你的公钥, 后者是你的私钥, 这时再输入下面的命令, 将公钥传送到远程主机host上面:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-copy-id root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;完成, 之后再登录就不需要输入密码了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;其实你也可以直接编辑远程主机 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 文件, 把你本地主机的公钥的内容添加进去就行了, &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 做的就是这件事. 下面我们会验证.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-authorized_keys-file&#34;&gt;
    &lt;a href=&#34;#4-authorized_keys-file&#34;&gt;#&lt;/a&gt;
    4. &lt;code&gt;authorized_keys&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;上面 &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 执行后, 本机公钥存储在了远程主机&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls -a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.   .bash_history  .bash_profile  .cache  .pki  .tcshrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;..  .bash_logout   .bashrc        .cshrc  .ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat .ssh/authorized_keys &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在Mac上查看我自己的公钥, 是一样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat id_rsa.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5-ssh_config-vs-sshd_config-file&#34;&gt;
    &lt;a href=&#34;#5-ssh_config-vs-sshd_config-file&#34;&gt;#&lt;/a&gt;
    5. &lt;code&gt;ssh_config&lt;/code&gt; vs &lt;code&gt;sshd_config&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;I would like to change my SSH port running Linux CentOS 6. I also noticed there&amp;rsquo;s an &lt;code&gt;/etc/ssh_config&lt;/code&gt; file along with &lt;code&gt;/etc/sshd_config&lt;/code&gt;. What&amp;rsquo;s the difference between the two? Should I change both?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sshd_config&lt;/code&gt; is the ssh &lt;em&gt;&lt;strong&gt;daemon&lt;/strong&gt;&lt;/em&gt; (or ssh server process) configuration file. As you&amp;rsquo;ve already stated, this is the file you&amp;rsquo;ll need to modify to change the server port.&lt;/p&gt;
&lt;p&gt;Whereas, the &lt;code&gt;ssh_config&lt;/code&gt; file is the ssh &lt;em&gt;&lt;strong&gt;client&lt;/strong&gt;&lt;/em&gt; configuration file. The client configuration file only has bearing on when you use the &lt;code&gt;ssh&lt;/code&gt; command to connect to another ssh host. So, in this case, you don&amp;rsquo;t need to modify it. It will be &lt;em&gt;other&lt;/em&gt; client machines connecting to your server.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://serverfault.com/questions/343533/changing-ssh-port-should-i-modify-only-sshd-config-or-also-ssh-config&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Should I modify only sshd_config, or also ssh_config?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/EdDSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Digital_signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/a/1688126&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://superuser.com/a/1688126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Man-in-the-middle attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bitlaunch.io/blog/how-to-check-your-ssh-key-fingerprint/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to check your SSH key fingerprint (verify the authenticity of the remote host)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
