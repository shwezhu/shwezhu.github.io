<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cryptography on David&#39;s Blogs</title>
        <link>https://demo.stack.jimmycai.com/tags/cryptography/</link>
        <description>Recent content in Cryptography on David&#39;s Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 07 Oct 2023 08:30:26 +0000</lastBuildDate><atom:link href="https://demo.stack.jimmycai.com/tags/cryptography/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>HTTPS SSL TLS</title>
        <link>https://demo.stack.jimmycai.com/p/https-ssl-tls/</link>
        <pubDate>Sat, 07 Oct 2023 08:30:26 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/https-ssl-tls/</guid>
        <description>&lt;h2 id=&#34;1-http-vs-https&#34;&gt;
    &lt;a href=&#34;#1-http-vs-https&#34;&gt;#&lt;/a&gt;
    1. HTTP vs HTTPS
&lt;/h2&gt;&lt;p&gt;Strictly speaking, HTTPS is not a separate protocol, but refers to use of ordinary HTTP over an encrypted SSL/TLS connection.&lt;/p&gt;
&lt;p&gt;Port 80 is typically used for unencrypted &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP&lt;/a&gt; traffic while port 443 is the common port used for encrypted HTTP traffic which is called  &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/HTTPS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that TLS is the successor of SSL, you can simply think they are same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/HTTPS#Network_layers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/HTTPS#Network_layers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-what-is-tlsssl&#34;&gt;
    &lt;a href=&#34;#2-what-is-tlsssl&#34;&gt;#&lt;/a&gt;
    2. What is TLS/SSL
&lt;/h2&gt;&lt;p&gt;SSL (Secure Sockets Layer) and its successor, TLS (Transport Layer Security), are protocols for establishing &lt;em&gt;&lt;strong&gt;authenticated&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;encrypted&lt;/strong&gt;&lt;/em&gt; links between networked computers.&lt;/p&gt;
&lt;p&gt;HTTPS, HTTP, and TLS are all protocols. HTTPS utilizes the encryption and digital authentication provided by SSL/TLS, while SSL/TLS utilizes some cryptographic algorithms within the protocol in different phases, such as RSA is used at session key exchange stage, AES is used during data transfer. Encryption can be further divided into two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Symmetric Encryption Algorithms: AES, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asymmetric Encryption Algorithms (public key cryptography): RSA, ECC, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-the-process-of-establishing-a-https-connection&#34;&gt;
    &lt;a href=&#34;#3-the-process-of-establishing-a-https-connection&#34;&gt;#&lt;/a&gt;
    3. The process of establishing a HTTPS connection
&lt;/h2&gt;&lt;p&gt;When we click a link on our browser will send a or multiple http requets to the target server, then the server will responds us with html file or some images or other resources. But transfer data there are other things needed to do under the hood:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A tcp connection needed to be established (envolves three way handshake).&lt;/li&gt;
&lt;li&gt;Make a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TLS handshake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;After TLS handshake,  the secure communication begins (client makes http request, server makes response).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the TLS handshake, the client generates a session key and encrypts it with the public key of the server and then send the encrypted session key string to the server, then the server decrypt this  string to get the actual session key. Then they make communication with this session key. Now you should understand why I say TLS/SSL use both RSA and AES encryption algorithms at different phrases in previous part.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that SSL/TLS is a stateful protocol, whereas HTTP/HTTPS is a stateless protocol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS/SSL is stateful.&lt;/strong&gt; The web server and the client (browser) cache the session including the cryptographic keys to improve performance and do &lt;strong&gt;not&lt;/strong&gt; perform key exchange for every request. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/33681674/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-details-in-tls-handshake---avoid-man-in-middle-attack&#34;&gt;
    &lt;a href=&#34;#4-details-in-tls-handshake---avoid-man-in-middle-attack&#34;&gt;#&lt;/a&gt;
    4. Details in TLS handshake - avoid man-in-middle attack
&lt;/h2&gt;&lt;p&gt;I have talked man-in-middle attack in other &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/002-ssh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;post&lt;/a&gt;, when a ssh connection is being established at the first time, it will notify us the fingerprint of the server which enables us can make sure to we are connecting the right server. But it&amp;rsquo;s a little diffenent in SSL/TLS (HTTPS). The authenciation happens in the TLS handshake, the authenciation here means to prevent man-in-the-middle attack by verifying the identity of the remote server.&lt;/p&gt;
&lt;p&gt;Once the client and server have agreed to use TLS, they negotiate a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/State_%28computer_science%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stateful&lt;/a&gt; connection by using a handshaking procedure (see &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TLS handshake&lt;/a&gt;). The protocols use a handshake with an &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Asymmetric_cipher&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;asymmetric cipher&lt;/a&gt; to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Symmetric_cipher&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;symmetric cipher&lt;/a&gt;. During this handshake, the client and server agree on various parameters used to establish the connection&amp;rsquo;s security:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The handshake begins when a client connects to a TLS-enabled server requesting a secure connection and the client presents a list of supported &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Cipher_suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cipher suites&lt;/a&gt; (&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Encryption&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ciphers&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Hash_function&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hash functions&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;From this list, the server picks a cipher and hash function that it also supports and notifies the client of the decision.&lt;/li&gt;
&lt;li&gt;The server usually then provides identification in the form of a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Public_key_certificate&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;digital certificate&lt;/a&gt;. The certificate contains the &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Hostname&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;server name&lt;/a&gt;, the trusted &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Certificate_authority&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;certificate authority&lt;/a&gt; (CA) that vouches for the authenticity of the certificate, and the server&amp;rsquo;s public encryption key. (&lt;strong&gt;The digital certificate here is know as SSL/TLS certificate&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;The client confirms the validity of the certificate before proceeding. (&lt;strong&gt;The client verifies the identity of the remote server by check the digital certificate which is called SSL/TLS certificate here&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;To generate the session keys used for the secure connection, the client either:
&lt;ul&gt;
&lt;li&gt;encrypts a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Random_number_generation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;random number&lt;/a&gt; (&lt;em&gt;PreMasterSecret&lt;/em&gt;) with the server&amp;rsquo;s public key and sends the result to the server (which only the server should be able to decrypt with its private key); both parties then use the random number to generate a unique session key for subsequent encryption and decryption of data during the session, or&lt;/li&gt;
&lt;li&gt;uses &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Diffie%e2%80%93Hellman_key_exchange&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Diffie–Hellman key exchange&lt;/a&gt; (or its variant &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%e2%80%93Hellman&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;elliptic-curve DH&lt;/a&gt;) to securely generate a random and unique session key for encryption and decryption that has the additional property of &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Forward_secrecy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forward secrecy&lt;/a&gt;: if the server&amp;rsquo;s private key is disclosed in future, it cannot be used to decrypt the current session, even if the session is intercepted and recorded by a third party.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concludes(ends) the handshake and begins the secured connection, which is encrypted and decrypted with the session key until the connection closes. If any one of the above steps fails, then the TLS handshake fails and the connection is not created.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Transport_Layer_Security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-two-ways-to-get-ssltls-certificate&#34;&gt;
    &lt;a href=&#34;#5-two-ways-to-get-ssltls-certificate&#34;&gt;#&lt;/a&gt;
    5. Two ways to get SSL/TLS certificate
&lt;/h2&gt;&lt;p&gt;There are several ways to obtain an SSL/TLS certificate:&lt;/p&gt;
&lt;p&gt;Purchase from a Certificate Authority (CA): Trusted CAs offer various types of certificates, such as domain validation (DV), organization validation (OV), and extended validation (EV). A CA is an outside organization, a trusted third party, that generates and gives out SSL certificates. The CA will also digitally sign the certificate with their own private key, &lt;strong&gt;allowing client devices to verify it&lt;/strong&gt;. Once the certificate is issued, it needs to be installed and activated on the website&amp;rsquo;s origin server.&lt;/p&gt;
&lt;p&gt;Technically, anyone can create their own SSL certificate by generating a public-private key pairing and including all the information mentioned above . Such certificates are called self-signed certificates because the digital signature used, instead of being from a CA, would be the website&amp;rsquo;s own private key. While self-signed certificates provide encryption for your website or application, they are not trusted by default by web browsers or other client applications. Therefore, visitors accessing your site will typically see a warning message stating that the certificate is not trusted. Learn more: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to generate a self-signed SSL certificate using OpenSSL?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-is-https-secure-enough&#34;&gt;
    &lt;a href=&#34;#6-is-https-secure-enough&#34;&gt;#&lt;/a&gt;
    6. Is HTTPS secure enough?
&lt;/h2&gt;&lt;p&gt;Does an established HTTPS connection mean the line is really secure?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to understand what SSL does and does not do, especially since this is a very common source of misunderstanding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It encrypts the channel&lt;/li&gt;
&lt;li&gt;It applies integrity checking&lt;/li&gt;
&lt;li&gt;It provides authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the quick answer should be: &amp;ldquo;yes, it is secure enough to transmit sensitive data&amp;rdquo;. However, things are not that simple. There are a few issues here, &lt;strong&gt;the major one being authentication&lt;/strong&gt;. Both ends need to be sure they are talking to the right person or institution and no man-in-the-middle attack or CSRF attacks.&lt;/p&gt;
&lt;p&gt;HTTPS is secure in encryption. HTTPS is secure itself but if we can totally trust HTTPS connection when exhcange privacy data is another thing. Although &lt;strong&gt;no one can decrept the data without the session key&lt;/strong&gt;, there probably have man-in-the-middle attck or CSRF attck needs to be considered which make the hackers get your money without getting your sensitive data . If you can make sure the client is really that people you want talk as a server or you can make sure the server is the correct server you want to get, then https is safe. Can you make sure the server itself is a bad company? Which will sell your personal data to other perople. But this is another topic, haha, In the last I&amp;rsquo;ll share a &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/5310027/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;answer&lt;/a&gt; here which is very comprehensive:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Consider a scenario, where user authentication (username and password) is entered by the user in the page&amp;rsquo;s form element, which is then submitted. The POST data is sent via HTTPS to a new page (where the php code will check for the credentials). If a hacker sits in the network, and say has access to all the traffic, is the Application layer security (HTTPS) enough in this case ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/5310032/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Answer 1&lt;/a&gt;:&lt;/strong&gt; Yes. In an HTTPS only the handshake is done unencrypted, but even the HTTP GET/POST query&amp;rsquo;s are done encrypted.&lt;/p&gt;
&lt;p&gt;It is however impossible to hide to what server you are connecting, since he can see your packets he can see the IP address to where your packets go. If you want to hide this too you can use a proxy (though the hacker would know that you are sending to a proxy, but not where your packets go afterwards).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/5310288/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Answer 2&lt;/a&gt;:&lt;/strong&gt; HTTPS is sufficient &amp;ldquo;if&amp;rdquo; the client is secure. Otherwise someone can install a custom certificate and play man-in-the-middle.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://security.stackexchange.com/questions/5/does-an-established-https-connection-mean-a-line-is-really-secure&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Does an established HTTPS connection mean a line is really secure? - Information Security Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/5309997/post-data-encryption-is-https-enough&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;php - POST data encryption - Is HTTPS enough? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>HTTPS vs VPN vs Proxy</title>
        <link>https://demo.stack.jimmycai.com/p/https-vs-vpn-vs-proxy/</link>
        <pubDate>Sun, 10 Sep 2023 10:54:30 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/https-vs-vpn-vs-proxy/</guid>
        <description>&lt;p&gt;HTTPS is used for encryption, VPN is too. What&amp;rsquo;s difference?&lt;/p&gt;
&lt;p&gt;In previou post we talked about &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Is HTTPS Secure Enough?&lt;/a&gt;, and we concluded that https is secure itself which means no one can decrypt the data without the session key. However there still are some security issues in HTTPS, the man-in-the-middle attack, for example.&lt;/p&gt;
&lt;h2 id=&#34;why-do-i-need-a-vpn-if-https-connections-are-secure&#34;&gt;
    &lt;a href=&#34;#why-do-i-need-a-vpn-if-https-connections-are-secure&#34;&gt;#&lt;/a&gt;
    Why do I need a VPN if https connections are secure?
&lt;/h2&gt;&lt;p&gt;A VPN will secure all of the traffic between point A and point B in a tunnel. This helps ensure that you are not having your traffic intercepted by anyone at, say, the coffee shop.&lt;/p&gt;
&lt;p&gt;HTTPS is a secure protocol between your browser and a particular website.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the tunnel in VPN is not a physical entity but rather a logical concept used to describe the secure pathway created for data transmission. Because tunneling involves repackaging the traffic data into a different form, perhaps with encryption as standard, it can hide the nature of the traffic that is run through a tunnel. &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Tunneling_protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tunneling protocol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means the format of the packets transmitted between VPN clients and server are different from the format of OSI model, they are encapulated with tunneling protocol. Acts like your original packets transmitted in a magic container other people cannot know what&amp;rsquo;s in it. Acs like a tunnel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, HTTPS will only help with traffic over port 443, which mean it only provides encryption for data exchanged between a client and a specific server, it does not encrypt all your internet traffic.&lt;/p&gt;
&lt;p&gt;A VPN stops that because everything is connected securely through that pipe. The primary thing that a VPN helps with is what is know as a man in the middle attack: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Man-in-the-middle attack - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;vpn-vs-proxy&#34;&gt;
    &lt;a href=&#34;#vpn-vs-proxy&#34;&gt;#&lt;/a&gt;
    VPN vs Proxy
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;In computer networks, a proxy server is a server (a computer system or an application) that acts &lt;strong&gt;as an intermediary&lt;/strong&gt; for requests from clients seeking resources from other servers. &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Proxy_server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Proxy server&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A virtual private network (VPN) is an encrypted connection between two or more computers. VPN connections take place over public networks, but the data exchanged over the VPN is still private because it is encrypted. &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IPsec | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What a VPN does logically is turn your internet connection into a &lt;em&gt;big Ethernet cable&lt;/em&gt;. When you are logged on to a company&amp;rsquo;s VPN, the effect is similar as though you took your computer to the company&amp;rsquo;s building and directly connected it. VPNs (usually) use encryption so that intermediate systems between you and the company (such as your ISP or a malicious wireless network sniffer) cannot eavesdrop your traffic.&lt;/p&gt;
&lt;p&gt;Proxies, on the other hand, do not typically provide encryption for all traffic and may only encrypt specific types of traffic (such as HTTPS).&lt;/p&gt;
&lt;p&gt;Proxies generally work on specific types of application traffic. For example, there are HTTP proxies, DNS proxies, etc. Although there are SOCKS proxies that proxy everything&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do sites like Netflix know I&amp;rsquo;m using a VPN?&lt;/p&gt;
&lt;p&gt;This is often caused by many netflix uers use a same von to access thier streaming service.&lt;/p&gt;
&lt;p&gt;We have known that: when you are logged on to a company&amp;rsquo;s VPN, the effect is similar as though you took your computer to the company&amp;rsquo;s building and directly connected it.&lt;/p&gt;
&lt;p&gt;If eveybody drives the same car to Walmart, Walmart will sooner or later know it&amp;rsquo;s a rental car, but they cannot track this car back to you because everybody drives the car with same the plate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qr.ae/pyL1RD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why do I need VPN if https connections are secure? - Quora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/257388/what-is-the-difference-between-a-proxy-and-a-vpn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;security - What is the difference between a proxy and a VPN? - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/VPN/comments/5mh6uc/how_do_sites_like_netflix_know_im_using_a_vpn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do sites like Netflix know I&amp;rsquo;m using a VPN? : VPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>实现ssh免密登陆 ssh如何验证远程主机真实性</title>
        <link>https://demo.stack.jimmycai.com/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</link>
        <pubDate>Sat, 03 Jun 2023 17:14:27 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</guid>
        <description>&lt;h3 id=&#34;1-ssh-应对中间人攻击的方法&#34;&gt;
    &lt;a href=&#34;#1-ssh-%e5%ba%94%e5%af%b9%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;
    1. SSH 应对中间人攻击的方法
&lt;/h3&gt;&lt;p&gt;SSH 采用了公钥加密, 过程如下：&lt;/p&gt;
&lt;p&gt;（1）Remote Host 收到用户的登录请求, 把自己的公钥发给用户&lt;/p&gt;
&lt;p&gt;（2）用户使用这个公钥, 将登录密码加密后, 发送过去&lt;/p&gt;
&lt;p&gt;（3）Remote Host 用自己的私钥, 解密信息, 验证密码是否正确&lt;/p&gt;
&lt;p&gt;这个过程存在一个漏洞：如果有人截获了用户的登录请求，然后冒充 Remote Host，将伪造的公钥发给用户，那么用户很难辨别真伪。这就是 Man-in-the-middle attack, 应对方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用公钥指纹人工进行对比验证,&lt;/li&gt;
&lt;li&gt;上传公钥实现免密登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们一一介绍这两种方法,&lt;/p&gt;
&lt;h2 id=&#34;2-利用公钥指纹人工进行对比验证&#34;&gt;
    &lt;a href=&#34;#2-%e5%88%a9%e7%94%a8%e5%85%ac%e9%92%a5%e6%8c%87%e7%ba%b9%e4%ba%ba%e5%b7%a5%e8%bf%9b%e8%a1%8c%e5%af%b9%e6%af%94%e9%aa%8c%e8%af%81&#34;&gt;#&lt;/a&gt;
    2. 利用公钥指纹人工进行对比验证
&lt;/h2&gt;&lt;p&gt;看来面的例子, 在Mac上通过ssh连接远程的服务器, 第一次连接的时候会问下面提示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Are you sure you want to &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; connecting &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yes/no/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;fingerprint&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;? yes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 ssh 在提醒它无法确认 remost host 是不是就是你要连接的那个主机, 因为可能会发生中间人攻击嘛, 但知道它的公钥指纹是&lt;code&gt;sa5vDYS0...&lt;/code&gt;, 问我们还要继续连接吗 (注意单词 establish 在这是 “认证确认” 的意思),&lt;/p&gt;
&lt;p&gt;那我们怎么知道远程主机的公钥指纹应该是多少？当然是去你的服务器上查看公钥指纹:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ root@vultr.guest &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意如果你的服务器使用的是其他hash function生成的公钥指纹, 那你就要查看其他文件了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -E md5 -lf /etc/ssh/ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以发现输出内容与上面 ssh 警告的指纹相同, 所以我们要来接的这个是我们的真正主机,&lt;/p&gt;
&lt;p&gt;可能有人会说, 那我们买的服务器物理主机在谷歌阿里, 怎么去直接验证?  你可以在你购买VPS的网站上连接自己服务器保证你连接的一定是你的主机, 但我们只是测试, 所以你直接忽略 ssh 的提示警告, 输入yes, 连上服务器后去验证一下就好了, 因为肯定不会有中间人闲的蛋疼来攻击我们的连接吧? 几块钱一个月的服务器, 谁来攻击你,&lt;/p&gt;
&lt;p&gt;有人可能又会疑问, 那我们也可以直接去远程主机查看他的公钥啊, 为啥还要用个hash函数来生成它的指纹, 再去比对, 不是多此一举吗? 首先你没发现公钥的指纹很短吗? 我们去远程主机验证一般是用肉眼来比对吧, 那公钥那么长, 几百个字符, 很容易比对错, 而公钥指纹的主要目的就在于它很短, 方便我们比对,&lt;/p&gt;
&lt;p&gt;最后关于 ssh 输出的信息, 还有其它想说的, 根据输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该 remote host 上的 ssh 使用的公私钥是由 ED25519 算法生成的, ED25519 是非对称加密算法, 常见的非对称加密算法还有 RSA, 所以 RSA 和 ED25519 是并列的: Today, the RSA is the most widely used public-key algorithm for SSH key. But compared to Ed25519, it&amp;rsquo;s slower and even considered not safe if it&amp;rsquo;s generated with the key smaller than 2048-bit length. EdDSA is a digital signature scheme, Ed25519 is the EdDSA signature scheme using SHA-512 (SHA-2) and Curve25519. &amp;ndash;Wiki&lt;/p&gt;
&lt;p&gt;另外, 该公钥指纹是由 SHA256 hash function 生成的, 另外常见的 hash function 还有md5,&lt;/p&gt;
&lt;h3 id=&#34;21-验证公私钥位置&#34;&gt;
    &lt;a href=&#34;#21-%e9%aa%8c%e8%af%81%e5%85%ac%e7%a7%81%e9%92%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    2.1. 验证公私钥位置
&lt;/h3&gt;&lt;p&gt;这个时候我们在电脑终端输入yes, 然后就会提示输入密码 (比如root用户对应的密码), 然后系统会提示如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Warning: Permanently added &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@144.202.16.29&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last login: Fri Apr  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 20:36:06 &lt;span class=&#34;m&#34;&gt;2023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当远程主机的公钥被接受以后, 它会被保存在文件&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;之中, 下次再连接这台主机, 系统就会认出它的公钥已经保存在本地了, 从而跳过警告部分, 直接提示输入密码, 我们来查看Mac上的输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls ~/.ssh 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;id_rsa          id_rsa.pub      known_hosts     known_hosts.old
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat ~/.ssh/known_hosts 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-ed25519 AAAAC3NzaC1lZDI1N...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ecdsa-sha2-nistp256 AAAAE2VjZH....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAADA....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再看看服务器上的输出,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls /etc/ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;moduli            ssh_host_dsa_key.pub    ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_config        ssh_host_ecdsa_key      ssh_host_rsa_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sshd_config       ssh_host_ecdsa_key.pub  ssh_host_rsa_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_host_dsa_key  ssh_host_ed25519_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ed25519_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ecdsa_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这两个一个是公钥, 一个是公钥的指纹, 可以看出和上面Mac的存储的内容是一样, 然后上面在服务器 &lt;code&gt;ls /etc/ssh&lt;/code&gt; 的输出, 有 &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;, &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt; 这就是使用不同的算法产生的不同的key,&lt;/p&gt;
&lt;p&gt;最后 Mac 上 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 的输出 github 那部分有 ssh-ed25519, ecdsa-sha2-nistp256, 这是什么呢?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For &lt;code&gt;ssh-ed25519&lt;/code&gt; and &lt;code&gt;ecdsa-sha2-nistp256&lt;/code&gt; which one is used for a given connection depends on the capabilities and preferences of the client, namely your ssh program. If you are using &lt;code&gt;OpenSSH&lt;/code&gt; versions 6.5 to 8.1, then it prefers &lt;code&gt;ecdsa&lt;/code&gt; then &lt;code&gt;ed25519&lt;/code&gt;, and only 8.2 up prefers &lt;code&gt;ed25519&lt;/code&gt; first. &lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1688106/why-does-github-recommend-ed25519-ssh-key-encryption-scheme-but-itself-uses-ecd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why does GitHub recommend ed25519 SSH key encryption scheme, but itself uses ECDSA? - Super User&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ecdsa-sha2-nistp256: Specifies the ECDSA algorithm with 256-bit key strength&lt;/li&gt;
&lt;li&gt;rsa: Specifies the public key algorithm rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-public-key-authentication-上传公钥实现免密登陆&#34;&gt;
    &lt;a href=&#34;#3-public-key-authentication-%e4%b8%8a%e4%bc%a0%e5%85%ac%e9%92%a5%e5%ae%9e%e7%8e%b0%e5%85%8d%e5%af%86%e7%99%bb%e9%99%86&#34;&gt;#&lt;/a&gt;
    3. Public Key Authentication (上传公钥实现免密登陆)
&lt;/h2&gt;&lt;h3 id=&#34;31-过程分析&#34;&gt;
    &lt;a href=&#34;#31-%e8%bf%87%e7%a8%8b%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;
    3.1. 过程分析
&lt;/h3&gt;&lt;p&gt;使用密码登录, 每次都必须输入密码, 非常麻烦, 好在SSH还提供了公钥登录, 可以省去输入密码的步骤, 具体验证过程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client generates a public/private key pair, typically with RSA or ECC. The client keeps the private key secret and registers the public key with the SSH server.&lt;/li&gt;
&lt;li&gt;When the client connects to the server, the server authenticates the client by checking if it has the corresponding public key registered for that client.&lt;/li&gt;
&lt;li&gt;The server will send a challenge message to the client, requesting authentication.&lt;/li&gt;
&lt;li&gt;The client will take the challenge message and use its private key to generate a digital signature. This proves that the client has the correct private key without revealing the key itself.&lt;/li&gt;
&lt;li&gt;The client sends the digital signature back to the server as a response to the challenge.&lt;/li&gt;
&lt;li&gt;The server verifies the signature using the client&amp;rsquo;s registered public key. If the signature is validated, the server knows the client has proven possession of the corresponding private key and grants it access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意关于验证过程, 不同 ssh 版本可能会有不同的实现, 你可能会看到有人说远程主机用 用户的公钥进行解密验证, 其实公钥并不可以用来解密, 别人指的应该是公钥可以用来验证数字签名, 即这种情况下私钥加密其实应该是私钥签名。 私钥 “加密” 以后，谁用公钥都可以打开，就已经失去了加密的意义，所以它只能起到一个“签名”的效果，来达到-大家知道这条信息是我，而且只有我发出的。&lt;/p&gt;
&lt;p&gt;记住公钥只能用来加密, 不可以用来解密, 不然就不叫公钥了, 所以是远程主机用 用户的公钥进行用户的验证数字签名, 总结公钥有俩功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;验证数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-具体操作&#34;&gt;
    &lt;a href=&#34;#32-%e5%85%b7%e4%bd%93%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;
    3.2. 具体操作
&lt;/h3&gt;&lt;p&gt;远程主机需要使用用户的公钥来验证用户的身份, 所以&lt;strong&gt;本地机器&lt;/strong&gt;要生成公私钥:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# generate ssh keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一路回车之后在&lt;code&gt;~/.ssh/&lt;/code&gt;会新生成两个文件：&lt;code&gt;id_rsa.pub&lt;/code&gt;和&lt;code&gt;id_rsa&lt;/code&gt;, 前者是你的公钥, 后者是你的私钥, 这时再输入下面的命令, 将公钥传送到远程主机host上面:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-copy-id root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;完成, 之后再登录就不需要输入密码了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;其实你也可以直接编辑远程主机 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 文件, 把你本地主机的公钥的内容添加进去就行了, &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 做的就是这件事. 下面我们会验证.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-authorized_keys-file&#34;&gt;
    &lt;a href=&#34;#4-authorized_keys-file&#34;&gt;#&lt;/a&gt;
    4. &lt;code&gt;authorized_keys&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;上面 &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 执行后, 本机公钥存储在了远程主机&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls -a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.   .bash_history  .bash_profile  .cache  .pki  .tcshrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;..  .bash_logout   .bashrc        .cshrc  .ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat .ssh/authorized_keys &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在Mac上查看我自己的公钥, 是一样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat id_rsa.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5-ssh_config-vs-sshd_config-file&#34;&gt;
    &lt;a href=&#34;#5-ssh_config-vs-sshd_config-file&#34;&gt;#&lt;/a&gt;
    5. &lt;code&gt;ssh_config&lt;/code&gt; vs &lt;code&gt;sshd_config&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;I would like to change my SSH port running Linux CentOS 6. I also noticed there&amp;rsquo;s an &lt;code&gt;/etc/ssh_config&lt;/code&gt; file along with &lt;code&gt;/etc/sshd_config&lt;/code&gt;. What&amp;rsquo;s the difference between the two? Should I change both?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sshd_config&lt;/code&gt; is the ssh &lt;em&gt;&lt;strong&gt;daemon&lt;/strong&gt;&lt;/em&gt; (or ssh server process) configuration file. As you&amp;rsquo;ve already stated, this is the file you&amp;rsquo;ll need to modify to change the server port.&lt;/p&gt;
&lt;p&gt;Whereas, the &lt;code&gt;ssh_config&lt;/code&gt; file is the ssh &lt;em&gt;&lt;strong&gt;client&lt;/strong&gt;&lt;/em&gt; configuration file. The client configuration file only has bearing on when you use the &lt;code&gt;ssh&lt;/code&gt; command to connect to another ssh host. So, in this case, you don&amp;rsquo;t need to modify it. It will be &lt;em&gt;other&lt;/em&gt; client machines connecting to your server.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://serverfault.com/questions/343533/changing-ssh-port-should-i-modify-only-sshd-config-or-also-ssh-config&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Should I modify only sshd_config, or also ssh_config?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/EdDSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Digital_signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/a/1688126&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://superuser.com/a/1688126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Man-in-the-middle attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bitlaunch.io/blog/how-to-check-your-ssh-key-fingerprint/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to check your SSH key fingerprint (verify the authenticity of the remote host)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
