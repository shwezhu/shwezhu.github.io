<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cybersecurity on David&#39;s Blogs</title>
        <link>https://blog.yorforger.cc/tags/cybersecurity/</link>
        <description>Recent content in Cybersecurity on David&#39;s Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 04 Nov 2023 00:02:19 +0000</lastBuildDate><atom:link href="https://blog.yorforger.cc/tags/cybersecurity/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Form Data &amp; Query String</title>
        <link>https://blog.yorforger.cc/p/form-data-query-string/</link>
        <pubDate>Sat, 04 Nov 2023 00:02:19 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/form-data-query-string/</guid>
        <description>&lt;h2 id=&#34;1-form-data-vs-query-string&#34;&gt;
    &lt;a href=&#34;#1-form-data-vs-query-string&#34;&gt;#&lt;/a&gt;
    1. Form data vs query string
&lt;/h2&gt;&lt;h3 id=&#34;11-client-side&#34;&gt;
    &lt;a href=&#34;#11-client-side&#34;&gt;#&lt;/a&gt;
    1.1. Client side
&lt;/h3&gt;&lt;p&gt;Query string resides in the url:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://www.blabla.com?a=1&amp;amp;b=2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Form data is sent with the request body. Therefore, when there is sensitive data, we usually put data in the form not the query string. Because the requested URL might show up in &lt;strong&gt;Web server logs&lt;/strong&gt; and &lt;strong&gt;browser history/bookmarks&lt;/strong&gt; which is not a good thing. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/830092/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;source&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-server-side&#34;&gt;
    &lt;a href=&#34;#12-server-side&#34;&gt;#&lt;/a&gt;
    1.2. Server side
&lt;/h3&gt;&lt;h4 id=&#34;121-go-web&#34;&gt;
    &lt;a href=&#34;#121-go-web&#34;&gt;#&lt;/a&gt;
    1.2.1. Go web
&lt;/h4&gt;&lt;p&gt;For all requests, &lt;code&gt;ParseForm()&lt;/code&gt; parses the &lt;strong&gt;raw query&lt;/strong&gt; from the URL and updates r.Form. For POST, PUT, and PATCH requests, &lt;strong&gt;it also reads the request body&lt;/strong&gt;, parses it as a form and puts the results into both r.PostForm and r.Form. When the &lt;code&gt;Content-Type&lt;/code&gt; is not application/x-www-form-urlencoded, the request Body is not read.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/golang/practice/012-http-related/#4-parse-form-and-query-string&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Some HTTP Issues with Go - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;122-spring-web&#34;&gt;
    &lt;a href=&#34;#122-spring-web&#34;&gt;#&lt;/a&gt;
    1.2.2. Spring web
&lt;/h4&gt;&lt;p&gt;If your server is wiritten in Java Spring, and you need to POST form data to the server, you need to set your &lt;code&gt;Content-Type&lt;/code&gt; header of your request to &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we write test we usually use &lt;code&gt;curl&lt;/code&gt; command, looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl localhost:8080/hello -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;davidzhu&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;778899a&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;However, this command with &lt;code&gt;-d&lt;/code&gt; option will set &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;  by default, which is not accepted on Spring&amp;rsquo;s side.&lt;/p&gt;
&lt;p&gt;Therefore you have to set &lt;code&gt;Content-Type&lt;/code&gt; explicitly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl localhost:8080/postbody 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		-d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;davidzhu&amp;#34;, &amp;#34;password&amp;#34;:&amp;#34;778899a&amp;#34;}&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		-H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note the format of the &lt;code&gt;-d&lt;/code&gt; is josn format not url query string format: &lt;code&gt;&amp;quot;username=davidzhu&amp;amp;password=778899a&amp;quot;&lt;/code&gt;, this format is &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, not &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/7173011/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/7173011/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about curl post: &lt;a class=&#34;link&#34; href=&#34;https://reqbin.com/req/c-dwjszac0/curl-post-json-example&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://reqbin.com/req/c-dwjszac0/curl-post-json-example&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-post-data-to-server&#34;&gt;
    &lt;a href=&#34;#2-post-data-to-server&#34;&gt;#&lt;/a&gt;
    2. POST data to server
&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;HTTP &lt;code&gt;POST&lt;/code&gt; method&lt;/strong&gt; sends data to the server. The type of the body of the request is indicated by the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;Content-Type&lt;/code&gt;&lt;/a&gt; header.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;POST&lt;/code&gt; request is typically sent via an &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Forms&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTML form&lt;/a&gt; and results in a change on the server. In this case, the content type is selected by putting the adequate string in the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#enctype&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;enctype&lt;/code&gt;&lt;/a&gt; attribute of the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt;  element or the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formenctype&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;formenctype&lt;/code&gt;&lt;/a&gt; attribute of the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;button&lt;/code&gt;&lt;/a&gt; elements:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/008-form-post-query-string/cc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cc&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;References: &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-post-data-to-server---example&#34;&gt;
    &lt;a href=&#34;#3-post-data-to-server---example&#34;&gt;#&lt;/a&gt;
    3. POST data to server - example
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say there is a html file looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:8080/postform&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;form-example&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;form-example&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;username&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;usernam&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;form-example&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;password&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;passwor&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;form-example&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;register&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;When I push the regiser buttion to submit the form, the http request looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/008-form-post-query-string/c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;c&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/008-form-post-query-string/d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;d&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see &lt;strong&gt;the form data resides in the request body, not in the URL.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes you send data to server with query string &lt;strong&gt;or&lt;/strong&gt; with form. Although, data in this two cases reside in different places, former located in the URL, latter at the payload (request body), these two cases may result same thing (the server will get same data), which may give you a wrong impression that form data wil be put into URL too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -X POST localhost:8080/postform -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;username=davidzhu&amp;amp;password=778899a&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -X POST &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:8080/postform?username=david&amp;amp;password=778899a&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The server may get same data for these two command, this is because the server may try to parse the query string and form data at the same time, I have talked this in &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/golang/practice/012-http-related/#4-parse-form-and-query-string&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-form-data-restriction&#34;&gt;
    &lt;a href=&#34;#4-form-data-restriction&#34;&gt;#&lt;/a&gt;
    4. Form data restriction
&lt;/h2&gt;&lt;p&gt;As we talk above, form data can only be these three type by by default:&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, &lt;code&gt;text/plain&lt;/code&gt;, and you have to set the &lt;code&gt;Content-Type&lt;/code&gt; to the corresponding type with correct format.&lt;/p&gt;
&lt;p&gt;If you want &lt;code&gt;application/json&lt;/code&gt; type, you need encode the form data into josn at client and decode the request body at server side. Besides, don&amp;rsquo;t forget to set the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/json&lt;/code&gt; which will tell the server the data format resides in the request body.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/22195153/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;An answer&lt;/a&gt; from stackoverflow, hope it will help:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML provides no way to generate JSON from form data&lt;/strong&gt;. If you really want to handle it from the client, then you would have to resort to using JavaScript to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gather your data from the form via DOM&lt;/li&gt;
&lt;li&gt;organise it in an object or array&lt;/li&gt;
&lt;li&gt;generate JSON with &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON.stringify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;POST it with &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;d probably be better off sticking to &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; data and processing that on the server instead of JSON. Your form doesn&amp;rsquo;t have any complicated hierarchy that would benefit from a JSON data structure.&lt;/p&gt;
&lt;p&gt;This is same in Go, if you want send json data in the request body, you should encode it into bytes and decode request body at server:&lt;/p&gt;
&lt;p&gt;client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// string in back quote is raw string which means
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// the double quote here will lose its special meaning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// decode the json string into 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reader_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;`{&amp;#34;username&amp;#34;: &amp;#34;david&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;my_password&amp;#34;}`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MethodPost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/postbody&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reader_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Parse username and password in form.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Username&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;username&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;Password&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;password&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// note that r.Body is an io.Reader
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// which means decoder.Decode() method will consume data stroed in r.Body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// you cannot read same data twice
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>DNS Spoofing - GFW</title>
        <link>https://blog.yorforger.cc/p/dns-spoofing-gfw/</link>
        <pubDate>Tue, 31 Oct 2023 15:29:25 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/dns-spoofing-gfw/</guid>
        <description>&lt;p&gt;声明: 本文只用于学习目的, 请勿用于非法用途.&lt;/p&gt;
&lt;h2 id=&#34;1-dns-spoofing&#34;&gt;
    &lt;a href=&#34;#1-dns-spoofing&#34;&gt;#&lt;/a&gt;
    1. DNS spoofing
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/what-is-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS&lt;/a&gt; cache poisoning is the act of entering false information into a DNS cache, so that DNS queries return an incorrect response and users are directed to the wrong websites. DNS cache poisoning is also known as &amp;lsquo;DNS spoofing&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;11-dns-caching&#34;&gt;
    &lt;a href=&#34;#11-dns-caching&#34;&gt;#&lt;/a&gt;
    1.1. DNS Caching
&lt;/h3&gt;&lt;p&gt;Learn more about DNS caching: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/002-dns-basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Concepts (NameServer(NS), DNS Records and Caching) - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-how-do-attackers-poison-dns-caches&#34;&gt;
    &lt;a href=&#34;#12-how-do-attackers-poison-dns-caches&#34;&gt;#&lt;/a&gt;
    1.2. How do attackers poison DNS caches?
&lt;/h3&gt;&lt;p&gt;Attackers can poison DNS caches by impersonating &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-server-types/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS nameservers&lt;/a&gt;, making a request to a DNS resolver, and then forging the reply when the DNS resolver queries a nameserver. This is possible because DNS servers use &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UDP&lt;/a&gt; instead of &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/tcp-ip/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP&lt;/a&gt;, and because currently there is no verification for DNS information.&lt;/p&gt;
&lt;p&gt;DNS Cache Poisoning Process:&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/005-gfw-dns/c.png&#34; alt=&#34;c&#34; style=&#34;zoom: 33%;&#34; /&gt;
&lt;p&gt;Poisoned DNS Cache:&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/005-gfw-dns/d.png&#34; alt=&#34;d&#34; style=&#34;zoom: 33%;&#34; /&gt;
&lt;p&gt;If a DNS resolver receives a forged response, it accepts and caches the data uncritically because there is no way to verify if the information is accurate and comes from a legitimate source.&lt;/p&gt;
&lt;p&gt;Despite these major points of vulnerability in the DNS caching process, DNS poisoning attacks are not easy. Because the DNS resolver does actually query the authoritative nameserver, attackers have only a few milliseconds to send the fake reply before the real reply from the authoritative nameserver arrives.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way to prevent this is to set the /etc/host file directly, because checking host file happens before DNS resolution.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/002-host-file-dns-stub-resolver/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS Stub and Recursive Resolver - Config Files - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/dns-cache-poisoning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is DNS cache poisoning? | DNS spoofing | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-gfw&#34;&gt;
    &lt;a href=&#34;#2-gfw&#34;&gt;#&lt;/a&gt;
    2. GFW
&lt;/h2&gt;&lt;h3 id=&#34;21-http-劫持&#34;&gt;
    &lt;a href=&#34;#21-http-%e5%8a%ab%e6%8c%81&#34;&gt;#&lt;/a&gt;
    2.1. HTTP 劫持
&lt;/h3&gt;&lt;p&gt;原文: &lt;a class=&#34;link&#34; href=&#34;https://doubibackup.com/6t3mypbm-5.html#comments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;浅谈HTTP劫持、DNS污染的影响及解决办法（仅个人理解） | 逗比根据地&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP劫持很容易理解，因为HTTP传输协议是明文的，并且我的网站服务器是在海外，要访问我的网站就要通过中国的国际宽带出口，出去与我的网站建立连接。我的网站也是因为关键词的原因在经过出口的时候，被“&lt;strong&gt;检查站：墙&lt;/strong&gt;”扫描到了违规关键词，于是掐断了TCP链接。所以当时用户访问网站会遇到：&lt;strong&gt;链接已重置、该网站已永久移动到其他地址等等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP劫持很容易解决，那就是&lt;strong&gt;加上SSL证书，网站链接全部内容加密&lt;/strong&gt;，这样“检查站：墙”就无法解密数据分析关键词了。但是这不是绝对能解决这个问题的，如果你的网站只是误杀或者违规擦边球，那还好，如果是大型网站，就会特殊对待了。&lt;/p&gt;
&lt;p&gt;HTTPS在建立加密连接的时候，需要一次握手，也就是达成链接协议建立加密连接，但是这次握手是明文的（建立加密链接首先就是链接双方信任，比如网站的SSL证书是自己签的，或者SSL证书到期或伪造的，在访问这个网站的时候浏览器就会进行提示，表示此网站不安全啥的。）握手是明文的就意味着，如果你的域名被重点关注，即使你加上了SSL证书，也会在首次握手的时候，被关键词匹配然后掐断链接。 learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/http/006-https-ssl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS SSL TLS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-dns污染投毒&#34;&gt;
    &lt;a href=&#34;#22-dns%e6%b1%a1%e6%9f%93%e6%8a%95%e6%af%92&#34;&gt;#&lt;/a&gt;
    2.2. DNS污染投毒
&lt;/h3&gt;&lt;p&gt;我们假设A为用户端也就是你的电脑设备，B为DNS服务器，C为A到B链路中一个节点的网络设备（路由器、交换机、网关等）。&lt;/p&gt;
&lt;p&gt;然后我们模拟一次被污染的DNS请求过程。&lt;/p&gt;
&lt;p&gt;A访问一个网站，比如 &lt;code&gt;google.com&lt;/code&gt; ，然后，A向B通过UDP方式发送查询请求，比如查询内容 &lt;code&gt;A google.com&lt;/code&gt; ，这个数据库在前往B的时候要经过数个节点网络设备比如C，然后继续前往DNS服务器B。&lt;/p&gt;
&lt;p&gt;然而在这个传输过程中，C针对这个数据包进行特征分析，（DNS端口为53，进行特定端口监视扫描，对UDP明文传输的DNS查询请求进行特征和关键词匹配分析，比如“google.com”是关键词，也或者是“A记录”），从而立刻返回一个错误的解析结果（比如返回了 &lt;code&gt;A 233.233.233.233&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;众所周知，作为链路上的一个节点，网络设备 C 必定比真正的 DNS 服务器 B 更快的返回结果到 用户电脑A，而目前的DNS解析机制策略有一个重要的原则，就是只认第一。因此 节点网络设备C所返回的查询结果就被 用户电脑A当作了最终结果，于是用户电脑A因为获得了错误的IP，导致无法正常访问 &lt;code&gt;google.com &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;验证污染 我的 doub.ssrshare.usm 主域名虽然在大部分地区解除了DNS污染，但是我的两个SS站域名并没有，所以我尝试对我的SS 子域名进行nslookup测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:&lt;span class=&#34;se&#34;&gt;\U&lt;/span&gt;sers&lt;span class=&#34;se&#34;&gt;\A&lt;/span&gt;dministrator&amp;gt;nslookup ss.dou-bi.com 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;服务器: google-public-dns-a.google.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Address: 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;非权威应答:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;名称: ss.dou-bi.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Addresses: 200:2:9f6a:794b::
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;8.7.198.45
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我使用的是谷歌的 8.8.8.8 DNS，但是我得到的A记录 IP却是8.7.198.45，这个明显不是我的IP，看一下其他被DNS污染的域名就会发现都会有这个IP。很明显，我的 ss.dou-bi.com 域名受到了DNS污染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用加密代理&lt;/strong&gt;，比如Shadowsocks，在加密代理里进行远程DNS解析，或者使用VPN上网。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改hosts文件&lt;/strong&gt;，操作系统中Hosts文件的权限优先级高于DNS服务器，操作系统在访问某个域名时，会先检测HOSTS文件，然后再查询DNS服务器。可以在hosts添加受到污染的DNS地址来解决DNS污染和DNS劫持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过一些软件编程处理&lt;/strong&gt;，可以直接忽略返回结果是虚假IP地址的数据包，直接解决DNS污染的问题。如果你是Firefox用户，并且只用Firefox，又懒得折腾，直接打开Firefox的远程DNS解析就行了。在地址栏中输入：&lt;code&gt;about:config&lt;/code&gt;找到 &lt;code&gt;network.proxy.socks_remote_dns&lt;/code&gt; 一项改成true。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用DNSCrypt软件&lt;/strong&gt;，此软件与使用的OpenDNS直接建立相对安全的TCP连接并加密请求数据，从而不会被污染。 对于被DNS污染的网站站长来说，最有效的方法就是 换域名或者IP 了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-ip黑名单&#34;&gt;
    &lt;a href=&#34;#23-ip%e9%bb%91%e5%90%8d%e5%8d%95&#34;&gt;#&lt;/a&gt;
    2.3. ip黑名单
&lt;/h3&gt;&lt;p&gt;即使没有DNS污染 或者 你获得了正确的IP，你就能正常访问这些被屏蔽的网站了吗？&lt;/p&gt;
&lt;p&gt;不，墙目前已经有了IP黑名单，针对谷歌这种网站已经不再是普通的DNS污染了，因为总会有办法访问被DNS污染的网站（比如指定Hosts）。&lt;/p&gt;
&lt;p&gt;那么就直接把所有的谷歌IP拉黑不就好了？就算你获得了正确的谷歌IP，但是当你去访问这个IP的时候，墙会发现这个IP存在于黑名单中，于是直接阻断，于是浏览器就会提示：www.google.com 的响应时间过长等等&lt;/p&gt;
&lt;h2 id=&#34;3-常见代理方式&#34;&gt;
    &lt;a href=&#34;#3-%e5%b8%b8%e8%a7%81%e4%bb%a3%e7%90%86%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;
    3. 常见代理方式
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;VPN
&lt;ul&gt;
&lt;li&gt;常见协议: IPSec, OpenVPN, L2TP, WireGuard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shadowsocks (代理服务器)
&lt;ul&gt;
&lt;li&gt;常见协议: SOCKS5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V2Ray (代理服务器)
&lt;ul&gt;
&lt;li&gt;常见协议: VMess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 代理 (代理服务器)
&lt;ul&gt;
&lt;li&gt;已被封锁, 原因是HTTP代理并不对数据进行加密, 即使流量能够绕过初步的审查，传输的内容仍然是透明的，容易被监控。&lt;/li&gt;
&lt;li&gt;即使使用 HTTPS 也不会实现全局加密, 在建立 TLS 握手验证时还是需要一个HTTP明文连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解更多: &lt;a class=&#34;link&#34; href=&#34;https://superxlcr.github.io/2018/07/01/%E4%B8%8A%E7%BD%91%E9%99%90%E5%88%B6%E5%92%8C%E7%BF%BB%E5%A2%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;上网限制和翻墙基本原理 | superxlcr&amp;rsquo;s notebook&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Common Network Attacks</title>
        <link>https://blog.yorforger.cc/p/common-network-attacks/</link>
        <pubDate>Mon, 30 Oct 2023 22:44:57 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/common-network-attacks/</guid>
        <description>&lt;h2 id=&#34;1-man-in-the-middle-attack&#34;&gt;
    &lt;a href=&#34;#1-man-in-the-middle-attack&#34;&gt;#&lt;/a&gt;
    1. Man-in-the-middle attack
&lt;/h2&gt;&lt;p&gt;Learn more:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/002-ssh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://davidzhu.xyz/post/cs-basics/002-ssh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/003-ssl-secure-communication/#4-details-in-tls-handshake---avoid-man-in-middle-attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS SSL TLS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-ddos-attack&#34;&gt;
    &lt;a href=&#34;#2-ddos-attack&#34;&gt;#&lt;/a&gt;
    2. DDoS attack
&lt;/h2&gt;&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/004-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DDoS Attack - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-csrf-attack&#34;&gt;
    &lt;a href=&#34;#3-csrf-attack&#34;&gt;#&lt;/a&gt;
    3. CSRF attack
&lt;/h2&gt;&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/http/007-csrf-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CSRF Attack and CORS - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-ssl-stripping&#34;&gt;
    &lt;a href=&#34;#4-ssl-stripping&#34;&gt;#&lt;/a&gt;
    4. SSL stripping
&lt;/h2&gt;&lt;p&gt;SSL stripping attacks, also known as SSL strip, SSL downgrade, or HTTP downgrade attacks, strip the encryption offered by HTTPS, reducing the connection to the less-secure HTTP.&lt;/p&gt;
&lt;p&gt;In order to &lt;a class=&#34;link&#34; href=&#34;https://avicoder.me/2016/02/22/SSLstrip-for-newbies/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“strip” the SSL&lt;/a&gt;, an attacker intervenes in the redirection of the HTTP to the secure HTTPS protocol and intercepts a request from the user to the server. The attacker will then continue to establish an HTTPS connection between himself and the server, and an unsecured HTTP connection with the user, acting as a “bridge” between them.&lt;/p&gt;
&lt;img src=&#34;https://blog.yorforger.cc/004-common-attacks/a.png&#34; alt=&#34;a&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;How can the SSL strip trick both the browser and the website’s server? The SSL strip takes advantage of the way most users come to SSL websites. The majority of visitors connect to a website’s page that redirects through a 302 redirect, or they arrive on an SSL page via a link from a non-SSL site. If the victim wants, for instance, to buy a product and types the URL &lt;a class=&#34;link&#34; href=&#34;https://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.buyme.com&lt;/a&gt; in the address bar, the browser connects to the attacker&amp;rsquo;s machine and waits for a response from the server. In an SSL strip, the attacker, in turn, forwards the victim’s request to the online shop’s server and receives the secure HTTPS payment page. For example &lt;a class=&#34;link&#34; href=&#34;https://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.buyme.com&lt;/a&gt;. At this point, the attacker has complete control over the secure payment page. He downgrades it from HTTPS to HTTP and sends it back to the victim’s browser. The browser is now redirected to &lt;a class=&#34;link&#34; href=&#34;http://www.buyme.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.buyme.com&lt;/a&gt;. From now onward, all the victim’s data will be transferred in plain text format, and the attacker will be able to intercept it. Meanwhile, the website’s server will think that it has successfully established the secure connection, which indeed it has—but with the attacker’s machine, not the victim’s.&lt;/p&gt;
&lt;h3 id=&#34;41-enable-ssl-sitewide-at-all-websites&#34;&gt;
    &lt;a href=&#34;#41-enable-ssl-sitewide-at-all-websites&#34;&gt;#&lt;/a&gt;
    4.1. Enable SSL sitewide at all websites
&lt;/h3&gt;&lt;p&gt;To mitigate this threat, financial institutions and technology firms have &lt;a class=&#34;link&#34; href=&#34;https://venafi.com/blog/https-should-be-implemented-everywhereincluding-static-websites/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;already enabled&lt;/a&gt; HTTPS on a site-wide basis. Enabling HTTPS encrypts the connection between a browser and the website, thereby securing sensitive data transmissions. Therefore it makes perfect sense for banks and high-profile technology firms to enable HTTPS on their dynamic websites because of the transaction of important and sensitive information.&lt;/p&gt;
&lt;h3 id=&#34;42-why-enable-hsts&#34;&gt;
    &lt;a href=&#34;#42-why-enable-hsts&#34;&gt;#&lt;/a&gt;
    4.2. Why enable HSTS?
&lt;/h3&gt;&lt;p&gt;In addition to enabling HTTPS on a site-wide basis, corporations should weigh the benefits of enabling &lt;a class=&#34;link&#34; href=&#34;https://www.globalsign.com/en/blog/what-is-hsts-and-how-do-i-use-it/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HSTS&lt;/a&gt; (HTTP Strict Transport Security), which is a web security policy mechanism that helps to protect websites against SSL stripping attacks and cookie hijacking. &lt;strong&gt;It allows&lt;/strong&gt; &lt;strong&gt;web servers to declare that&lt;/strong&gt; web browsers should interact with them using only secure HTTPS connections, and never via the insecure HTTP protocol.&lt;/p&gt;
&lt;p&gt;When a web application issues HSTS Policy to user browsers, conformant user browsers will &lt;a class=&#34;link&#34; href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;automatically redirect&lt;/a&gt; any insecure HTTP requests to HTTPS for the target website. In addition, when a man-in-the-middle attacker attempts to intercept traffic from a victim using an invalid certificate, HSTS does not allow the user to override the invalid certificate warning message. By having a HSTS policy installed, it will be nearly impossible for the attackers to intercept any information at all!&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://venafi.com/blog/what-are-ssl-stripping-attacks/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What Are SSL Stripping Attacks? | Venafi&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-dns&#34;&gt;
    &lt;a href=&#34;#5-dns&#34;&gt;#&lt;/a&gt;
    5. DNS
&lt;/h2&gt;&lt;h3 id=&#34;51-dns-hijacking&#34;&gt;
    &lt;a href=&#34;#51-dns-hijacking&#34;&gt;#&lt;/a&gt;
    5.1. DNS hijacking
&lt;/h3&gt;&lt;p&gt;To prevent DNS hijacking, first, you have to know the different kinds of attacks. DNS hijacking can take four different forms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Local DNS hijacking:&lt;/strong&gt; An attacker installs &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/trojan-horse-virus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Trojan software&lt;/a&gt; on a user&amp;rsquo;s computer, then modifies the local DNS settings (cahnge its DNS server to a Rogue DNS server).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS hijacking using a router:&lt;/strong&gt; Many routers have weak firmware or use the default passwords they were shipped with. Attackers can take advantage of this to hack a router and change its DNS settings, which will affect everyone that uses that router.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Man-in-the-middle (MITM) attacks:&lt;/strong&gt; Attackers use &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/man-in-the-middle-attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;man-in-the-middle attack techniques&lt;/a&gt; to intercept communications between users and a &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/dynamic-dns&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNS server&lt;/a&gt;. They then direct the target to malicious websites.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Learn more &lt;a class=&#34;link&#34; href=&#34;https://www.fortinet.com/resources/cyberglossary/dns-hijacking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What Is DNS Hijacking? How to Detect &amp;amp; Prevent It | Fortinet&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-dns-spoofing-vs-dns-cache-poisoning&#34;&gt;
    &lt;a href=&#34;#52-dns-spoofing-vs-dns-cache-poisoning&#34;&gt;#&lt;/a&gt;
    5.2. DNS spoofing vs DNS (cache) poisoning
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Poisoning&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The attacker inserts false address records into the DNS server&amp;rsquo;s cache, causing the server to return incorrect IP addresses for domain names.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt;: The attack is on the DNS server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: If &lt;code&gt;www.example.com&lt;/code&gt; is supposed to resolve to IP &lt;code&gt;1.2.3.4&lt;/code&gt;, in a DNS poisoning attack, the DNS server might be tricked into resolving it to &lt;code&gt;5.6.7.8&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The attacker intercepts and responds to DNS requests with false information, usually &lt;strong&gt;before&lt;/strong&gt; the legitimate response is received.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: When a user tries to access &lt;code&gt;www.example.com&lt;/code&gt;, an attacker might intercept this request and send a fake response directing the user to IP &lt;code&gt;5.6.7.8&lt;/code&gt; instead of the real IP &lt;code&gt;1.2.3.4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/networking/005-gfw-dns/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GFW and DNS Poisoning - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-others&#34;&gt;
    &lt;a href=&#34;#53-others&#34;&gt;#&lt;/a&gt;
    5.3. Others
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Poisoning vs DNS Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS Poisoning: Inject false DNS info to the real server&amp;rsquo;s cache.&lt;/li&gt;
&lt;li&gt;DNS Spoofing: Send false response back with a malicious DNS server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose of MAC Address Spoofing&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To make a switch forward packets to an attacker&amp;rsquo;s device by mimicking a legitimate MAC address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use of ICMP Redirects in Man-in-the-Middle Attacks&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An attacker sends forged &amp;ldquo;ICMP redirect messages&amp;rdquo; to mislead a host into changing its routing table, diverting traffic through the attacker&amp;rsquo;s machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>HTTPS vs VPN vs Proxy</title>
        <link>https://blog.yorforger.cc/p/https-vs-vpn-vs-proxy/</link>
        <pubDate>Sun, 10 Sep 2023 10:54:30 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/https-vs-vpn-vs-proxy/</guid>
        <description>&lt;p&gt;HTTPS is used for encryption, VPN is too. What&amp;rsquo;s difference?&lt;/p&gt;
&lt;p&gt;In previou post we talked about &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Is HTTPS Secure Enough?&lt;/a&gt;, and we concluded that https is secure itself which means no one can decrypt the data without the session key. However there still are some security issues in HTTPS, the man-in-the-middle attack, for example.&lt;/p&gt;
&lt;h2 id=&#34;why-do-i-need-a-vpn-if-https-connections-are-secure&#34;&gt;
    &lt;a href=&#34;#why-do-i-need-a-vpn-if-https-connections-are-secure&#34;&gt;#&lt;/a&gt;
    Why do I need a VPN if https connections are secure?
&lt;/h2&gt;&lt;p&gt;A VPN will secure all of the traffic between point A and point B in a tunnel. This helps ensure that you are not having your traffic intercepted by anyone at, say, the coffee shop.&lt;/p&gt;
&lt;p&gt;HTTPS is a secure protocol between your browser and a particular website.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the tunnel in VPN is not a physical entity but rather a logical concept used to describe the secure pathway created for data transmission. Because tunneling involves repackaging the traffic data into a different form, perhaps with encryption as standard, it can hide the nature of the traffic that is run through a tunnel. &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Tunneling_protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tunneling protocol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means the format of the packets transmitted between VPN clients and server are different from the format of OSI model, they are encapulated with tunneling protocol. Acts like your original packets transmitted in a magic container other people cannot know what&amp;rsquo;s in it. Acs like a tunnel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, HTTPS will only help with traffic over port 443, which mean it only provides encryption for data exchanged between a client and a specific server, it does not encrypt all your internet traffic.&lt;/p&gt;
&lt;p&gt;A VPN stops that because everything is connected securely through that pipe. The primary thing that a VPN helps with is what is know as a man in the middle attack: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Man-in-the-middle attack - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;vpn-vs-proxy&#34;&gt;
    &lt;a href=&#34;#vpn-vs-proxy&#34;&gt;#&lt;/a&gt;
    VPN vs Proxy
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;In computer networks, a proxy server is a server (a computer system or an application) that acts &lt;strong&gt;as an intermediary&lt;/strong&gt; for requests from clients seeking resources from other servers. &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Proxy_server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Proxy server&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A virtual private network (VPN) is an encrypted connection between two or more computers. VPN connections take place over public networks, but the data exchanged over the VPN is still private because it is encrypted. &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IPsec | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What a VPN does logically is turn your internet connection into a &lt;em&gt;big Ethernet cable&lt;/em&gt;. When you are logged on to a company&amp;rsquo;s VPN, the effect is similar as though you took your computer to the company&amp;rsquo;s building and directly connected it. VPNs (usually) use encryption so that intermediate systems between you and the company (such as your ISP or a malicious wireless network sniffer) cannot eavesdrop your traffic.&lt;/p&gt;
&lt;p&gt;Proxies, on the other hand, do not typically provide encryption for all traffic and may only encrypt specific types of traffic (such as HTTPS).&lt;/p&gt;
&lt;p&gt;Proxies generally work on specific types of application traffic. For example, there are HTTP proxies, DNS proxies, etc. Although there are SOCKS proxies that proxy everything&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do sites like Netflix know I&amp;rsquo;m using a VPN?&lt;/p&gt;
&lt;p&gt;This is often caused by many netflix uers use a same von to access thier streaming service.&lt;/p&gt;
&lt;p&gt;We have known that: when you are logged on to a company&amp;rsquo;s VPN, the effect is similar as though you took your computer to the company&amp;rsquo;s building and directly connected it.&lt;/p&gt;
&lt;p&gt;If eveybody drives the same car to Walmart, Walmart will sooner or later know it&amp;rsquo;s a rental car, but they cannot track this car back to you because everybody drives the car with same the plate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qr.ae/pyL1RD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why do I need VPN if https connections are secure? - Quora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/257388/what-is-the-difference-between-a-proxy-and-a-vpn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;security - What is the difference between a proxy and a VPN? - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/VPN/comments/5mh6uc/how_do_sites_like_netflix_know_im_using_a_vpn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do sites like Netflix know I&amp;rsquo;m using a VPN? : VPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>DDoS Attack</title>
        <link>https://blog.yorforger.cc/p/ddos-attack/</link>
        <pubDate>Sat, 09 Sep 2023 09:29:57 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/ddos-attack/</guid>
        <description>&lt;h2 id=&#34;1-ddos-attack&#34;&gt;
    &lt;a href=&#34;#1-ddos-attack&#34;&gt;#&lt;/a&gt;
    1. DDoS attack
&lt;/h2&gt;&lt;p&gt;A distributed denial-of-service (DDoS) attack is a malicious attempt to disrupt the normal traffic of a targeted server, service or network by overwhelming the target or its surrounding infrastructure with a flood of Internet traffic.&lt;/p&gt;
&lt;p&gt;When a DDoS attack happens, a large volume of traffic is sent to a website. The site under attack typically crashes because the increased traffic exhausts the bandwidth limit or overloads the website’s servers.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/7kB9-nQJR44&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/7kB9-nQJR44?si=R8qrLRhRwlqofAu5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://youtu.be/7kB9-nQJR44?si=R8qrLRhRwlqofAu5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-how-does-a-ddos-attack-work&#34;&gt;
    &lt;a href=&#34;#2-how-does-a-ddos-attack-work&#34;&gt;#&lt;/a&gt;
    2. How does a DDoS attack work?
&lt;/h2&gt;&lt;p&gt;DDoS attacks are carried out with networks of Internet-connected machines.&lt;/p&gt;
&lt;p&gt;These networks consist of computers and other devices (such as IoT devices)which have been infected with &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/malware/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;malware&lt;/a&gt;, allowing them to be controlled remotely by an attacker. These individual devices are referred to as &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/bots/what-is-a-bot/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bots&lt;/a&gt; (or zombies), and a group of bots is called a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-botnet/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;botnet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once a botnet has been established, the attacker is able to direct an attack by sending remote instructions to each bot.&lt;/p&gt;
&lt;p&gt;When a victim’s server or network is targeted by the botnet, each bot sends requests to the target’s &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/dns/glossary/what-is-my-ip-address/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IP address&lt;/a&gt;, potentially causing the server or network to become overwhelmed, resulting in a &lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/glossary/denial-of-service/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;denial-of-service&lt;/a&gt; to normal traffic.&lt;/p&gt;
&lt;p&gt;Because each bot is a legitimate Internet device, separating the attack traffic from normal traffic can be difficult.&lt;/p&gt;
&lt;h2 id=&#34;3-how-to-identify-a-ddos-attack&#34;&gt;
    &lt;a href=&#34;#3-how-to-identify-a-ddos-attack&#34;&gt;#&lt;/a&gt;
    3. How to identify a DDoS attack
&lt;/h2&gt;&lt;p&gt;The most obvious symptom of a DDoS attack is a site or service suddenly becoming slow or unavailable. But since a number of causes — such a legitimate spike in traffic — can create similar performance issues, further investigation is usually required. Traffic analytics tools can help you spot some of these telltale signs of a DDoS attack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suspicious amounts of traffic originating from a single IP address or IP range&lt;/li&gt;
&lt;li&gt;A flood of traffic from users who share a single behavioral profile, such as device type, geolocation, or web browser version&lt;/li&gt;
&lt;li&gt;An unexplained surge in requests to a single page or endpoint&lt;/li&gt;
&lt;li&gt;Odd traffic patterns such as spikes at odd hours of the day or patterns that appear to be unnatural (e.g. a spike every 10 minutes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-challenge-collapsar-cc-attack---ddos&#34;&gt;
    &lt;a href=&#34;#4-challenge-collapsar-cc-attack---ddos&#34;&gt;#&lt;/a&gt;
    4. Challenge Collapsar (CC) attack - DDoS
&lt;/h2&gt;&lt;p&gt;A Challenge Collapsar (CC) attack is an attack where standard HTTP requests are sent to a targeted web server frequently.&lt;/p&gt;
&lt;p&gt;In 2004, a Chinese hacker nicknamed KiKi invented a hacking tool to send these kinds of requests to attack a NSFOCUS firewall named &lt;em&gt;Collapsar&lt;/em&gt;, and thus the hacking tool was known as &lt;em&gt;Challenge Collapsar&lt;/em&gt;, or &lt;em&gt;CC&lt;/em&gt; for short. Consequently, this type of attack got the name &lt;em&gt;CC attack&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDoS is not a specific attack, but a general term for a large types of attacks. There are dozens of types, and new attack methods are constantly being invented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;41-intercept-cc-attack---intercept-http-request&#34;&gt;
    &lt;a href=&#34;#41-intercept-cc-attack---intercept-http-request&#34;&gt;#&lt;/a&gt;
    4.1. Intercept cc attack - intercept http request
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;(1) Hardware firewall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set a physical firewall before your server machine which used to filter request, this is best way but most expensive too.&lt;/p&gt;
&lt;p&gt;**(2) Software firewall **&lt;/p&gt;
&lt;p&gt;Almost all OS has firewall installed，Linux server usually use &lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/index.php/Iptables_%28%e7%ae%80%e4%bd%93%e4%b8%ad%e6%96%87%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iptables&lt;/a&gt;, intercept request from IP address  &lt;code&gt;1.2.3.4&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ iptables -A INPUT -s 1.2.3.4 -j DROP
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;(3) Web server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web can also used to intercept IP address &lt;code&gt;1.2.3.4&lt;/code&gt;, on nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  deny 1.2.3.4;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;On Apache, modify the  &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;RequireAll&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Require all granted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Require not ip 1.2.3.4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/RequireAll&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Web server have a impact impact on the performance when used in firewall and cannot protect when there are huge DDoS attack.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.ruanyifeng.com/blog/2018/06/ddos.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ruanyifeng.com/blog/2018/06/ddos.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is a distributed denial-of-service (DDoS) attack? | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is a distributed denial-of-service (DDoS) attack? | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Denial-of-service_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Denial-of-service attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>实现ssh免密登陆 ssh如何验证远程主机真实性</title>
        <link>https://blog.yorforger.cc/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</link>
        <pubDate>Sat, 03 Jun 2023 17:14:27 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/%E5%AE%9E%E7%8E%B0ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86-ssh%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%9C%9F%E5%AE%9E%E6%80%A7/</guid>
        <description>&lt;h3 id=&#34;1-ssh-应对中间人攻击的方法&#34;&gt;
    &lt;a href=&#34;#1-ssh-%e5%ba%94%e5%af%b9%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;
    1. SSH 应对中间人攻击的方法
&lt;/h3&gt;&lt;p&gt;SSH 采用了公钥加密, 过程如下：&lt;/p&gt;
&lt;p&gt;（1）Remote Host 收到用户的登录请求, 把自己的公钥发给用户&lt;/p&gt;
&lt;p&gt;（2）用户使用这个公钥, 将登录密码加密后, 发送过去&lt;/p&gt;
&lt;p&gt;（3）Remote Host 用自己的私钥, 解密信息, 验证密码是否正确&lt;/p&gt;
&lt;p&gt;这个过程存在一个漏洞：如果有人截获了用户的登录请求，然后冒充 Remote Host，将伪造的公钥发给用户，那么用户很难辨别真伪。这就是 Man-in-the-middle attack, 应对方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用公钥指纹人工进行对比验证,&lt;/li&gt;
&lt;li&gt;上传公钥实现免密登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们一一介绍这两种方法,&lt;/p&gt;
&lt;h2 id=&#34;2-利用公钥指纹人工进行对比验证&#34;&gt;
    &lt;a href=&#34;#2-%e5%88%a9%e7%94%a8%e5%85%ac%e9%92%a5%e6%8c%87%e7%ba%b9%e4%ba%ba%e5%b7%a5%e8%bf%9b%e8%a1%8c%e5%af%b9%e6%af%94%e9%aa%8c%e8%af%81&#34;&gt;#&lt;/a&gt;
    2. 利用公钥指纹人工进行对比验证
&lt;/h2&gt;&lt;p&gt;看来面的例子, 在Mac上通过ssh连接远程的服务器, 第一次连接的时候会问下面提示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Are you sure you want to &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; connecting &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;yes/no/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;fingerprint&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;? yes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 ssh 在提醒它无法确认 remost host 是不是就是你要连接的那个主机, 因为可能会发生中间人攻击嘛, 但知道它的公钥指纹是&lt;code&gt;sa5vDYS0...&lt;/code&gt;, 问我们还要继续连接吗 (注意单词 establish 在这是 “认证确认” 的意思),&lt;/p&gt;
&lt;p&gt;那我们怎么知道远程主机的公钥指纹应该是多少？当然是去你的服务器上查看公钥指纹:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ root@vultr.guest &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意如果你的服务器使用的是其他hash function生成的公钥指纹, 那你就要查看其他文件了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -E md5 -lf /etc/ssh/ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以发现输出内容与上面 ssh 警告的指纹相同, 所以我们要来接的这个是我们的真正主机,&lt;/p&gt;
&lt;p&gt;可能有人会说, 那我们买的服务器物理主机在谷歌阿里, 怎么去直接验证?  你可以在你购买VPS的网站上连接自己服务器保证你连接的一定是你的主机, 但我们只是测试, 所以你直接忽略 ssh 的提示警告, 输入yes, 连上服务器后去验证一下就好了, 因为肯定不会有中间人闲的蛋疼来攻击我们的连接吧? 几块钱一个月的服务器, 谁来攻击你,&lt;/p&gt;
&lt;p&gt;有人可能又会疑问, 那我们也可以直接去远程主机查看他的公钥啊, 为啥还要用个hash函数来生成它的指纹, 再去比对, 不是多此一举吗? 首先你没发现公钥的指纹很短吗? 我们去远程主机验证一般是用肉眼来比对吧, 那公钥那么长, 几百个字符, 很容易比对错, 而公钥指纹的主要目的就在于它很短, 方便我们比对,&lt;/p&gt;
&lt;p&gt;最后关于 ssh 输出的信息, 还有其它想说的, 根据输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The authenticity of host &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该 remote host 上的 ssh 使用的公私钥是由 ED25519 算法生成的, ED25519 是非对称加密算法, 常见的非对称加密算法还有 RSA, 所以 RSA 和 ED25519 是并列的: Today, the RSA is the most widely used public-key algorithm for SSH key. But compared to Ed25519, it&amp;rsquo;s slower and even considered not safe if it&amp;rsquo;s generated with the key smaller than 2048-bit length. EdDSA is a digital signature scheme, Ed25519 is the EdDSA signature scheme using SHA-512 (SHA-2) and Curve25519. &amp;ndash;Wiki&lt;/p&gt;
&lt;p&gt;另外, 该公钥指纹是由 SHA256 hash function 生成的, 另外常见的 hash function 还有md5,&lt;/p&gt;
&lt;h3 id=&#34;21-验证公私钥位置&#34;&gt;
    &lt;a href=&#34;#21-%e9%aa%8c%e8%af%81%e5%85%ac%e7%a7%81%e9%92%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    2.1. 验证公私钥位置
&lt;/h3&gt;&lt;p&gt;这个时候我们在电脑终端输入yes, 然后就会提示输入密码 (比如root用户对应的密码), 然后系统会提示如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Warning: Permanently added &lt;span class=&#34;s1&#34;&gt;&amp;#39;144.202.16.29&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@144.202.16.29&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last login: Fri Apr  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 20:36:06 &lt;span class=&#34;m&#34;&gt;2023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当远程主机的公钥被接受以后, 它会被保存在文件&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;之中, 下次再连接这台主机, 系统就会认出它的公钥已经保存在本地了, 从而跳过警告部分, 直接提示输入密码, 我们来查看Mac上的输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls ~/.ssh 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;id_rsa          id_rsa.pub      known_hosts     known_hosts.old
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat ~/.ssh/known_hosts 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-ed25519 AAAAC3NzaC1lZDI1N...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ecdsa-sha2-nistp256 AAAAE2VjZH....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAADA....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;144.202.16.29 ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再看看服务器上的输出,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls /etc/ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;moduli            ssh_host_dsa_key.pub    ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_config        ssh_host_ecdsa_key      ssh_host_rsa_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sshd_config       ssh_host_ecdsa_key.pub  ssh_host_rsa_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh_host_dsa_key  ssh_host_ed25519_key
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ed25519_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat ssh_host_ecdsa_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecdsa-sha2-nistp256 &lt;span class=&#34;nv&#34;&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这两个一个是公钥, 一个是公钥的指纹, 可以看出和上面Mac的存储的内容是一样, 然后上面在服务器 &lt;code&gt;ls /etc/ssh&lt;/code&gt; 的输出, 有 &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;, &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt; 这就是使用不同的算法产生的不同的key,&lt;/p&gt;
&lt;p&gt;最后 Mac 上 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 的输出 github 那部分有 ssh-ed25519, ecdsa-sha2-nistp256, 这是什么呢?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For &lt;code&gt;ssh-ed25519&lt;/code&gt; and &lt;code&gt;ecdsa-sha2-nistp256&lt;/code&gt; which one is used for a given connection depends on the capabilities and preferences of the client, namely your ssh program. If you are using &lt;code&gt;OpenSSH&lt;/code&gt; versions 6.5 to 8.1, then it prefers &lt;code&gt;ecdsa&lt;/code&gt; then &lt;code&gt;ed25519&lt;/code&gt;, and only 8.2 up prefers &lt;code&gt;ed25519&lt;/code&gt; first. &lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1688106/why-does-github-recommend-ed25519-ssh-key-encryption-scheme-but-itself-uses-ecd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Why does GitHub recommend ed25519 SSH key encryption scheme, but itself uses ECDSA? - Super User&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ecdsa-sha2-nistp256: Specifies the ECDSA algorithm with 256-bit key strength&lt;/li&gt;
&lt;li&gt;rsa: Specifies the public key algorithm rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-public-key-authentication-上传公钥实现免密登陆&#34;&gt;
    &lt;a href=&#34;#3-public-key-authentication-%e4%b8%8a%e4%bc%a0%e5%85%ac%e9%92%a5%e5%ae%9e%e7%8e%b0%e5%85%8d%e5%af%86%e7%99%bb%e9%99%86&#34;&gt;#&lt;/a&gt;
    3. Public Key Authentication (上传公钥实现免密登陆)
&lt;/h2&gt;&lt;h3 id=&#34;31-过程分析&#34;&gt;
    &lt;a href=&#34;#31-%e8%bf%87%e7%a8%8b%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;
    3.1. 过程分析
&lt;/h3&gt;&lt;p&gt;使用密码登录, 每次都必须输入密码, 非常麻烦, 好在SSH还提供了公钥登录, 可以省去输入密码的步骤, 具体验证过程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client generates a public/private key pair, typically with RSA or ECC. The client keeps the private key secret and registers the public key with the SSH server.&lt;/li&gt;
&lt;li&gt;When the client connects to the server, the server authenticates the client by checking if it has the corresponding public key registered for that client.&lt;/li&gt;
&lt;li&gt;The server will send a challenge message to the client, requesting authentication.&lt;/li&gt;
&lt;li&gt;The client will take the challenge message and use its private key to generate a digital signature. This proves that the client has the correct private key without revealing the key itself.&lt;/li&gt;
&lt;li&gt;The client sends the digital signature back to the server as a response to the challenge.&lt;/li&gt;
&lt;li&gt;The server verifies the signature using the client&amp;rsquo;s registered public key. If the signature is validated, the server knows the client has proven possession of the corresponding private key and grants it access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意关于验证过程, 不同 ssh 版本可能会有不同的实现, 你可能会看到有人说远程主机用 用户的公钥进行解密验证, 其实公钥并不可以用来解密, 别人指的应该是公钥可以用来验证数字签名, 即这种情况下私钥加密其实应该是私钥签名。 私钥 “加密” 以后，谁用公钥都可以打开，就已经失去了加密的意义，所以它只能起到一个“签名”的效果，来达到-大家知道这条信息是我，而且只有我发出的。&lt;/p&gt;
&lt;p&gt;记住公钥只能用来加密, 不可以用来解密, 不然就不叫公钥了, 所以是远程主机用 用户的公钥进行用户的验证数字签名, 总结公钥有俩功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;验证数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-具体操作&#34;&gt;
    &lt;a href=&#34;#32-%e5%85%b7%e4%bd%93%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;
    3.2. 具体操作
&lt;/h3&gt;&lt;p&gt;远程主机需要使用用户的公钥来验证用户的身份, 所以&lt;strong&gt;本地机器&lt;/strong&gt;要生成公私钥:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# generate ssh keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一路回车之后在&lt;code&gt;~/.ssh/&lt;/code&gt;会新生成两个文件：&lt;code&gt;id_rsa.pub&lt;/code&gt;和&lt;code&gt;id_rsa&lt;/code&gt;, 前者是你的公钥, 后者是你的私钥, 这时再输入下面的命令, 将公钥传送到远程主机host上面:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-copy-id root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;完成, 之后再登录就不需要输入密码了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;其实你也可以直接编辑远程主机 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 文件, 把你本地主机的公钥的内容添加进去就行了, &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 做的就是这件事. 下面我们会验证.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-authorized_keys-file&#34;&gt;
    &lt;a href=&#34;#4-authorized_keys-file&#34;&gt;#&lt;/a&gt;
    4. &lt;code&gt;authorized_keys&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;上面 &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 执行后, 本机公钥存储在了远程主机&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls -a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.   .bash_history  .bash_profile  .cache  .pki  .tcshrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;..  .bash_logout   .bashrc        .cshrc  .ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat .ssh/authorized_keys &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在Mac上查看我自己的公钥, 是一样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat id_rsa.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5-ssh_config-vs-sshd_config-file&#34;&gt;
    &lt;a href=&#34;#5-ssh_config-vs-sshd_config-file&#34;&gt;#&lt;/a&gt;
    5. &lt;code&gt;ssh_config&lt;/code&gt; vs &lt;code&gt;sshd_config&lt;/code&gt; file
&lt;/h2&gt;&lt;p&gt;I would like to change my SSH port running Linux CentOS 6. I also noticed there&amp;rsquo;s an &lt;code&gt;/etc/ssh_config&lt;/code&gt; file along with &lt;code&gt;/etc/sshd_config&lt;/code&gt;. What&amp;rsquo;s the difference between the two? Should I change both?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sshd_config&lt;/code&gt; is the ssh &lt;em&gt;&lt;strong&gt;daemon&lt;/strong&gt;&lt;/em&gt; (or ssh server process) configuration file. As you&amp;rsquo;ve already stated, this is the file you&amp;rsquo;ll need to modify to change the server port.&lt;/p&gt;
&lt;p&gt;Whereas, the &lt;code&gt;ssh_config&lt;/code&gt; file is the ssh &lt;em&gt;&lt;strong&gt;client&lt;/strong&gt;&lt;/em&gt; configuration file. The client configuration file only has bearing on when you use the &lt;code&gt;ssh&lt;/code&gt; command to connect to another ssh host. So, in this case, you don&amp;rsquo;t need to modify it. It will be &lt;em&gt;other&lt;/em&gt; client machines connecting to your server.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://serverfault.com/questions/343533/changing-ssh-port-should-i-modify-only-sshd-config-or-also-ssh-config&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Should I modify only sshd_config, or also ssh_config?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/EdDSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Digital_signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/a/1688126&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://superuser.com/a/1688126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Man-in-the-middle attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://bitlaunch.io/blog/how-to-check-your-ssh-key-fingerprint/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to check your SSH key fingerprint (verify the authenticity of the remote host)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
