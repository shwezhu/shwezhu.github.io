<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Redis on David&#39;s Blogs</title>
        <link>https://blog.yorforger.cc/tags/redis/</link>
        <description>Recent content in Redis on David&#39;s Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 02 Oct 2023 09:37:58 +0000</lastBuildDate><atom:link href="https://blog.yorforger.cc/tags/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Caching &amp; Session Management</title>
        <link>https://blog.yorforger.cc/p/caching-session-management/</link>
        <pubDate>Mon, 02 Oct 2023 09:37:58 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/caching-session-management/</guid>
        <description>&lt;h2 id=&#34;1-session&#34;&gt;
    &lt;a href=&#34;#1-session&#34;&gt;#&lt;/a&gt;
    1. Session
&lt;/h2&gt;&lt;p&gt;Session is a server-side state management technique that allows the storage and retrieval of user-specific data across multiple requests. It provides a way to maintain state for individual users during their interaction with a web application. Here are some key points about session:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Session data is stored on the server, usually in memory or in a session store.&lt;/li&gt;
&lt;li&gt;Each user is assigned a unique session ID, typically stored as a cookie or in the URL.&lt;/li&gt;
&lt;li&gt;Session data is private to each user and cannot be accessed by other users.&lt;/li&gt;
&lt;li&gt;Session data can be accessed and modified throughout the user&amp;rsquo;s session on any page of the application.&lt;/li&gt;
&lt;li&gt;Session data is available only as long as the session is active. It expires after a certain period of inactivity or can be explicitly cleared.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sessions are commonly used to store user-specific information such as &lt;strong&gt;user&amp;rsquo;s authorization state, user&amp;rsquo;s privilege&lt;/strong&gt;, user preferences, and temporary data needed during the user&amp;rsquo;s session. And recently, I&amp;rsquo;m writing a chatgpt bot which needs remember user&amp;rsquo;s chat history, this is just a temporary data which need isolated with each user and not that important, session is perfect to store it.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/caching/session-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Session Management - AWS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-caching&#34;&gt;
    &lt;a href=&#34;#2-caching&#34;&gt;#&lt;/a&gt;
    2. Caching
&lt;/h2&gt;&lt;p&gt;Caching is a mechanism used to temporarily store frequently accessed or expensive-to-compute data in order to improve application performance and reduce database or server load. It involves storing data in memory or another fast-access storage location. Here are some key points about caching:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cached data is stored on the server or in a distributed cache, such as Redis or Memcached.&lt;/li&gt;
&lt;li&gt;Cached data is typically shared among all users of an application and can be accessed across multiple requests.&lt;/li&gt;
&lt;li&gt;Cached data is often used to store static or infrequently changing data that is expensive to compute or retrieve from a database.&lt;/li&gt;
&lt;li&gt;Cached data can be set to expire after a certain period or manually invalidated to ensure fresh data is retrieved when necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Caching can help optimize application performance by reducing the need to fetch data from slower data sources, such as databases or external APIs. &lt;strong&gt;It is commonly used to cache database query results, rendered views, frequently accessed configuration settings,&lt;/strong&gt; or other expensive computations.&lt;/p&gt;
&lt;p&gt;Don’t use cache to store anything you can’t regenerate. Cache can be deleted in the middle of the session, or even in the middle of a non-atomic operation. Learn more: &lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/109856&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/109856&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-additional-session-management&#34;&gt;
    &lt;a href=&#34;#3-additional-session-management&#34;&gt;#&lt;/a&gt;
    3. Additional: session management
&lt;/h2&gt;&lt;p&gt;There are various ways to manage user sessions including s&lt;strong&gt;toring those sessions locally&lt;/strong&gt; to the node responding to the HTTP request &lt;strong&gt;or&lt;/strong&gt; designating a layer in your architecture which can &lt;strong&gt;store those sessions in a scalable and robust manner&lt;/strong&gt;. Common approaches used include utilizing Sticky sessions or using a Distributed Cache for your session management.&lt;/p&gt;
&lt;h3 id=&#34;31-sticky-sessions-with-local-session-caching&#34;&gt;
    &lt;a href=&#34;#31-sticky-sessions-with-local-session-caching&#34;&gt;#&lt;/a&gt;
    3.1. Sticky Sessions with Local Session Caching
&lt;/h3&gt;&lt;p&gt;Sticky sessions, also known as &lt;em&gt;session affinity&lt;/em&gt;, allow you to route a site user to the particular web server that is managing that individual user’s session. The session’s validity can be determined by a number of methods, including a client-side cookies or via configurable duration parameters that can be set at the load balancer which routes requests to the web servers.&lt;/p&gt;
&lt;p&gt;Some advantages with utilizing sticky sessions are that it’s cost effective due to the fact you are storing sessions on the same web servers running your applications and that retrieval of those sessions is generally fast because it eliminates network latency. A drawback for using storing sessions on an individual node is that in the event of a failure, you are likely to lose the sessions that were resident on the failed node. In addition, in the event the number of your web servers change, for example a scale-up scenario, it’s possible that the traffic may be unequally spread across the web servers as active sessions may exist on particular servers. If not mitigated properly, this can hinder the scalability of your applications.&lt;/p&gt;
&lt;h3 id=&#34;32-distributed-session-management&#34;&gt;
    &lt;a href=&#34;#32-distributed-session-management&#34;&gt;#&lt;/a&gt;
    3.2. Distributed Session Management
&lt;/h3&gt;&lt;p&gt;In order to address scalability and to provide a shared data storage for sessions that can be accessible from any individual web server, you can abstract the HTTP sessions from the web servers themselves. A common solution to for this is to leverage an &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/elasticache/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;In-Memory Key/Value store&lt;/a&gt; such as &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/redis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/memcached/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Memcached&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While Key/Value data stores are known to be extremely fast and provide sub-millisecond latency, the added network latency and added cost are the drawbacks. An added benefit of leveraging Key/Value stores is that they can also be utilized to cache any data, not just HTTP sessions, which can help boost the overall performance of your applications.&lt;/p&gt;
&lt;p&gt;A consideration when choosing a distributed cache for session management is determining how many nodes may be needed in order to manage the user sessions. Generally speaking, this decision can be determined by how much traffic is expected and/or how much risk is acceptable. In a distributed session cache, the sessions are divided by the number of nodes in the cache cluster. In the event of a failure, only the sessions that are stored on the failed node are affected. If reducing risk is more important than cost, adding additional nodes to further reduce the percent of stored sessions on each node may be ideal even when fewer nodes are sufficient.&lt;/p&gt;
&lt;p&gt;Another consideration may be whether or not the sessions need to be replicated or not. Some key/value stores offer replication via read replicas. In the event of a node failure, the sessions would not be entirely lost. Whether replica nodes are important in your individual architecture may inform as to which key/value store should be used. &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/elasticache/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ElastiCache&lt;/a&gt; offerings for In-Memory key/value stores include &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/elasticache/redis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ElastiCache for Redis&lt;/a&gt;, which can support replication, and &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/elasticache/memcached/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ElastiCache for Memcached&lt;/a&gt; which does not support replication.&lt;/p&gt;
&lt;p&gt;There are a number of ways to store sessions in Key/Value stores. Many application frameworks provide libraries which can abstract some of the integration plumbing required to GET/SET those sessions in memory. In other cases, you can write your own session handler to persist the sessions directly.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/caching/session-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aws.amazon.com/caching/session-management/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-conclusion&#34;&gt;
    &lt;a href=&#34;#4-conclusion&#34;&gt;#&lt;/a&gt;
    4. Conclusion
&lt;/h2&gt;&lt;p&gt;Sessions are used to store user-specific data across requests, while caching is used to store frequently accessed or expensive-to-compute data to improve application performance, &lt;strong&gt;they’re just unrelated things&lt;/strong&gt;. Both mechanisms have their own specific use cases and can be used together to enhance the functionality and performance of application.&lt;/p&gt;
&lt;p&gt;Session data could be &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/caching/session-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stored in many places&lt;/a&gt;, using a MySQL database for example might be acceptable if that is your existing backend. Or you can store session in a central cache server, such as Redis. As you can see, cache is just a way to store data, session can be cached with Redis server or cached just in loacl memory, cache and session is like the car and high way, they are not same thing. But you should note that adding a cache layer will make your application complexed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; &lt;strong&gt;premature optimization&lt;/strong&gt; is the root of all evil (or at least most of it) in programming.” - &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Donald_Knuth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Donald Knuth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore, premature optimization is always a disaster. It&amp;rsquo;s not too late to add caching when actual bottlenecks are discovered after deployment or users&amp;rsquo; feedback.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a class=&#34;link&#34; href=&#34;https://net-informations.com/faq/asp/caching.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is the Difference between session and caching?&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Caching Strategies and What should be Cached</title>
        <link>https://blog.yorforger.cc/p/caching-strategies-and-what-should-be-cached/</link>
        <pubDate>Sun, 01 Oct 2023 17:56:58 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/caching-strategies-and-what-should-be-cached/</guid>
        <description>&lt;p&gt;Previous post: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/database/redis/004-session-vs-cache/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://davidzhu.xyz/post/database/redis/004-session-vs-cache/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A paragraph I like, and share it here with you:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; &lt;strong&gt;premature optimization&lt;/strong&gt; is the root of all evil (or at least most of it) in programming.” - &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Donald_Knuth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Donald Knuth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Premature optimization is always a disaster. It&amp;rsquo;s not too late to add caching when actual bottlenecks are discovered after deployment or users&amp;rsquo; feedback.&lt;/p&gt;
&lt;h2 id=&#34;1-what-should-be-cached&#34;&gt;
    &lt;a href=&#34;#1-what-should-be-cached&#34;&gt;#&lt;/a&gt;
    1. What should be cached
&lt;/h2&gt;&lt;p&gt;Generally you want to cache:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metadata/configuration data that &lt;strong&gt;does not change frequently.&lt;/strong&gt; E.g. country/state lists, external resource addresses, logic/branching settings, product/price/tax definitions, etc.&lt;/li&gt;
&lt;li&gt;Data that is costly to retrieve or generate and that does not need to frequently change. E.g. historical data sets for reports.&lt;/li&gt;
&lt;li&gt;Data that is unique to the current user&amp;rsquo;s session.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last item above is where you need to be careful as you can drastically increase your app&amp;rsquo;s memory usage, by adding a few megabytes to the data for every active session. It implies &lt;strong&gt;different levels of caching &amp;ndash; application wide, user session&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;Generally you should NOT cache data that is under active change.&lt;/p&gt;
&lt;p&gt;This is a really broad question, and the answer depends heavily on the specific application/system you are building. &lt;strong&gt;Caching is only a performance optimization technique&lt;/strong&gt;, and as with any optimization, measure first before making substantial changes, to avoid wasting time optimizing the wrong thing. &lt;strong&gt;Maybe you don&amp;rsquo;t need much caching, and it would only complicate your app&lt;/strong&gt;. Maybe the data you are thinking of caching can be retrieved in a faster way, or less of it can be retrieved at once.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/13519206/16317008&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/13519206/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;p&gt;Each user on my server has a credit balance which needs to be changed frequently, obviously we shouldn&amp;rsquo;t cache it, instead we should fecth it from database directly, &lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/golang/comments/16xw0zx/can_cache_be_viewed_as_a_method_of_storing/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;a comment&lt;/a&gt; from Reddit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the credit balance (which sounds financial) query is simple and quick then pulling it directly from the backend storage should be fine and would &lt;strong&gt;eliminate the complexities of using a caching layer&lt;/strong&gt; and trying to keep it in sync with the persistent storage layer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-where-cache-should-sit&#34;&gt;
    &lt;a href=&#34;#2-where-cache-should-sit&#34;&gt;#&lt;/a&gt;
    2. Where cache should sit
&lt;/h2&gt;&lt;p&gt;In larger systems you also need to think about where the cache(s) will sit. Is it possible to have one central cache server (Redis), or is it good enough for each server/process to handle its own caching (local memory)?&lt;/p&gt;
&lt;p&gt;Generally, Redis is used for distributed caching. But sometimes local caching like &lt;em&gt;Guava Cache&lt;/em&gt; and &lt;em&gt;Caffeine&lt;/em&gt; can also be considered. There are some disadvantages to using &lt;em&gt;local caching&lt;/em&gt;: it cannot perform large-scale data storage, and the cache will become invalid when the application process restarts.&lt;/p&gt;
&lt;p&gt;However, using caching brings up issues that need to be considered: how to ensure &lt;strong&gt;consistency between redis and database&lt;/strong&gt;, cache penetration, cache breakdown and cache avalanche, clustering.&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;p&gt;A app is small enough that we haven&amp;rsquo;t had to scale a single instance yet. The three caching avenues I&amp;rsquo;m looking into are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in-memory - use HttpContext.Session for user data caching, with sticky sessions on the server. This is the one I tried out because it&amp;rsquo;s simplest. (This belongs to the server handle its own caching above, local memory caching)&lt;/li&gt;
&lt;li&gt;Redis - Add on MemoryDB or ElastiCache in our AWS stack. (Use Redis as a central cache server)&lt;/li&gt;
&lt;li&gt;Database caching- Use a DB table to keep that user data. I&amp;rsquo;d rather avoid this, the whole point is to avoid that round trip to the DB every pageload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/dotnet/comments/vp873j/whats_your_preferred_session_data_caching/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.reddit.com/r/dotnet/comments/vp873j/whats_your_preferred_session_data_caching/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-basic-caching-strategies&#34;&gt;
    &lt;a href=&#34;#3-basic-caching-strategies&#34;&gt;#&lt;/a&gt;
    3. Basic Caching Strategies
&lt;/h2&gt;&lt;p&gt;To maximize the advantages of the &lt;strong&gt;Go-Redis connection&lt;/strong&gt;, it’s imperative to employ the right caching strategy. Each strategy has its own set of merits and potential pitfalls, making the choice critical based on specific application needs. Let’s deep-dive into some basic caching strategies and their respective implementation in Go.&lt;/p&gt;
&lt;h3 id=&#34;31-cache-aside-lazy-loading&#34;&gt;
    &lt;a href=&#34;#31-cache-aside-lazy-loading&#34;&gt;#&lt;/a&gt;
    3.1. Cache-aside &lt;strong&gt;(Lazy Loading)&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Cache-aside, often termed lazy loading, is a caching pattern where the application code is responsible for loading data into the cache, updating, and invalidating cache entries.&lt;/p&gt;
&lt;h4 id=&#34;311-implementation&#34;&gt;
    &lt;a href=&#34;#311-implementation&#34;&gt;#&lt;/a&gt;
    3.1.1. Implementation:
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Check the Cache:
&lt;ul&gt;
&lt;li&gt;Initially, the application checks the cache to determine if the desired data is present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database Call:
&lt;ul&gt;
&lt;li&gt;If not present in the cache, the application fetches the data from the primary data store (e.g., a database) and then places it in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go Code:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Cache miss
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Fetch data from database
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fetchDataFromDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Store in cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Data from cache:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;312-advantages--disadvantages&#34;&gt;
    &lt;a href=&#34;#312-advantages--disadvantages&#34;&gt;#&lt;/a&gt;
    3.1.2. Advantages &lt;strong&gt;&amp;amp; Disadvantages&lt;/strong&gt;:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Advantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimal Initial Load&lt;/strong&gt;: Since data is loaded on-demand, the initial loading time is reduced.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always Updated&lt;/strong&gt;: Data in the cache is guaranteed to be current since it’s fetched only when needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt;: The first-time data is fetched (cache miss) has an additional latency since it requires a database call.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stale Data&lt;/strong&gt;: If not managed correctly, there can be periods where stale data remains in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-write-through-cache&#34;&gt;
    &lt;a href=&#34;#32-write-through-cache&#34;&gt;#&lt;/a&gt;
    3.2. Write-through &lt;strong&gt;Cache&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;In a write-through caching strategy, every write to the application data also writes to the cache. The cache is always updated with fresh data.&lt;/p&gt;
&lt;h4 id=&#34;321-implementation&#34;&gt;
    &lt;a href=&#34;#321-implementation&#34;&gt;#&lt;/a&gt;
    3.2.1. &lt;strong&gt;Implementation&lt;/strong&gt;:
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write Operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every time there’s a write operation to the primary data store, the same data is written to the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go Code&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Data update function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;updateData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;updateDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Update primary data store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Update cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;322-advantages--disadvantages&#34;&gt;
    &lt;a href=&#34;#322-advantages--disadvantages&#34;&gt;#&lt;/a&gt;
    3.2.2 Advantages &lt;strong&gt;&amp;amp; Disadvantages&lt;/strong&gt;:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Advantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Consistency&lt;/strong&gt;: The cache always contains the latest data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Speed&lt;/strong&gt;: Read operations are fast as data is always available in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write Penalty&lt;/strong&gt;: Every write operation comes with an overhead of updating the cache.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Intensive&lt;/strong&gt;: It can be resource-intensive for write-heavy applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-write-behind-or-write-back-cache&#34;&gt;
    &lt;a href=&#34;#33-write-behind-or-write-back-cache&#34;&gt;#&lt;/a&gt;
    3.3. Write-behind &lt;strong&gt;(or Write-back) Cache&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Here, the application writes directly to the cache, which then periodically updates the primary data store. This reduces the latency associated with every write operation.&lt;/p&gt;
&lt;h4 id=&#34;331-implementation&#34;&gt;
    &lt;a href=&#34;#331-implementation&#34;&gt;#&lt;/a&gt;
    3.3.1. Implementation:
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Buffered Writes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writes are buffered in the cache and are periodically flushed to the primary data store.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go Code&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Buffered data update function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bufferedUpdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Update cache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// A separate routine or process will flush the cache to the primary data store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-advantages--disadvantages&#34;&gt;
    &lt;a href=&#34;#332-advantages--disadvantages&#34;&gt;#&lt;/a&gt;
    3.3.2. Advantages &lt;strong&gt;&amp;amp; Disadvantages&lt;/strong&gt;:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Advantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fast Writes&lt;/strong&gt;: Write operations are speedy since they only update the cache initially.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch Processing&lt;/strong&gt;: Periodic flushing can leverage batch processing for efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Loss&lt;/strong&gt;: If the cache fails before a flush, data can be lost.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complexity&lt;/strong&gt;: Implementing a reliable flushing mechanism adds complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-eviction-policies-keeping-your-cache-optimized&#34;&gt;
    &lt;a href=&#34;#4-eviction-policies-keeping-your-cache-optimized&#34;&gt;#&lt;/a&gt;
    4. &lt;strong&gt;Eviction&lt;/strong&gt; Policies: &lt;strong&gt;Keeping Your Cache Optimized&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Redis provides several eviction policies, ensuring optimal use of memory:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No Eviction:
&lt;ul&gt;
&lt;li&gt;Redis returns errors when the memory limit is reached.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AllKeys LRU:
&lt;ul&gt;
&lt;li&gt;Evicts least recently used keys first.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AllKeys Random:
&lt;ul&gt;
&lt;li&gt;Evicts random keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Volatile LRU:
&lt;ul&gt;
&lt;li&gt;Evicts least recently used keys, but only among those set to expire.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Volatile Random:
&lt;ul&gt;
&lt;li&gt;Random eviction, but only among keys with an expiration set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Volatile TTL:
&lt;ul&gt;
&lt;li&gt;Evicts the keys with the nearest expiration time first.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Go, you can set the desired eviction policy using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ConfigSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;maxmemory-policy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;allkeys-lru&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5-best-practices-for-go-redis-caching&#34;&gt;
    &lt;a href=&#34;#5-best-practices-for-go-redis-caching&#34;&gt;#&lt;/a&gt;
    5. &lt;strong&gt;Best Practices for Go-Redis Caching&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;51-cache-key-naming-conventions&#34;&gt;
    &lt;a href=&#34;#51-cache-key-naming-conventions&#34;&gt;#&lt;/a&gt;
    5.1. &lt;strong&gt;Cache&lt;/strong&gt; key naming conventions
&lt;/h3&gt;&lt;p&gt;Choosing an appropriate naming convention for your cache keys can significantly improve cache manageability, readability, and prevent key collisions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Descriptive Names: A key should provide hints about the data it holds.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Bad&lt;/em&gt;: &lt;code&gt;k1234&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Good&lt;/em&gt;: &lt;code&gt;user:profile:1234&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Namespacing: Use colons &lt;code&gt;:&lt;/code&gt; for separating different parts of your keys to simulate namespaces.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;post:comments:4567&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Versioning: When your data structure changes, you can use versioning in your keys to avoid conflicts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;v2:user:profile:1234&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep It Concise: While descriptiveness is essential, long keys take more memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example in Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post:%d:comments&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;postID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;52-handling-cache-misses-efficiently&#34;&gt;
    &lt;a href=&#34;#52-handling-cache-misses-efficiently&#34;&gt;#&lt;/a&gt;
    5.2. &lt;strong&gt;Handling&lt;/strong&gt; Cache &lt;strong&gt;Misses Efficiently&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Cache misses can be expensive. Here’s how to manage them wisely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implementing a Loading Strategy:
&lt;ul&gt;
&lt;li&gt;On a cache miss, fetch the data from the primary data source and load it into the cache for future requests. This can be implemented with the Cache-aside (Lazy Loading) pattern we discussed earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avoid Cache Stampede:
&lt;ul&gt;
&lt;li&gt;This occurs when multiple clients try to read a key that’s missing from the cache, causing them all to hit the database simultaneously. One way to avoid this is by using a mutex or a semaphore to ensure only one client fetches from the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set Reasonable TTLs (Time-To-Live):
&lt;ul&gt;
&lt;li&gt;For infrequently changed data, longer TTLs are apt, while frequently changed data benefits from shorter TTLs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-common-pitfalls-in-go-redis-caching-and-how-to-avoid-them&#34;&gt;
    &lt;a href=&#34;#6-common-pitfalls-in-go-redis-caching-and-how-to-avoid-them&#34;&gt;#&lt;/a&gt;
    6. Common Pitfalls in Go-Redis Caching and How to Avoid Them
&lt;/h2&gt;&lt;h3 id=&#34;61-not-considering-serialization-costs&#34;&gt;
    &lt;a href=&#34;#61-not-considering-serialization-costs&#34;&gt;#&lt;/a&gt;
    6.1. Not Considering Serialization Costs
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Pitfall&lt;/strong&gt;: Overlooking the time and CPU overhead of serializing and deserializing data when caching complex data structures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution&lt;/strong&gt;: Choose efficient serialization libraries and formats. In Go, libraries like &lt;code&gt;encoding/gob&lt;/code&gt; or third-party solutions like &lt;code&gt;msgpack&lt;/code&gt; can be considered. Test serialization strategies to see which works best for your specific data types and access patterns.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/golang/comments/9krlqv/serialization_of_cache_items_encodinggob/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Serialization of cache items (encoding/gob?)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I switched our in-memory caching to Redis and used &lt;code&gt;encoding/gob&lt;/code&gt; to serialize the cache items. It seemed nice considering it carries type info and gave my &amp;ldquo;generic&amp;rdquo; caches a nice api (as I could just keep the redis store as an interchangeable &lt;code&gt;Store&lt;/code&gt; interface, easily switched out for an in-memory cache without serialization or whatever), and benchmarked quite well as compared to json. But now I&amp;rsquo;m seeing a pretty massive CPU usage on our servers, and having read a bit more it might not have been a great use case for gob, which apparently is better suited for streams of data where one encoder instance is &amp;ldquo;paired&amp;rdquo; to one decoder instance. I end up having to initialize &lt;code&gt;GobEncoder&lt;/code&gt; and &lt;code&gt;GobDecoder&lt;/code&gt; on every ser/deser, and I suspect it&amp;rsquo;s taking a pretty heavy toll on CPU.&lt;/p&gt;
&lt;p&gt;Is there any way around this while still using gob? I tried keeping an encoder/decoder alive with a buffer along with a mutex, and clearing the buffer with &lt;code&gt;buffer.Reset()&lt;/code&gt; on every ser/deser, but that fails. There seems to be more internal state to gob than that.&lt;/p&gt;
&lt;p&gt;What other serialization formats do people normally use for storing stuff in redis or equivalent?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comments:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OP:&lt;/strong&gt; The thing I&amp;rsquo;m unsure about is whether gob is a viable solution for these &amp;ldquo;one off&amp;rdquo; ser/deserializations? Since it&amp;rsquo;s primarily meant for streams of data, and I end up using something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewEncoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Deserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Someone:&lt;/strong&gt; Yeah, gob isn&amp;rsquo;t the best fit for storing singular values.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/pkg/encoding/gob/#Encoder.Encode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/pkg/encoding/gob/#Encoder.Encode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; guaranteeing that all necessary type information has been transmitted first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This could be the gotcha you&amp;rsquo;re facing, &lt;a class=&#34;link&#34; href=&#34;https://golang.org/src/encoding/gob/decoder.go#L153&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/src/encoding/gob/decoder.go#L153&lt;/a&gt; will likely end up running for every single value (as each stored value is in effect a complete stream with a single element).&lt;/p&gt;
&lt;p&gt;edit: &lt;a class=&#34;link&#34; href=&#34;https://github.com/alecthomas/go_serialization_benchmarks&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/alecthomas/go_serialization_benchmarks&lt;/a&gt; may be helpful&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Someone:&lt;/strong&gt; You&amp;rsquo;ll also find that gob uses more space than many other encodings when storing singular values - it&amp;rsquo;s just not suited to this task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OP:&lt;/strong&gt; Ended up using msgpack as it performed way, way better for this single value scenario. Gob is just meant for streaming I suppose.&lt;/p&gt;
&lt;h3 id=&#34;62-cache-invalidation-woes&#34;&gt;
    &lt;a href=&#34;#62-cache-invalidation-woes&#34;&gt;#&lt;/a&gt;
    6.2. Cache Invalidation Woes
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Pitfall&lt;/strong&gt;: Not invalidating or updating the cache when the underlying data changes, leading to stale data being served.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution&lt;/strong&gt;: Implement a robust cache invalidation strategy. This might include setting appropriate TTLs, using write-through caching, or manually invalidating keys when data changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;63-not-preparing-for-redis-failures&#34;&gt;
    &lt;a href=&#34;#63-not-preparing-for-redis-failures&#34;&gt;#&lt;/a&gt;
    6.3. Not Preparing for Redis Failures
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Pitfall&lt;/strong&gt;: Failing to consider scenarios where the Redis server might become unavailable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution&lt;/strong&gt;: Implement redundancy using Redis Sentinel or Redis Cluster. On the application side, ensure that your Go application can handle Redis downtimes gracefully, potentially serving stale data or reverting to the primary data source.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://voskan.host/2023/08/10/redis-and-golang-complete-guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Complete Guide to Redis in Go - From Installation to Advanced Features | Master Redis with Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://voskan.host/2023/08/14/golang-redis-caching/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go-Redis Caching: Strategies, Best Practices &amp;amp; Common Pitfalls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Introduce Redis - In-memory Database</title>
        <link>https://blog.yorforger.cc/p/introduce-redis-in-memory-database/</link>
        <pubDate>Sun, 01 Oct 2023 10:40:58 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/introduce-redis-in-memory-database/</guid>
        <description>&lt;h2 id=&#34;1-redis-data-types&#34;&gt;
    &lt;a href=&#34;#1-redis-data-types&#34;&gt;#&lt;/a&gt;
    1. Redis data types
&lt;/h2&gt;&lt;p&gt;Redis, an acronym for &lt;strong&gt;Remote Dictionary Server&lt;/strong&gt;, is an open-source, in-memory data structure store. It can be employed as a database, cache, and even a message broker. Unlike traditional databases that read and write data to disk, Redis operates primarily in memory, which is one of the key reasons behind its lightning-fast data retrieval capabilities.&lt;/p&gt;
&lt;h3 id=&#34;11-string&#34;&gt;
    &lt;a href=&#34;#11-string&#34;&gt;#&lt;/a&gt;
    1.1. String
&lt;/h3&gt;&lt;p&gt;Redis Strings is one of the most versatile of Redis’ building blocks, a &lt;strong&gt;binary-safe&lt;/strong&gt; data structure, binary-safe means the strings in Redis can be any binary data. In Redis, strings are multipurpose. They can store data as simple as an integer or as complex as a JPEG image file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strings is an array data structure of bytes&lt;/strong&gt; (or words) that stores a sequence of elements, typically characters, using some character encoding. It can store any data-a string, integer, floating point value, JPEG image, serialized Ruby object, or anything else you want it to carry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;redis&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; mykey &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is a string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;redis&amp;gt; get mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is a string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;12-hash&#34;&gt;
    &lt;a href=&#34;#12-hash&#34;&gt;#&lt;/a&gt;
    1.2. Hash
&lt;/h3&gt;&lt;p&gt;A Redis hash is a data type that represents a &lt;strong&gt;mapping between&lt;/strong&gt; &lt;strong&gt;a string field and a string value&lt;/strong&gt;. There is no integer or float value in hash, just string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; hset bike:1 model Deimos &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Enduro bikes&amp;#39;&lt;/span&gt; price &lt;span class=&#34;m&#34;&gt;4972&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; hget bike:1 model
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Deimos&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; hget bike:1 price
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;4972&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; hgetall bike:1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Deimos&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Enduro bikes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4972&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that the output of &lt;code&gt;&amp;gt; hget bike:1 price&lt;/code&gt; is &lt;code&gt;&amp;quot;4972&amp;quot;&lt;/code&gt; not &lt;code&gt;4972&lt;/code&gt;, which is a string.&lt;/p&gt;
&lt;p&gt;On the surface, think of a hash data type as an enclosed set of key/value pairs inside the value of another key. The embedded keys are called &lt;strong&gt;fields&lt;/strong&gt;. So a string is stored inside a &lt;strong&gt;key&lt;/strong&gt; and inside a particular &lt;strong&gt;field&lt;/strong&gt; within that key.&lt;/p&gt;
&lt;p&gt;Figure 3 shows the basics of how a hash is stored. The key is associated with a hash object. That hash object can have multiple fields (i.e., subkeys) associated with individual strings. This allows you to store more complex data types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yorforger.cc/001-intro-redis/a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;a&#34;
	
	
&gt;&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/-KdITaRkQ-U&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/redis-data-types-the-basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis Data Types: The Basics - The New Stack&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/-KdITaRkQ-U?si=aAQDQfZvUhqGn800&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://youtu.be/-KdITaRkQ-U?si=aAQDQfZvUhqGn800&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/redis-data-types-the-basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis Data Types: The Basics - The New Stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.com/redis-enterprise/data-structures/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Data Structures | Redis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.io/docs/data-types/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis data types | Redis&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-key-value-database&#34;&gt;
    &lt;a href=&#34;#2-key-value-database&#34;&gt;#&lt;/a&gt;
    2. Key-value database
&lt;/h2&gt;&lt;p&gt;All data in Redis are stored as key-value pairs, &lt;strong&gt;Redis keys&lt;/strong&gt; are always strings, &lt;strong&gt;Redis values&lt;/strong&gt; can be strings, hashes, lists, sets or sorted sets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good practice for naming keys is to create and stick to a particular schema. For example, a common scheme for identifying objects is to use an &lt;code&gt;object-type:id&lt;/code&gt; schema. So an object representing user id#1000 would be attached to the key name &lt;code&gt;user:1000&lt;/code&gt;. An object representing a purchase order with an order number of 1234 might be attached to a key named &lt;code&gt;order:1234&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, keys related to the base object can use suffixes on the key. For example, while the user id#1000 can use the key &lt;code&gt;user:1000&lt;/code&gt;, a queue associated with that user could use the key &lt;code&gt;user:1000:queue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class=&#34;link&#34; href=&#34;https://thenewstack.io/redis-data-types-the-basics/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://thenewstack.io/redis-data-types-the-basics/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;21-key-is-always-string&#34;&gt;
    &lt;a href=&#34;#21-key-is-always-string&#34;&gt;#&lt;/a&gt;
    2.1. Key is always string
&lt;/h3&gt;&lt;p&gt;When you store a hash object in Redis, the key is still a string, and the value is a hash data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; hset user:1 name Alice age &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; os Ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; keys *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;user:1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As you can see there we created two key-value data above, the first one&amp;rsquo;s value is a hash and second one&amp;rsquo;s value is a string, that&amp;rsquo;s the only difference. You may think the first key &lt;code&gt;&amp;quot;user:1&amp;quot;&lt;/code&gt; a littler strange, but it&amp;rsquo;s just a string, you can name it as &lt;code&gt;user-1&lt;/code&gt;, &lt;code&gt;user1&lt;/code&gt; or other form,  &lt;code&gt;&amp;quot;user:1&amp;quot;&lt;/code&gt; is just a hash&amp;rsquo;s key naming convention in Redis.&lt;/p&gt;
&lt;p&gt;And we use key to retrieve data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; get os
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ubuntu&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; hget user:1 age
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; hgetall user:1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Retrieving hash value in Redis is a little complited, as you can see, we use string &lt;code&gt;&amp;quot;user:1&amp;quot;&lt;/code&gt; to retrieve the hash value &lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;Alice&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;6&amp;quot;}&lt;/code&gt;, then we use the string &lt;code&gt;&amp;quot;age&amp;quot;&lt;/code&gt; to get the string value &lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;22-dont-forget-all-is-string&#34;&gt;
    &lt;a href=&#34;#22-dont-forget-all-is-string&#34;&gt;#&lt;/a&gt;
    2.2. Don&amp;rsquo;t forget all is string
&lt;/h3&gt;&lt;p&gt;Note that we are in the Redis command line, therefore we don&amp;rsquo;t need make the key or value string explicitly, what I mean is that the both codes belwo is fine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; greeting helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; hset user:1 name Alice age &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:6379&amp;gt; hset &lt;span class=&#34;s2&#34;&gt;&amp;#34;user:1&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bu you should know that they are string!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Redis, a key-value pair is a fundamental data structure used for storing and retrieving data. The &amp;ldquo;key&amp;rdquo; is a unique identifier that is used to access the associated &amp;ldquo;value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A Redis hash is a data type that represents a mapping between a string field and a string value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-redis-features&#34;&gt;
    &lt;a href=&#34;#3-redis-features&#34;&gt;#&lt;/a&gt;
    3. Redis features
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atomic Operations&lt;/strong&gt;: Redis operations are atomic, ensuring data integrity and consistency, even in concurrent environments, a feature particularly complementary to Go’s concurrent capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Persistence&lt;/strong&gt;: Even though Redis is an in-memory store, it offers optional durability. This means you can periodically save the data in memory to disk without compromising performance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis provides different methods to persist data on disk without sacrificing much performance. Configuring the right persistence option can make a significant impact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RDB Snapshots&lt;/strong&gt;: RDB persistence offers point-in-time snapshots of your dataset at specified intervals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Append-Only File (AOF)&lt;/strong&gt;: Logs every write operation received by the server, allowing complete data recovery.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Versatility: Redis isn’t just a simple key-value store. It supports various data structures like strings, hashes, lists, sets, and more, making it adaptable to diverse caching needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scalability: With features like replication, partitioning, and clustering, Redis is designed for high availability and horizontal scaling, catering to applications of all sizes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Horizontal Scaling&lt;/strong&gt;: Using Redis Cluster, you can distribute data across multiple machines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vertical Scaling&lt;/strong&gt;: Increasing the hardware resources (CPU, Memory) of your existing Redis server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;: Setting up master-slave replication to distribute read queries among multiple nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time-to-Live (TTL): Redis supports the assignment of expiration times to keys, making it conducive to caching scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://voskan.host/2023/08/14/golang-redis-caching/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go-Redis Caching: Strategies, Best Practices &amp;amp; Common Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://voskan.host/2023/08/10/redis-and-golang-complete-guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Complete Guide to Redis in Go - From Installation to Advanced Features | Master Redis with Golang&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-use-cases&#34;&gt;
    &lt;a href=&#34;#4-use-cases&#34;&gt;#&lt;/a&gt;
    4. Use cases
&lt;/h2&gt;&lt;h3 id=&#34;41-session-store&#34;&gt;
    &lt;a href=&#34;#41-session-store&#34;&gt;#&lt;/a&gt;
    4.1. Session Store
&lt;/h3&gt;&lt;p&gt;There are many ways to save sessions, in-memory, file, database and Redis, if you don&amp;rsquo;t know session, please refer to: &lt;a class=&#34;link&#34; href=&#34;https://davidzhu.xyz/post/cs-basics/005-session-cookie/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cookie &amp;amp; Session&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-caching&#34;&gt;
    &lt;a href=&#34;#42-caching&#34;&gt;#&lt;/a&gt;
    4.2. Caching
&lt;/h3&gt;&lt;p&gt;Learn more:&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.io/docs/getting-started/installation/install-redis-on-mac-os/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Install Redis on macOS | Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.io/docs/ui/cli/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis CLI | Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.redis.com/explore/what-is-redis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis: In-memory database. How it works and Why you should use it | The Home of Redis Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Useful Redis Commands</title>
        <link>https://blog.yorforger.cc/p/useful-redis-commands/</link>
        <pubDate>Sat, 30 Sep 2023 16:40:58 +0000</pubDate>
        
        <guid>https://blog.yorforger.cc/p/useful-redis-commands/</guid>
        <description>&lt;h2 id=&#34;1-install--run-redis-server&#34;&gt;
    &lt;a href=&#34;#1-install--run-redis-server&#34;&gt;#&lt;/a&gt;
    1. Install &amp;amp; run redis server
&lt;/h2&gt;&lt;p&gt;Install:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew install redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Run Redis in the foreground:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ redis-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As an alternative to running Redis in the foreground, you can also start the process in the background:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew services start redis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew services stop redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2-connect-to-redis-server&#34;&gt;
    &lt;a href=&#34;#2-connect-to-redis-server&#34;&gt;#&lt;/a&gt;
    2. Connect to redis server
&lt;/h2&gt;&lt;p&gt;Once Redis is running, you can connect it by running &lt;em&gt;Redis Command Line Interface&lt;/em&gt; - &lt;code&gt;redis-cli&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run a client at terminal to connect Redis server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ redis-cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By default, &lt;code&gt;redis-cli&lt;/code&gt; connects to the server at the address 127.0.0.1 with port 6379. To specify a different host name or an IP address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ redis-cli -h redis15.localnet.org -p &lt;span class=&#34;m&#34;&gt;6390&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By default, &lt;code&gt;redis-cli&lt;/code&gt; uses a plain TCP connection to connect to Redis. You may enable SSL/TLS using the &lt;code&gt;--tls&lt;/code&gt; option, along with &lt;code&gt;--cacert&lt;/code&gt; or &lt;code&gt;--cacertdir&lt;/code&gt; to configure a trusted root certificate bundle or directory.&lt;/p&gt;
&lt;p&gt;If the target server requires authentication using a client side certificate, you can specify a certificate and a corresponding private key using &lt;code&gt;--cert&lt;/code&gt; and &lt;code&gt;--key&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;3-redis-cli-monitor&#34;&gt;
    &lt;a href=&#34;#3-redis-cli-monitor&#34;&gt;#&lt;/a&gt;
    3. &lt;code&gt;redis-cli MONITOR&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;All commands received by the active Redis instance will be printed to the standard output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ redis-cli MONITOR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1692367745.525689 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 127.0.0.1:49963&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;set&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;jack&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1692368601.032173 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 127.0.0.1:49963&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;set&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1692368645.284030 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 127.0.0.1:49963&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This means you will get all the commands that your redis server received from clients, recall that &lt;code&gt;redis-cli&lt;/code&gt; will connects to the server at the address 127.0.0.1 with port 6379.&lt;/p&gt;
&lt;p&gt;And if your application &lt;code&gt;C1&lt;/code&gt; use a Redis server &lt;code&gt;S&lt;/code&gt; to save data, your another application &lt;code&gt;C2&lt;/code&gt; that connects to server &lt;code&gt;S&lt;/code&gt; can get that data too. When you run &lt;code&gt;redis-cli&lt;/code&gt;, it start a client, and you can input &lt;code&gt;keys *&lt;/code&gt; to query all key saved on your Redis server.&lt;/p&gt;
&lt;p&gt;Of course using Redis just from the command line interface(&lt;em&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/em&gt;) is not enough as the goal is to use it from your application. In order to do so you need to download and install a Redis client library for your programming language. You&amp;rsquo;ll find a &lt;a class=&#34;link&#34; href=&#34;https://redis.io/clients&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;full list of clients for different languages in this page&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
